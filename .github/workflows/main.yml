name: Generate and Deploy Documentation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 9.0.x
        
    - name: Install DocFX
      run: |
        dotnet tool install -g docfx
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build project
      run: dotnet build --no-restore
      
    - name: Prepare docs directory
      run: |
        mkdir -p docs
        mkdir -p docs/api
        mkdir -p docs/articles
        mkdir -p docs/images
        
    - name: Configure DocFX
      run: |
        # Create docfx.json in the root directory
        cat > docfx.json << EOF
        {
          "metadata": [
            {
              "src": [
                {
                  "files": [
                    "src/Quantum/**.csproj",
                    "src/Bridge/**.csproj"
                  ]
                }
              ],
              "dest": "docs/api",
              "disableGitFeatures": false,
              "disableDefaultFilter": false
            }
          ],
          "build": {
            "content": [
              {
                "files": [
                  "docs/api/**.yml",
                  "docs/api/index.md"
                ]
              },
              {
                "files": [
                  "docs/articles/**.md",
                  "docs/articles/**/toc.yml",
                  "docs/toc.yml",
                  "docs/*.md"
                ]
              }
            ],
            "resource": [
              {
                "files": [
                  "docs/images/**"
                ]
              }
            ],
            "overwrite": [
              {
                "files": [
                  "docs/apidoc/**.md"
                ],
                "exclude": [
                  "obj/**",
                  "_site/**"
                ]
              }
            ],
            "dest": "docs/_site",
            "globalMetadataFiles": [],
            "fileMetadataFiles": [],
            "template": [
              "default"
            ],
            "postProcessors": [],
            "markdownEngineName": "markdig",
            "noLangKeyword": false,
            "keepFileLink": false,
            "cleanupCacheHistory": false,
            "disableGitFeatures": false
          }
        }
        EOF
        
        # Copy README.md for index
        cp README.md docs/index.md
        
        # Create basic TOC
        cat > docs/toc.yml << EOF
        - name: Home
          href: index.md
        - name: API Documentation
          href: api/
          homepage: api/index.md
        - name: Articles
          href: articles/
        EOF
        
        # Create API index
        cat > docs/api/index.md << EOF
        # EasyQ API Documentation
        
        Welcome to the API documentation for EasyQ, a quantum computing framework for regular developers.
        
        ## Namespaces
        
        * [EasyQ.Bridge](EasyQ.Bridge.html) - Developer-friendly APIs for quantum computing
        * [EasyQ.Bridge.Search](EasyQ.Bridge.Search.html) - Search functionality using quantum algorithms
        * [EasyQ.Bridge.Cryptography](EasyQ.Bridge.Cryptography.html) - Cryptographic functionality using quantum properties
        * [EasyQ.Quantum](EasyQ.Quantum.html) - Core quantum operations
        EOF
        
        # Create basic article structure
        cat > docs/articles/intro.md << EOF
        # Introduction to EasyQ
        
        EasyQ makes quantum computing accessible to regular developers without requiring specialized knowledge of quantum mechanics or quantum computing principles.
        
        ## Getting Started
        
        To use EasyQ in your project:
        
        1. Install the EasyQ package
        2. Add the necessary using statements
        3. Create instances of the quantum operation classes you need
        
        ## Examples
        
        Check out the [examples in our test suite](https://github.com/Henrikarba/EasyQ/tree/main/tests) to see EasyQ in action.
        EOF
        
        cat > docs/articles/toc.yml << EOF
        - name: Introduction
          href: intro.md
        EOF
        
    - name: Generate documentation
      run: |
        docfx metadata
        docfx build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_site
        force_orphan: true
