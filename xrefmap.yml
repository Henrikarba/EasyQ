### YamlMime:XRefMap
sorted: true
references:
- uid: EasyQ.Bridge.Cryptography
  name: EasyQ.Bridge.Cryptography
  href: api/bridge/EasyQ.Bridge.Cryptography.html
  commentId: N:EasyQ.Bridge.Cryptography
  fullName: EasyQ.Bridge.Cryptography
  nameWithType: EasyQ.Bridge.Cryptography
- uid: EasyQ.Bridge.Cryptography.AuthenticationMode
  name: AuthenticationMode
  href: api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html
  commentId: T:EasyQ.Bridge.Cryptography.AuthenticationMode
  fullName: EasyQ.Bridge.Cryptography.AuthenticationMode
  nameWithType: AuthenticationMode
- uid: EasyQ.Bridge.Cryptography.AuthenticationMode.Enhanced
  name: Enhanced
  href: api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html#EasyQ_Bridge_Cryptography_AuthenticationMode_Enhanced
  commentId: F:EasyQ.Bridge.Cryptography.AuthenticationMode.Enhanced
  fullName: EasyQ.Bridge.Cryptography.AuthenticationMode.Enhanced
  nameWithType: AuthenticationMode.Enhanced
- uid: EasyQ.Bridge.Cryptography.AuthenticationMode.None
  name: None
  href: api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html#EasyQ_Bridge_Cryptography_AuthenticationMode_None
  commentId: F:EasyQ.Bridge.Cryptography.AuthenticationMode.None
  fullName: EasyQ.Bridge.Cryptography.AuthenticationMode.None
  nameWithType: AuthenticationMode.None
- uid: EasyQ.Bridge.Cryptography.AuthenticationMode.Standard
  name: Standard
  href: api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html#EasyQ_Bridge_Cryptography_AuthenticationMode_Standard
  commentId: F:EasyQ.Bridge.Cryptography.AuthenticationMode.Standard
  fullName: EasyQ.Bridge.Cryptography.AuthenticationMode.Standard
  nameWithType: AuthenticationMode.Standard
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult
  name: KeyDistributionResult
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html
  commentId: T:EasyQ.Bridge.Cryptography.KeyDistributionResult
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult
  nameWithType: KeyDistributionResult
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag
  name: AuthenticationTag
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_AuthenticationTag
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag
  nameWithType: KeyDistributionResult.AuthenticationTag
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag*
  name: AuthenticationTag
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_AuthenticationTag_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.AuthenticationTag
  nameWithType: KeyDistributionResult.AuthenticationTag
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated
  name: EntangledPairsCreated
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_EntangledPairsCreated
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated
  nameWithType: KeyDistributionResult.EntangledPairsCreated
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated*
  name: EntangledPairsCreated
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_EntangledPairsCreated_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.EntangledPairsCreated
  nameWithType: KeyDistributionResult.EntangledPairsCreated
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate
  name: ErrorRate
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_ErrorRate
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate
  nameWithType: KeyDistributionResult.ErrorRate
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate*
  name: ErrorRate
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_ErrorRate_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.ErrorRate
  nameWithType: KeyDistributionResult.ErrorRate
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason
  name: FailureReason
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_FailureReason
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason
  nameWithType: KeyDistributionResult.FailureReason
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason*
  name: FailureReason
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_FailureReason_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.FailureReason
  nameWithType: KeyDistributionResult.FailureReason
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.Key
  name: Key
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_Key
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.Key
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.Key
  nameWithType: KeyDistributionResult.Key
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.Key*
  name: Key
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_Key_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.Key
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.Key
  nameWithType: KeyDistributionResult.Key
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter
  name: SecurityParameter
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_SecurityParameter
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter
  nameWithType: KeyDistributionResult.SecurityParameter
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter*
  name: SecurityParameter
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_SecurityParameter_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.SecurityParameter
  nameWithType: KeyDistributionResult.SecurityParameter
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.Success
  name: Success
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_Success
  commentId: P:EasyQ.Bridge.Cryptography.KeyDistributionResult.Success
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.Success
  nameWithType: KeyDistributionResult.Success
- uid: EasyQ.Bridge.Cryptography.KeyDistributionResult.Success*
  name: Success
  href: api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html#EasyQ_Bridge_Cryptography_KeyDistributionResult_Success_
  commentId: Overload:EasyQ.Bridge.Cryptography.KeyDistributionResult.Success
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.KeyDistributionResult.Success
  nameWithType: KeyDistributionResult.Success
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution
  name: QuantumKeyDistribution
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html
  commentId: T:EasyQ.Bridge.Cryptography.QuantumKeyDistribution
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution
  nameWithType: QuantumKeyDistribution
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor
  name: QuantumKeyDistribution()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution__ctor
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor
  name.vb: New()
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.QuantumKeyDistribution()
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.New()
  nameWithType: QuantumKeyDistribution.QuantumKeyDistribution()
  nameWithType.vb: QuantumKeyDistribution.New()
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor(EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions)
  name: QuantumKeyDistribution(QuantumKeyDistributionOptions)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution__ctor_EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor(EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions)
  name.vb: New(QuantumKeyDistributionOptions)
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.QuantumKeyDistribution(EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.New(EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions)
  nameWithType: QuantumKeyDistribution.QuantumKeyDistribution(QuantumKeyDistributionOptions)
  nameWithType.vb: QuantumKeyDistribution.New(QuantumKeyDistributionOptions)
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor*
  name: QuantumKeyDistribution
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution__ctor_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.QuantumKeyDistribution
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.New
  nameWithType: QuantumKeyDistribution.QuantumKeyDistribution
  nameWithType.vb: QuantumKeyDistribution.New
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin(System.Double)
  name: CalculateSecurityMargin(double)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_CalculateSecurityMargin_System_Double_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin(System.Double)
  name.vb: CalculateSecurityMargin(Double)
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin(double)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin(Double)
  nameWithType: QuantumKeyDistribution.CalculateSecurityMargin(double)
  nameWithType.vb: QuantumKeyDistribution.CalculateSecurityMargin(Double)
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin*
  name: CalculateSecurityMargin
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_CalculateSecurityMargin_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.CalculateSecurityMargin
  nameWithType: QuantumKeyDistribution.CalculateSecurityMargin
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose
  name: Dispose()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_Dispose
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose()
  nameWithType: QuantumKeyDistribution.Dispose()
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose(System.Boolean)
  name: Dispose(bool)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_Dispose_System_Boolean_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose(System.Boolean)
  name.vb: Dispose(Boolean)
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose(bool)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose(Boolean)
  nameWithType: QuantumKeyDistribution.Dispose(bool)
  nameWithType.vb: QuantumKeyDistribution.Dispose(Boolean)
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose*
  name: Dispose
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_Dispose_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Dispose
  nameWithType: QuantumKeyDistribution.Dispose
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs(System.Int32,System.Int32,System.Double)
  name: EstimateRequiredPairs(int, int, double)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_EstimateRequiredPairs_System_Int32_System_Int32_System_Double_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs(System.Int32,System.Int32,System.Double)
  name.vb: EstimateRequiredPairs(Integer, Integer, Double)
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs(int, int, double)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs(Integer, Integer, Double)
  nameWithType: QuantumKeyDistribution.EstimateRequiredPairs(int, int, double)
  nameWithType.vb: QuantumKeyDistribution.EstimateRequiredPairs(Integer, Integer, Double)
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs*
  name: EstimateRequiredPairs
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_EstimateRequiredPairs_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.EstimateRequiredPairs
  nameWithType: QuantumKeyDistribution.EstimateRequiredPairs
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Finalize
  name: ~QuantumKeyDistribution()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_Finalize
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Finalize
  name.vb: ''
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.~QuantumKeyDistribution()
  fullName.vb: ''
  nameWithType: QuantumKeyDistribution.~QuantumKeyDistribution()
  nameWithType.vb: ''
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Finalize*
  name: ~QuantumKeyDistribution
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_Finalize_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.Finalize
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.~QuantumKeyDistribution
  nameWithType: QuantumKeyDistribution.~QuantumKeyDistribution
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync
  name: GenerateKeyAsync()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_GenerateKeyAsync
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync()
  nameWithType: QuantumKeyDistribution.GenerateKeyAsync()
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync*
  name: GenerateKeyAsync
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_GenerateKeyAsync_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.GenerateKeyAsync
  nameWithType: QuantumKeyDistribution.GenerateKeyAsync
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency
  name: SimulateProtocolEfficiency()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_SimulateProtocolEfficiency
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency()
  nameWithType: QuantumKeyDistribution.SimulateProtocolEfficiency()
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency*
  name: SimulateProtocolEfficiency
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_SimulateProtocolEfficiency_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.SimulateProtocolEfficiency
  nameWithType: QuantumKeyDistribution.SimulateProtocolEfficiency
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync
  name: VerifyChannelSecurityAsync()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_VerifyChannelSecurityAsync
  commentId: M:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync()
  nameWithType: QuantumKeyDistribution.VerifyChannelSecurityAsync()
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync*
  name: VerifyChannelSecurityAsync
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html#EasyQ_Bridge_Cryptography_QuantumKeyDistribution_VerifyChannelSecurityAsync_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistribution.VerifyChannelSecurityAsync
  nameWithType: QuantumKeyDistribution.VerifyChannelSecurityAsync
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions
  name: QuantumKeyDistributionOptions
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html
  commentId: T:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions
  nameWithType: QuantumKeyDistributionOptions
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode
  name: AuthenticationMode
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_AuthenticationMode
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode
  nameWithType: QuantumKeyDistributionOptions.AuthenticationMode
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode*
  name: AuthenticationMode
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_AuthenticationMode_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.AuthenticationMode
  nameWithType: QuantumKeyDistributionOptions.AuthenticationMode
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection
  name: EnableErrorCorrection
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_EnableErrorCorrection
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection
  nameWithType: QuantumKeyDistributionOptions.EnableErrorCorrection
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection*
  name: EnableErrorCorrection
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_EnableErrorCorrection_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableErrorCorrection
  nameWithType: QuantumKeyDistributionOptions.EnableErrorCorrection
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging
  name: EnableLogging
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_EnableLogging
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging
  nameWithType: QuantumKeyDistributionOptions.EnableLogging
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging*
  name: EnableLogging
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_EnableLogging_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.EnableLogging
  nameWithType: QuantumKeyDistributionOptions.EnableLogging
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength
  name: KeyLength
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_KeyLength
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength
  nameWithType: QuantumKeyDistributionOptions.KeyLength
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength*
  name: KeyLength
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_KeyLength_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.KeyLength
  nameWithType: QuantumKeyDistributionOptions.KeyLength
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate
  name: MaxAcceptableErrorRate
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_MaxAcceptableErrorRate
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate
  nameWithType: QuantumKeyDistributionOptions.MaxAcceptableErrorRate
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate*
  name: MaxAcceptableErrorRate
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_MaxAcceptableErrorRate_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAcceptableErrorRate
  nameWithType: QuantumKeyDistributionOptions.MaxAcceptableErrorRate
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts
  name: MaxAttempts
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_MaxAttempts
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts
  nameWithType: QuantumKeyDistributionOptions.MaxAttempts
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts*
  name: MaxAttempts
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_MaxAttempts_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.MaxAttempts
  nameWithType: QuantumKeyDistributionOptions.MaxAttempts
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret
  name: PreSharedSecret
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_PreSharedSecret
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret
  nameWithType: QuantumKeyDistributionOptions.PreSharedSecret
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret*
  name: PreSharedSecret
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_PreSharedSecret_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.PreSharedSecret
  nameWithType: QuantumKeyDistributionOptions.PreSharedSecret
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel
  name: SecurityLevel
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_SecurityLevel
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel
  nameWithType: QuantumKeyDistributionOptions.SecurityLevel
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel*
  name: SecurityLevel
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_SecurityLevel_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityLevel
  nameWithType: QuantumKeyDistributionOptions.SecurityLevel
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold
  name: SecurityThreshold
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_SecurityThreshold
  commentId: P:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold
  nameWithType: QuantumKeyDistributionOptions.SecurityThreshold
- uid: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold*
  name: SecurityThreshold
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html#EasyQ_Bridge_Cryptography_QuantumKeyDistributionOptions_SecurityThreshold_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.SecurityThreshold
  nameWithType: QuantumKeyDistributionOptions.SecurityThreshold
- uid: EasyQ.Bridge.Cryptography.QuantumRng
  name: QuantumRng
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html
  commentId: T:EasyQ.Bridge.Cryptography.QuantumRng
  fullName: EasyQ.Bridge.Cryptography.QuantumRng
  nameWithType: QuantumRng
- uid: EasyQ.Bridge.Cryptography.QuantumRng.#ctor
  name: QuantumRng()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng__ctor
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.#ctor
  name.vb: New()
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.QuantumRng()
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumRng.New()
  nameWithType: QuantumRng.QuantumRng()
  nameWithType.vb: QuantumRng.New()
- uid: EasyQ.Bridge.Cryptography.QuantumRng.#ctor(System.Boolean,System.Int32)
  name: QuantumRng(bool, int)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng__ctor_System_Boolean_System_Int32_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.#ctor(System.Boolean,System.Int32)
  name.vb: New(Boolean, Integer)
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.QuantumRng(bool, int)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumRng.New(Boolean, Integer)
  nameWithType: QuantumRng.QuantumRng(bool, int)
  nameWithType.vb: QuantumRng.New(Boolean, Integer)
- uid: EasyQ.Bridge.Cryptography.QuantumRng.#ctor*
  name: QuantumRng
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng__ctor_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumRng.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.QuantumRng
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumRng.New
  nameWithType: QuantumRng.QuantumRng
  nameWithType.vb: QuantumRng.New
- uid: EasyQ.Bridge.Cryptography.QuantumRng.Dispose
  name: Dispose()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_Dispose
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.Dispose
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.Dispose()
  nameWithType: QuantumRng.Dispose()
- uid: EasyQ.Bridge.Cryptography.QuantumRng.Dispose(System.Boolean)
  name: Dispose(bool)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_Dispose_System_Boolean_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.Dispose(System.Boolean)
  name.vb: Dispose(Boolean)
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.Dispose(bool)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumRng.Dispose(Boolean)
  nameWithType: QuantumRng.Dispose(bool)
  nameWithType.vb: QuantumRng.Dispose(Boolean)
- uid: EasyQ.Bridge.Cryptography.QuantumRng.Dispose*
  name: Dispose
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_Dispose_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumRng.Dispose
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.Dispose
  nameWithType: QuantumRng.Dispose
- uid: EasyQ.Bridge.Cryptography.QuantumRng.Finalize
  name: ~QuantumRng()
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_Finalize
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.Finalize
  name.vb: ''
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.~QuantumRng()
  fullName.vb: ''
  nameWithType: QuantumRng.~QuantumRng()
  nameWithType.vb: ''
- uid: EasyQ.Bridge.Cryptography.QuantumRng.Finalize*
  name: ~QuantumRng
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_Finalize_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumRng.Finalize
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.~QuantumRng
  nameWithType: QuantumRng.~QuantumRng
- uid: EasyQ.Bridge.Cryptography.QuantumRng.RandomInt(System.Int32,System.Int32)
  name: RandomInt(int, int)
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_RandomInt_System_Int32_System_Int32_
  commentId: M:EasyQ.Bridge.Cryptography.QuantumRng.RandomInt(System.Int32,System.Int32)
  name.vb: RandomInt(Integer, Integer)
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.RandomInt(int, int)
  fullName.vb: EasyQ.Bridge.Cryptography.QuantumRng.RandomInt(Integer, Integer)
  nameWithType: QuantumRng.RandomInt(int, int)
  nameWithType.vb: QuantumRng.RandomInt(Integer, Integer)
- uid: EasyQ.Bridge.Cryptography.QuantumRng.RandomInt*
  name: RandomInt
  href: api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html#EasyQ_Bridge_Cryptography_QuantumRng_RandomInt_
  commentId: Overload:EasyQ.Bridge.Cryptography.QuantumRng.RandomInt
  isSpec: "True"
  fullName: EasyQ.Bridge.Cryptography.QuantumRng.RandomInt
  nameWithType: QuantumRng.RandomInt
- uid: EasyQ.Bridge.Search
  name: EasyQ.Bridge.Search
  href: api/bridge/EasyQ.Bridge.Search.html
  commentId: N:EasyQ.Bridge.Search
  fullName: EasyQ.Bridge.Search
  nameWithType: EasyQ.Bridge.Search
- uid: EasyQ.Bridge.Search.IterationStrategy
  name: IterationStrategy
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html
  commentId: T:EasyQ.Bridge.Search.IterationStrategy
  fullName: EasyQ.Bridge.Search.IterationStrategy
  nameWithType: IterationStrategy
- uid: EasyQ.Bridge.Search.IterationStrategy.Aggressive
  name: Aggressive
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_Aggressive
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.Aggressive
  fullName: EasyQ.Bridge.Search.IterationStrategy.Aggressive
  nameWithType: IterationStrategy.Aggressive
- uid: EasyQ.Bridge.Search.IterationStrategy.Conservative
  name: Conservative
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_Conservative
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.Conservative
  fullName: EasyQ.Bridge.Search.IterationStrategy.Conservative
  nameWithType: IterationStrategy.Conservative
- uid: EasyQ.Bridge.Search.IterationStrategy.Custom
  name: Custom
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_Custom
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.Custom
  fullName: EasyQ.Bridge.Search.IterationStrategy.Custom
  nameWithType: IterationStrategy.Custom
- uid: EasyQ.Bridge.Search.IterationStrategy.HalfOptimal
  name: HalfOptimal
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_HalfOptimal
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.HalfOptimal
  fullName: EasyQ.Bridge.Search.IterationStrategy.HalfOptimal
  nameWithType: IterationStrategy.HalfOptimal
- uid: EasyQ.Bridge.Search.IterationStrategy.Optimal
  name: Optimal
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_Optimal
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.Optimal
  fullName: EasyQ.Bridge.Search.IterationStrategy.Optimal
  nameWithType: IterationStrategy.Optimal
- uid: EasyQ.Bridge.Search.IterationStrategy.SingleIteration
  name: SingleIteration
  href: api/bridge/EasyQ.Bridge.Search.IterationStrategy.html#EasyQ_Bridge_Search_IterationStrategy_SingleIteration
  commentId: F:EasyQ.Bridge.Search.IterationStrategy.SingleIteration
  fullName: EasyQ.Bridge.Search.IterationStrategy.SingleIteration
  nameWithType: IterationStrategy.SingleIteration
- uid: EasyQ.Bridge.Search.QuantumSearch
  name: QuantumSearch
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html
  commentId: T:EasyQ.Bridge.Search.QuantumSearch
  fullName: EasyQ.Bridge.Search.QuantumSearch
  nameWithType: QuantumSearch
- uid: EasyQ.Bridge.Search.QuantumSearch.#ctor
  name: QuantumSearch()
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch__ctor
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.#ctor
  name.vb: New()
  fullName: EasyQ.Bridge.Search.QuantumSearch.QuantumSearch()
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.New()
  nameWithType: QuantumSearch.QuantumSearch()
  nameWithType.vb: QuantumSearch.New()
- uid: EasyQ.Bridge.Search.QuantumSearch.#ctor(EasyQ.Bridge.Search.QuantumSearchOptions)
  name: QuantumSearch(QuantumSearchOptions)
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch__ctor_EasyQ_Bridge_Search_QuantumSearchOptions_
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.#ctor(EasyQ.Bridge.Search.QuantumSearchOptions)
  name.vb: New(QuantumSearchOptions)
  fullName: EasyQ.Bridge.Search.QuantumSearch.QuantumSearch(EasyQ.Bridge.Search.QuantumSearchOptions)
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.New(EasyQ.Bridge.Search.QuantumSearchOptions)
  nameWithType: QuantumSearch.QuantumSearch(QuantumSearchOptions)
  nameWithType.vb: QuantumSearch.New(QuantumSearchOptions)
- uid: EasyQ.Bridge.Search.QuantumSearch.#ctor*
  name: QuantumSearch
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch__ctor_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearch.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Bridge.Search.QuantumSearch.QuantumSearch
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.New
  nameWithType: QuantumSearch.QuantumSearch
  nameWithType.vb: QuantumSearch.New
- uid: EasyQ.Bridge.Search.QuantumSearch.Dispose
  name: Dispose()
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Dispose
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.Dispose
  fullName: EasyQ.Bridge.Search.QuantumSearch.Dispose()
  nameWithType: QuantumSearch.Dispose()
- uid: EasyQ.Bridge.Search.QuantumSearch.Dispose(System.Boolean)
  name: Dispose(bool)
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Dispose_System_Boolean_
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.Dispose(System.Boolean)
  name.vb: Dispose(Boolean)
  fullName: EasyQ.Bridge.Search.QuantumSearch.Dispose(bool)
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.Dispose(Boolean)
  nameWithType: QuantumSearch.Dispose(bool)
  nameWithType.vb: QuantumSearch.Dispose(Boolean)
- uid: EasyQ.Bridge.Search.QuantumSearch.Dispose*
  name: Dispose
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Dispose_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearch.Dispose
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearch.Dispose
  nameWithType: QuantumSearch.Dispose
- uid: EasyQ.Bridge.Search.QuantumSearch.Finalize
  name: ~QuantumSearch()
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Finalize
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.Finalize
  name.vb: ''
  fullName: EasyQ.Bridge.Search.QuantumSearch.~QuantumSearch()
  fullName.vb: ''
  nameWithType: QuantumSearch.~QuantumSearch()
  nameWithType.vb: ''
- uid: EasyQ.Bridge.Search.QuantumSearch.Finalize*
  name: ~QuantumSearch
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Finalize_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearch.Finalize
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearch.~QuantumSearch
  nameWithType: QuantumSearch.~QuantumSearch
- uid: EasyQ.Bridge.Search.QuantumSearch.Search*
  name: Search
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Search_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearch.Search
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearch.Search
  nameWithType: QuantumSearch.Search
- uid: EasyQ.Bridge.Search.QuantumSearch.Search``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},EasyQ.Bridge.Search.QuantumSearchOptions,System.Nullable{System.Int32})
  name: Search<T>(IList<T>, Func<T, bool>, QuantumSearchOptions?, int?)
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Search__1_System_Collections_Generic_IList___0__System_Func___0_System_Boolean__EasyQ_Bridge_Search_QuantumSearchOptions_System_Nullable_System_Int32__
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.Search``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},EasyQ.Bridge.Search.QuantumSearchOptions,System.Nullable{System.Int32})
  name.vb: Search(Of T)(IList(Of T), Func(Of T, Boolean), QuantumSearchOptions, Integer?)
  fullName: EasyQ.Bridge.Search.QuantumSearch.Search<T>(System.Collections.Generic.IList<T>, System.Func<T, bool>, EasyQ.Bridge.Search.QuantumSearchOptions?, int?)
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.Search(Of T)(System.Collections.Generic.IList(Of T), System.Func(Of T, Boolean), EasyQ.Bridge.Search.QuantumSearchOptions, Integer?)
  nameWithType: QuantumSearch.Search<T>(IList<T>, Func<T, bool>, QuantumSearchOptions?, int?)
  nameWithType.vb: QuantumSearch.Search(Of T)(IList(Of T), Func(Of T, Boolean), QuantumSearchOptions, Integer?)
- uid: EasyQ.Bridge.Search.QuantumSearch.Search``1(System.Collections.Generic.IList{``0},``0,EasyQ.Bridge.Search.QuantumSearchOptions)
  name: Search<T>(IList<T>, T, QuantumSearchOptions?)
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearch.html#EasyQ_Bridge_Search_QuantumSearch_Search__1_System_Collections_Generic_IList___0____0_EasyQ_Bridge_Search_QuantumSearchOptions_
  commentId: M:EasyQ.Bridge.Search.QuantumSearch.Search``1(System.Collections.Generic.IList{``0},``0,EasyQ.Bridge.Search.QuantumSearchOptions)
  name.vb: Search(Of T)(IList(Of T), T, QuantumSearchOptions)
  fullName: EasyQ.Bridge.Search.QuantumSearch.Search<T>(System.Collections.Generic.IList<T>, T, EasyQ.Bridge.Search.QuantumSearchOptions?)
  fullName.vb: EasyQ.Bridge.Search.QuantumSearch.Search(Of T)(System.Collections.Generic.IList(Of T), T, EasyQ.Bridge.Search.QuantumSearchOptions)
  nameWithType: QuantumSearch.Search<T>(IList<T>, T, QuantumSearchOptions?)
  nameWithType.vb: QuantumSearch.Search(Of T)(IList(Of T), T, QuantumSearchOptions)
- uid: EasyQ.Bridge.Search.QuantumSearchOptions
  name: QuantumSearchOptions
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html
  commentId: T:EasyQ.Bridge.Search.QuantumSearchOptions
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions
  nameWithType: QuantumSearchOptions
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor
  name: CustomIterationFactor
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_CustomIterationFactor
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor
  nameWithType: QuantumSearchOptions.CustomIterationFactor
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor*
  name: CustomIterationFactor
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_CustomIterationFactor_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationFactor
  nameWithType: QuantumSearchOptions.CustomIterationFactor
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset
  name: CustomIterationOffset
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_CustomIterationOffset
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset
  nameWithType: QuantumSearchOptions.CustomIterationOffset
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset*
  name: CustomIterationOffset
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_CustomIterationOffset_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.CustomIterationOffset
  nameWithType: QuantumSearchOptions.CustomIterationOffset
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging
  name: EnableLogging
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_EnableLogging
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging
  nameWithType: QuantumSearchOptions.EnableLogging
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging*
  name: EnableLogging
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_EnableLogging_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.EnableLogging
  nameWithType: QuantumSearchOptions.EnableLogging
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold
  name: FullScanThreshold
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_FullScanThreshold
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold
  nameWithType: QuantumSearchOptions.FullScanThreshold
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold*
  name: FullScanThreshold
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_FullScanThreshold_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.FullScanThreshold
  nameWithType: QuantumSearchOptions.FullScanThreshold
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy
  name: IterationStrategy
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_IterationStrategy
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy
  nameWithType: QuantumSearchOptions.IterationStrategy
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy*
  name: IterationStrategy
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_IterationStrategy_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.IterationStrategy
  nameWithType: QuantumSearchOptions.IterationStrategy
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts
  name: MaxAttempts
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_MaxAttempts
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts
  nameWithType: QuantumSearchOptions.MaxAttempts
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts*
  name: MaxAttempts
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_MaxAttempts_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.MaxAttempts
  nameWithType: QuantumSearchOptions.MaxAttempts
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets
  name: MaxTargets
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_MaxTargets
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets
  nameWithType: QuantumSearchOptions.MaxTargets
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets*
  name: MaxTargets
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_MaxTargets_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.MaxTargets
  nameWithType: QuantumSearchOptions.MaxTargets
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize
  name: SampleSize
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_SampleSize
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize
  nameWithType: QuantumSearchOptions.SampleSize
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize*
  name: SampleSize
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_SampleSize_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.SampleSize
  nameWithType: QuantumSearchOptions.SampleSize
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy
  name: SamplingStrategy
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_SamplingStrategy
  commentId: P:EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy
  nameWithType: QuantumSearchOptions.SamplingStrategy
- uid: EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy*
  name: SamplingStrategy
  href: api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html#EasyQ_Bridge_Search_QuantumSearchOptions_SamplingStrategy_
  commentId: Overload:EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy
  isSpec: "True"
  fullName: EasyQ.Bridge.Search.QuantumSearchOptions.SamplingStrategy
  nameWithType: QuantumSearchOptions.SamplingStrategy
- uid: EasyQ.Bridge.Search.SamplingStrategy
  name: SamplingStrategy
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html
  commentId: T:EasyQ.Bridge.Search.SamplingStrategy
  fullName: EasyQ.Bridge.Search.SamplingStrategy
  nameWithType: SamplingStrategy
- uid: EasyQ.Bridge.Search.SamplingStrategy.AssumeOne
  name: AssumeOne
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html#EasyQ_Bridge_Search_SamplingStrategy_AssumeOne
  commentId: F:EasyQ.Bridge.Search.SamplingStrategy.AssumeOne
  fullName: EasyQ.Bridge.Search.SamplingStrategy.AssumeOne
  nameWithType: SamplingStrategy.AssumeOne
- uid: EasyQ.Bridge.Search.SamplingStrategy.Auto
  name: Auto
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html#EasyQ_Bridge_Search_SamplingStrategy_Auto
  commentId: F:EasyQ.Bridge.Search.SamplingStrategy.Auto
  fullName: EasyQ.Bridge.Search.SamplingStrategy.Auto
  nameWithType: SamplingStrategy.Auto
- uid: EasyQ.Bridge.Search.SamplingStrategy.FullScan
  name: FullScan
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html#EasyQ_Bridge_Search_SamplingStrategy_FullScan
  commentId: F:EasyQ.Bridge.Search.SamplingStrategy.FullScan
  fullName: EasyQ.Bridge.Search.SamplingStrategy.FullScan
  nameWithType: SamplingStrategy.FullScan
- uid: EasyQ.Bridge.Search.SamplingStrategy.Sampling
  name: Sampling
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html#EasyQ_Bridge_Search_SamplingStrategy_Sampling
  commentId: F:EasyQ.Bridge.Search.SamplingStrategy.Sampling
  fullName: EasyQ.Bridge.Search.SamplingStrategy.Sampling
  nameWithType: SamplingStrategy.Sampling
- uid: EasyQ.Bridge.Search.SamplingStrategy.UserProvided
  name: UserProvided
  href: api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html#EasyQ_Bridge_Search_SamplingStrategy_UserProvided
  commentId: F:EasyQ.Bridge.Search.SamplingStrategy.UserProvided
  fullName: EasyQ.Bridge.Search.SamplingStrategy.UserProvided
  nameWithType: SamplingStrategy.UserProvided
- uid: EasyQ.Quantum.Cryptography
  name: EasyQ.Quantum.Cryptography
  href: api/quantum/EasyQ.Quantum.Cryptography.html
  commentId: N:EasyQ.Quantum.Cryptography
  fullName: EasyQ.Quantum.Cryptography
  nameWithType: EasyQ.Quantum.Cryptography
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc
  name: BinaryEntropyCalc
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html
  commentId: T:EasyQ.Quantum.Cryptography.BinaryEntropyCalc
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc
  nameWithType: BinaryEntropyCalc
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: BinaryEntropyCalc(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.BinaryEntropyCalc(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: BinaryEntropyCalc.BinaryEntropyCalc(IOperationFactory)
  nameWithType.vb: BinaryEntropyCalc.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.#ctor*
  name: BinaryEntropyCalc
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.BinaryEntropyCalc
  fullName.vb: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.New
  nameWithType: BinaryEntropyCalc.BinaryEntropyCalc
  nameWithType.vb: BinaryEntropyCalc.New
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log
  name: Microsoft__Quantum__Math__Log
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc_Microsoft__Quantum__Math__Log
  commentId: P:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log
  nameWithType: BinaryEntropyCalc.Microsoft__Quantum__Math__Log
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log*
  name: Microsoft__Quantum__Math__Log
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc_Microsoft__Quantum__Math__Log_
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Microsoft__Quantum__Math__Log
  nameWithType: BinaryEntropyCalc.Microsoft__Quantum__Math__Log
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Double)
  name: Run(IOperationFactory, double)
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Double)
  name.vb: Run(IOperationFactory, Double)
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, double)
  fullName.vb: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Double)
  nameWithType: BinaryEntropyCalc.Run(IOperationFactory, double)
  nameWithType.vb: BinaryEntropyCalc.Run(IOperationFactory, Double)
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.Run
  nameWithType: BinaryEntropyCalc.Run
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___Body__
  commentId: P:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__
  nameWithType: BinaryEntropyCalc.__Body__
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Body__
  nameWithType: BinaryEntropyCalc.__Body__
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__(System.Double)
  name: __DataIn__(double)
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___DataIn___System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__(System.Double)
  name.vb: __DataIn__(Double)
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__(double)
  fullName.vb: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__(Double)
  nameWithType: BinaryEntropyCalc.__DataIn__(double)
  nameWithType.vb: BinaryEntropyCalc.__DataIn__(Double)
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataIn__
  nameWithType: BinaryEntropyCalc.__DataIn__
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__(System.Double)
  name: __DataOut__(double)
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___DataOut___System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__(System.Double)
  name.vb: __DataOut__(Double)
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__(double)
  fullName.vb: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__(Double)
  nameWithType: BinaryEntropyCalc.__DataOut__(double)
  nameWithType.vb: BinaryEntropyCalc.__DataOut__(Double)
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__DataOut__
  nameWithType: BinaryEntropyCalc.__DataOut__
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___Init__
  commentId: M:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__()
  nameWithType: BinaryEntropyCalc.__Init__()
- uid: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html#EasyQ_Quantum_Cryptography_BinaryEntropyCalc___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.BinaryEntropyCalc.__Init__
  nameWithType: BinaryEntropyCalc.__Init__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate
  name: CalculateErrorRate
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html
  commentId: T:EasyQ.Quantum.Cryptography.CalculateErrorRate
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate
  nameWithType: CalculateErrorRate
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: CalculateErrorRate(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.CalculateErrorRate(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: CalculateErrorRate.CalculateErrorRate(IOperationFactory)
  nameWithType.vb: CalculateErrorRate.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.#ctor*
  name: CalculateErrorRate
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.CalculateErrorRate
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.New
  nameWithType: CalculateErrorRate.CalculateErrorRate
  nameWithType.vb: CalculateErrorRate.New
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.In
  name: CalculateErrorRate.In
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.In.html
  commentId: T:EasyQ.Quantum.Cryptography.CalculateErrorRate.In
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.In
  nameWithType: CalculateErrorRate.In
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.In.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: CalculateErrorRate.In.In((IQArray<bool>, IQArray<bool>))
  nameWithType.vb: CalculateErrorRate.In.New((IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.In.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.In.New
  nameWithType: CalculateErrorRate.In.In
  nameWithType.vb: CalculateErrorRate.In.New
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Length__
  commentId: P:EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__
  nameWithType: CalculateErrorRate.Length__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Length__
  nameWithType: CalculateErrorRate.Length__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Microsoft__Quantum__Convert__IntAsDouble
  commentId: P:EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble*
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Microsoft__Quantum__Convert__IntAsDouble_
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: CalculateErrorRate.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min
  nameWithType: CalculateErrorRate.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Microsoft__Quantum__Math__Min
  nameWithType: CalculateErrorRate.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, IQArray<bool>, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: CalculateErrorRate.Run(IOperationFactory, IQArray<bool>, IQArray<bool>)
  nameWithType.vb: CalculateErrorRate.Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.Run
  nameWithType: CalculateErrorRate.Run
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___Body__
  commentId: P:EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__
  nameWithType: CalculateErrorRate.__Body__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Body__
  nameWithType: CalculateErrorRate.__Body__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: CalculateErrorRate.__DataIn__((IQArray<bool>, IQArray<bool>))
  nameWithType.vb: CalculateErrorRate.__DataIn__((IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataIn__
  nameWithType: CalculateErrorRate.__DataIn__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__(System.Double)
  name: __DataOut__(double)
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___DataOut___System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__(System.Double)
  name.vb: __DataOut__(Double)
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__(double)
  fullName.vb: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__(Double)
  nameWithType: CalculateErrorRate.__DataOut__(double)
  nameWithType.vb: CalculateErrorRate.__DataOut__(Double)
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__DataOut__
  nameWithType: CalculateErrorRate.__DataOut__
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___Init__
  commentId: M:EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__()
  nameWithType: CalculateErrorRate.__Init__()
- uid: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html#EasyQ_Quantum_Cryptography_CalculateErrorRate___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CalculateErrorRate.__Init__
  nameWithType: CalculateErrorRate.__Init__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair
  name: CreateEntangledPair
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html
  commentId: T:EasyQ.Quantum.Cryptography.CreateEntangledPair
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair
  nameWithType: CreateEntangledPair
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: CreateEntangledPair(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.CreateEntangledPair(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.CreateEntangledPair.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: CreateEntangledPair.CreateEntangledPair(IOperationFactory)
  nameWithType.vb: CreateEntangledPair.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.#ctor*
  name: CreateEntangledPair
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.CreateEntangledPair
  fullName.vb: EasyQ.Quantum.Cryptography.CreateEntangledPair.New
  nameWithType: CreateEntangledPair.CreateEntangledPair
  nameWithType.vb: CreateEntangledPair.New
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Allocate__
  commentId: P:EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__
  nameWithType: CreateEntangledPair.Allocate__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Allocate___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Allocate__
  nameWithType: CreateEntangledPair.Allocate__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Microsoft__Quantum__Intrinsic__CNOT
  commentId: P:EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT*
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Microsoft__Quantum__Intrinsic__CNOT_
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: CreateEntangledPair.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
  nameWithType: CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
  nameWithType: CreateEntangledPair.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out
  name: CreateEntangledPair.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.CreateEntangledPair.Out
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out
  nameWithType: CreateEntangledPair.Out
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,Microsoft.Quantum.Simulation.Core.Qubit})
  name: Out((Qubit, Qubit))
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Out__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_Qubit_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,Microsoft.Quantum.Simulation.Core.Qubit})
  name.vb: New((Qubit, Qubit))
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.Out((Microsoft.Quantum.Simulation.Core.Qubit, Microsoft.Quantum.Simulation.Core.Qubit))
  fullName.vb: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.New((Microsoft.Quantum.Simulation.Core.Qubit, Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: CreateEntangledPair.Out.Out((Qubit, Qubit))
  nameWithType.vb: CreateEntangledPair.Out.New((Qubit, Qubit))
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.New
  nameWithType: CreateEntangledPair.Out.Out
  nameWithType.vb: CreateEntangledPair.Out.New
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Release__
  commentId: P:EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__
  nameWithType: CreateEntangledPair.Release__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Release___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Release__
  nameWithType: CreateEntangledPair.Release__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: Run(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: CreateEntangledPair.Run(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.Run
  nameWithType: CreateEntangledPair.Run
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___Body__
  commentId: P:EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__
  nameWithType: CreateEntangledPair.__Body__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Body__
  nameWithType: CreateEntangledPair.__Body__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  name: __DataIn__(QVoid)
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___DataIn___Microsoft_Quantum_Simulation_Core_QVoid_
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  nameWithType: CreateEntangledPair.__DataIn__(QVoid)
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataIn__
  nameWithType: CreateEntangledPair.__DataIn__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,Microsoft.Quantum.Simulation.Core.Qubit})
  name: __DataOut__((Qubit, Qubit))
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___DataOut___System_ValueTuple_Microsoft_Quantum_Simulation_Core_Qubit_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,Microsoft.Quantum.Simulation.Core.Qubit})
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__((Microsoft.Quantum.Simulation.Core.Qubit, Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: CreateEntangledPair.__DataOut__((Qubit, Qubit))
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__DataOut__
  nameWithType: CreateEntangledPair.__DataOut__
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___Init__
  commentId: M:EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__()
  nameWithType: CreateEntangledPair.__Init__()
- uid: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html#EasyQ_Quantum_Cryptography_CreateEntangledPair___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.CreateEntangledPair.__Init__
  nameWithType: CreateEntangledPair.__Init__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity
  name: EnhanceKeySecurity
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html
  commentId: T:EasyQ.Quantum.Cryptography.EnhanceKeySecurity
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity
  nameWithType: EnhanceKeySecurity
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: EnhanceKeySecurity(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.EnhanceKeySecurity(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: EnhanceKeySecurity.EnhanceKeySecurity(IOperationFactory)
  nameWithType.vb: EnhanceKeySecurity.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.#ctor*
  name: EnhanceKeySecurity
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.EnhanceKeySecurity
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.New
  nameWithType: EnhanceKeySecurity.EnhanceKeySecurity
  nameWithType.vb: EnhanceKeySecurity.New
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__
  nameWithType: EnhanceKeySecurity.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.GenerateRandomInt__
  nameWithType: EnhanceKeySecurity.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In
  name: EnhanceKeySecurity.In
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.html
  commentId: T:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In
  nameWithType: EnhanceKeySecurity.In
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double})
  name: In((IQArray<bool>, long, long, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double})
  name.vb: New((IQArray(Of Boolean), Long, Long, Double))
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long, double))
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long, Double))
  nameWithType: EnhanceKeySecurity.In.In((IQArray<bool>, long, long, double))
  nameWithType.vb: EnhanceKeySecurity.In.New((IQArray(Of Boolean), Long, Long, Double))
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.New
  nameWithType: EnhanceKeySecurity.In.In
  nameWithType.vb: EnhanceKeySecurity.In.New
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Length__
  commentId: P:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__
  nameWithType: EnhanceKeySecurity.Length__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Length__
  nameWithType: EnhanceKeySecurity.Length__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Microsoft__Quantum__Math__Max
  commentId: P:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max
  nameWithType: EnhanceKeySecurity.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max*
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Microsoft__Quantum__Math__Max_
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Max
  nameWithType: EnhanceKeySecurity.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min
  nameWithType: EnhanceKeySecurity.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Microsoft__Quantum__Math__Min
  nameWithType: EnhanceKeySecurity.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double)
  name: Run(IOperationFactory, IQArray<bool>, long, long, double)
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64_System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double)
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), Long, Long, Double)
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long, double)
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long, Double)
  nameWithType: EnhanceKeySecurity.Run(IOperationFactory, IQArray<bool>, long, long, double)
  nameWithType.vb: EnhanceKeySecurity.Run(IOperationFactory, IQArray(Of Boolean), Long, Long, Double)
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.Run
  nameWithType: EnhanceKeySecurity.Run
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___Body__
  commentId: P:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__
  nameWithType: EnhanceKeySecurity.__Body__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Body__
  nameWithType: EnhanceKeySecurity.__Body__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double})
  name: __DataIn__((IQArray<bool>, long, long, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64,System.Double})
  name.vb: __DataIn__((IQArray(Of Boolean), Long, Long, Double))
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long, double))
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long, Double))
  nameWithType: EnhanceKeySecurity.__DataIn__((IQArray<bool>, long, long, double))
  nameWithType.vb: EnhanceKeySecurity.__DataIn__((IQArray(Of Boolean), Long, Long, Double))
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataIn__
  nameWithType: EnhanceKeySecurity.__DataIn__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: __DataOut__(IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: __DataOut__(IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: EnhanceKeySecurity.__DataOut__(IQArray<bool>)
  nameWithType.vb: EnhanceKeySecurity.__DataOut__(IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__DataOut__
  nameWithType: EnhanceKeySecurity.__DataOut__
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___Init__
  commentId: M:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__()
  nameWithType: EnhanceKeySecurity.__Init__()
- uid: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html#EasyQ_Quantum_Cryptography_EnhanceKeySecurity___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EnhanceKeySecurity.__Init__
  nameWithType: EnhanceKeySecurity.__Init__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness
  name: EntanglementBasedRandomness
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html
  commentId: T:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness
  nameWithType: EntanglementBasedRandomness
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: EntanglementBasedRandomness(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.EntanglementBasedRandomness(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: EntanglementBasedRandomness.EntanglementBasedRandomness(IOperationFactory)
  nameWithType.vb: EntanglementBasedRandomness.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.#ctor*
  name: EntanglementBasedRandomness
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.EntanglementBasedRandomness
  fullName.vb: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.New
  nameWithType: EntanglementBasedRandomness.EntanglementBasedRandomness
  nameWithType.vb: EntanglementBasedRandomness.New
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Allocate__
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__
  nameWithType: EntanglementBasedRandomness.Allocate__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Allocate___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Allocate__
  nameWithType: EntanglementBasedRandomness.Allocate__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__CNOT
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT*
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__CNOT_
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__M
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M*
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Microsoft__Quantum__Intrinsic__M_
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
  nameWithType: EntanglementBasedRandomness.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Release__
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__
  nameWithType: EntanglementBasedRandomness.Release__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Release___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Release__
  nameWithType: EntanglementBasedRandomness.Release__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Reset__
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__
  nameWithType: EntanglementBasedRandomness.Reset__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__*
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Reset___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Reset__
  nameWithType: EntanglementBasedRandomness.Reset__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name: Run(IOperationFactory, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name.vb: Run(IOperationFactory, Long)
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long)
  fullName.vb: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long)
  nameWithType: EntanglementBasedRandomness.Run(IOperationFactory, long)
  nameWithType.vb: EntanglementBasedRandomness.Run(IOperationFactory, Long)
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.Run
  nameWithType: EntanglementBasedRandomness.Run
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___Body__
  commentId: P:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__
  nameWithType: EntanglementBasedRandomness.__Body__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Body__
  nameWithType: EntanglementBasedRandomness.__Body__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__(System.Int64)
  name: __DataIn__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___DataIn___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__(System.Int64)
  name.vb: __DataIn__(Long)
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__(Long)
  nameWithType: EntanglementBasedRandomness.__DataIn__(long)
  nameWithType.vb: EntanglementBasedRandomness.__DataIn__(Long)
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataIn__
  nameWithType: EntanglementBasedRandomness.__DataIn__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: __DataOut__(IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: __DataOut__(IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: EntanglementBasedRandomness.__DataOut__(IQArray<bool>)
  nameWithType.vb: EntanglementBasedRandomness.__DataOut__(IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__DataOut__
  nameWithType: EntanglementBasedRandomness.__DataOut__
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___Init__
  commentId: M:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__()
  nameWithType: EntanglementBasedRandomness.__Init__()
- uid: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html#EasyQ_Quantum_Cryptography_EntanglementBasedRandomness___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.__Init__
  nameWithType: EntanglementBasedRandomness.__Init__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield
  name: EstimateKeyYield
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html
  commentId: T:EasyQ.Quantum.Cryptography.EstimateKeyYield
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield
  nameWithType: EstimateKeyYield
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: EstimateKeyYield(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.EstimateKeyYield(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: EstimateKeyYield.EstimateKeyYield(IOperationFactory)
  nameWithType.vb: EstimateKeyYield.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.#ctor*
  name: EstimateKeyYield
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.EstimateKeyYield
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.New
  nameWithType: EstimateKeyYield.EstimateKeyYield
  nameWithType.vb: EstimateKeyYield.New
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__
  name: BinaryEntropyCalc__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_BinaryEntropyCalc__
  commentId: P:EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__
  nameWithType: EstimateKeyYield.BinaryEntropyCalc__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__*
  name: BinaryEntropyCalc__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_BinaryEntropyCalc___
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.BinaryEntropyCalc__
  nameWithType: EstimateKeyYield.BinaryEntropyCalc__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.In
  name: EstimateKeyYield.In
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.In.html
  commentId: T:EasyQ.Quantum.Cryptography.EstimateKeyYield.In
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.In
  nameWithType: EstimateKeyYield.In
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.#ctor(System.ValueTuple{System.Double,System.Double,System.Int64})
  name: In((double, double, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.In.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_In__ctor_System_ValueTuple_System_Double_System_Double_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.In.#ctor(System.ValueTuple{System.Double,System.Double,System.Int64})
  name.vb: New((Double, Double, Long))
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.In((double, double, long))
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.New((Double, Double, Long))
  nameWithType: EstimateKeyYield.In.In((double, double, long))
  nameWithType.vb: EstimateKeyYield.In.New((Double, Double, Long))
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.In.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.In.New
  nameWithType: EstimateKeyYield.In.In
  nameWithType.vb: EstimateKeyYield.In.New
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Convert__IntAsDouble
  commentId: P:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble*
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Convert__IntAsDouble_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor
  name: Microsoft__Quantum__Math__Floor
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Math__Floor
  commentId: P:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Math__Floor
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor*
  name: Microsoft__Quantum__Math__Floor
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Math__Floor_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Floor
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Math__Floor
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Math__Max
  commentId: P:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max*
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Microsoft__Quantum__Math__Max_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Microsoft__Quantum__Math__Max
  nameWithType: EstimateKeyYield.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Double,System.Double,System.Int64)
  name: Run(IOperationFactory, double, double, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Double_System_Double_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Double,System.Double,System.Int64)
  name.vb: Run(IOperationFactory, Double, Double, Long)
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, double, double, long)
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Double, Double, Long)
  nameWithType: EstimateKeyYield.Run(IOperationFactory, double, double, long)
  nameWithType.vb: EstimateKeyYield.Run(IOperationFactory, Double, Double, Long)
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.Run
  nameWithType: EstimateKeyYield.Run
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___Body__
  commentId: P:EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__
  nameWithType: EstimateKeyYield.__Body__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Body__
  nameWithType: EstimateKeyYield.__Body__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__(System.ValueTuple{System.Double,System.Double,System.Int64})
  name: __DataIn__((double, double, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___DataIn___System_ValueTuple_System_Double_System_Double_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__(System.ValueTuple{System.Double,System.Double,System.Int64})
  name.vb: __DataIn__((Double, Double, Long))
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__((double, double, long))
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__((Double, Double, Long))
  nameWithType: EstimateKeyYield.__DataIn__((double, double, long))
  nameWithType.vb: EstimateKeyYield.__DataIn__((Double, Double, Long))
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataIn__
  nameWithType: EstimateKeyYield.__DataIn__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__(System.Int64)
  name: __DataOut__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___DataOut___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__(System.Int64)
  name.vb: __DataOut__(Long)
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__(Long)
  nameWithType: EstimateKeyYield.__DataOut__(long)
  nameWithType.vb: EstimateKeyYield.__DataOut__(Long)
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__DataOut__
  nameWithType: EstimateKeyYield.__DataOut__
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___Init__
  commentId: M:EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__()
  nameWithType: EstimateKeyYield.__Init__()
- uid: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html#EasyQ_Quantum_Cryptography_EstimateKeyYield___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.EstimateKeyYield.__Init__
  nameWithType: EstimateKeyYield.__Init__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults
  name: FilterMeasurementResults
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html
  commentId: T:EasyQ.Quantum.Cryptography.FilterMeasurementResults
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults
  nameWithType: FilterMeasurementResults
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: FilterMeasurementResults(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.FilterMeasurementResults(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: FilterMeasurementResults.FilterMeasurementResults(IOperationFactory)
  nameWithType.vb: FilterMeasurementResults.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.#ctor*
  name: FilterMeasurementResults
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.FilterMeasurementResults
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.New
  nameWithType: FilterMeasurementResults.FilterMeasurementResults
  nameWithType.vb: FilterMeasurementResults.New
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In
  name: FilterMeasurementResults.In
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.html
  commentId: T:EasyQ.Quantum.Cryptography.FilterMeasurementResults.In
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In
  nameWithType: FilterMeasurementResults.In
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.In((Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: FilterMeasurementResults.In.In((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: FilterMeasurementResults.In.New((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.New
  nameWithType: FilterMeasurementResults.In.In
  nameWithType.vb: FilterMeasurementResults.In.New
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Length__
  commentId: P:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__
  nameWithType: FilterMeasurementResults.Length__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Length__
  nameWithType: FilterMeasurementResults.Length__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out
  name: FilterMeasurementResults.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out
  nameWithType: FilterMeasurementResults.Out
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}}})
  name: Out((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>))
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Out__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_ValueTuple_System_Int64_System_Int64_System_Boolean_System_Boolean____
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}}})
  name.vb: New((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of (Long, Long, Boolean, Boolean))))
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.Out((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<(long, long, bool, bool)>))
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of (Long, Long, Boolean, Boolean))))
  nameWithType: FilterMeasurementResults.Out.Out((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>))
  nameWithType.vb: FilterMeasurementResults.Out.New((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of (Long, Long, Boolean, Boolean))))
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.New
  nameWithType: FilterMeasurementResults.Out.Out
  nameWithType.vb: FilterMeasurementResults.Out.New
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: FilterMeasurementResults.Run(IOperationFactory, IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)
  nameWithType.vb: FilterMeasurementResults.Run(IOperationFactory, IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.Run
  nameWithType: FilterMeasurementResults.Run
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___Body__
  commentId: P:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__
  nameWithType: FilterMeasurementResults.__Body__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Body__
  nameWithType: FilterMeasurementResults.__Body__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: FilterMeasurementResults.__DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: FilterMeasurementResults.__DataIn__((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataIn__
  nameWithType: FilterMeasurementResults.__DataIn__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}}})
  name: __DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>))
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___DataOut___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_ValueTuple_System_Int64_System_Int64_System_Boolean_System_Boolean____
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}}})
  name.vb: __DataOut__((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of (Long, Long, Boolean, Boolean))))
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<(long, long, bool, bool)>))
  fullName.vb: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of (Long, Long, Boolean, Boolean))))
  nameWithType: FilterMeasurementResults.__DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>))
  nameWithType.vb: FilterMeasurementResults.__DataOut__((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of (Long, Long, Boolean, Boolean))))
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__DataOut__
  nameWithType: FilterMeasurementResults.__DataOut__
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___Init__
  commentId: M:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__()
  nameWithType: FilterMeasurementResults.__Init__()
- uid: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html#EasyQ_Quantum_Cryptography_FilterMeasurementResults___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.FilterMeasurementResults.__Init__
  nameWithType: FilterMeasurementResults.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode
  name: GenerateAuthenticationCode
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode
  nameWithType: GenerateAuthenticationCode
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateAuthenticationCode(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.GenerateAuthenticationCode(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateAuthenticationCode.GenerateAuthenticationCode(IOperationFactory)
  nameWithType.vb: GenerateAuthenticationCode.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.#ctor*
  name: GenerateAuthenticationCode
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.GenerateAuthenticationCode
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.New
  nameWithType: GenerateAuthenticationCode.GenerateAuthenticationCode
  nameWithType.vb: GenerateAuthenticationCode.New
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In
  name: GenerateAuthenticationCode.In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In
  nameWithType: GenerateAuthenticationCode.In
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateAuthenticationCode.In.In((IQArray<bool>, IQArray<bool>))
  nameWithType.vb: GenerateAuthenticationCode.In.New((IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.New
  nameWithType: GenerateAuthenticationCode.In.In
  nameWithType.vb: GenerateAuthenticationCode.In.New
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Length__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__
  nameWithType: GenerateAuthenticationCode.Length__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Length__
  nameWithType: GenerateAuthenticationCode.Length__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
  nameWithType: GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
  nameWithType: GenerateAuthenticationCode.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, IQArray<bool>, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: GenerateAuthenticationCode.Run(IOperationFactory, IQArray<bool>, IQArray<bool>)
  nameWithType.vb: GenerateAuthenticationCode.Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.Run
  nameWithType: GenerateAuthenticationCode.Run
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__
  nameWithType: GenerateAuthenticationCode.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Body__
  nameWithType: GenerateAuthenticationCode.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateAuthenticationCode.__DataIn__((IQArray<bool>, IQArray<bool>))
  nameWithType.vb: GenerateAuthenticationCode.__DataIn__((IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataIn__
  nameWithType: GenerateAuthenticationCode.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: __DataOut__(IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: __DataOut__(IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: GenerateAuthenticationCode.__DataOut__(IQArray<bool>)
  nameWithType.vb: GenerateAuthenticationCode.__DataOut__(IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__DataOut__
  nameWithType: GenerateAuthenticationCode.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__()
  nameWithType: GenerateAuthenticationCode.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html#EasyQ_Quantum_Cryptography_GenerateAuthenticationCode___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.__Init__
  nameWithType: GenerateAuthenticationCode.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey
  name: GenerateQuantumSecureKey
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey
  nameWithType: GenerateQuantumSecureKey
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateQuantumSecureKey(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateQuantumSecureKey(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateQuantumSecureKey.GenerateQuantumSecureKey(IOperationFactory)
  nameWithType.vb: GenerateQuantumSecureKey.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.#ctor*
  name: GenerateQuantumSecureKey
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateQuantumSecureKey
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.New
  nameWithType: GenerateQuantumSecureKey.GenerateQuantumSecureKey
  nameWithType.vb: GenerateQuantumSecureKey.New
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__
  name: CalculateErrorRate__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_CalculateErrorRate__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__
  nameWithType: GenerateQuantumSecureKey.CalculateErrorRate__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__*
  name: CalculateErrorRate__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_CalculateErrorRate___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.CalculateErrorRate__
  nameWithType: GenerateQuantumSecureKey.CalculateErrorRate__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__
  name: EnhanceKeySecurity__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_EnhanceKeySecurity__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__
  nameWithType: GenerateQuantumSecureKey.EnhanceKeySecurity__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__*
  name: EnhanceKeySecurity__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_EnhanceKeySecurity___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.EnhanceKeySecurity__
  nameWithType: GenerateQuantumSecureKey.EnhanceKeySecurity__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__
  name: FilterMeasurementResults__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_FilterMeasurementResults__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__
  nameWithType: GenerateQuantumSecureKey.FilterMeasurementResults__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__*
  name: FilterMeasurementResults__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_FilterMeasurementResults___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.FilterMeasurementResults__
  nameWithType: GenerateQuantumSecureKey.FilterMeasurementResults__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__
  name: GenerateAuthenticationCode__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_GenerateAuthenticationCode__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__
  nameWithType: GenerateQuantumSecureKey.GenerateAuthenticationCode__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__*
  name: GenerateAuthenticationCode__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_GenerateAuthenticationCode___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateAuthenticationCode__
  nameWithType: GenerateQuantumSecureKey.GenerateAuthenticationCode__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__
  nameWithType: GenerateQuantumSecureKey.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.GenerateRandomInt__
  nameWithType: GenerateQuantumSecureKey.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In
  name: GenerateQuantumSecureKey.In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In
  nameWithType: GenerateQuantumSecureKey.In
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.#ctor(System.ValueTuple{System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((long, long, double, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_In__ctor_System_ValueTuple_System_Int64_System_Int64_System_Double_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.#ctor(System.ValueTuple{System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((Long, Long, Double, IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.In((long, long, double, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.New((Long, Long, Double, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateQuantumSecureKey.In.In((long, long, double, IQArray<bool>))
  nameWithType.vb: GenerateQuantumSecureKey.In.New((Long, Long, Double, IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.New
  nameWithType: GenerateQuantumSecureKey.In.In
  nameWithType.vb: GenerateQuantumSecureKey.In.New
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Length__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__
  nameWithType: GenerateQuantumSecureKey.Length__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Length__
  nameWithType: GenerateQuantumSecureKey.Length__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Microsoft__Quantum__Math__Max
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
  nameWithType: GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max*
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Microsoft__Quantum__Math__Max_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
  nameWithType: GenerateQuantumSecureKey.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
  nameWithType: GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
  nameWithType: GenerateQuantumSecureKey.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out
  name: GenerateQuantumSecureKey.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out
  nameWithType: GenerateQuantumSecureKey.Out
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.#ctor(System.ValueTuple{System.Boolean,System.Double,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: Out((bool, double, double, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Out__ctor_System_ValueTuple_System_Boolean_System_Double_System_Double_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.#ctor(System.ValueTuple{System.Boolean,System.Double,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((Boolean, Double, Double, IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.Out((bool, double, double, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.New((Boolean, Double, Double, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateQuantumSecureKey.Out.Out((bool, double, double, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: GenerateQuantumSecureKey.Out.New((Boolean, Double, Double, IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.New
  nameWithType: GenerateQuantumSecureKey.Out.Out
  nameWithType.vb: GenerateQuantumSecureKey.Out.New
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__
  name: PerformErrorCorrection__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_PerformErrorCorrection__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__
  nameWithType: GenerateQuantumSecureKey.PerformErrorCorrection__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__*
  name: PerformErrorCorrection__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_PerformErrorCorrection___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformErrorCorrection__
  nameWithType: GenerateQuantumSecureKey.PerformErrorCorrection__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__
  name: PerformQuantumExchange__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_PerformQuantumExchange__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__
  nameWithType: GenerateQuantumSecureKey.PerformQuantumExchange__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__*
  name: PerformQuantumExchange__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_PerformQuantumExchange___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.PerformQuantumExchange__
  nameWithType: GenerateQuantumSecureKey.PerformQuantumExchange__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, long, long, double, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_System_Int64_System_Double_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, Long, Long, Double, IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, long, double, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Long, Double, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: GenerateQuantumSecureKey.Run(IOperationFactory, long, long, double, IQArray<bool>)
  nameWithType.vb: GenerateQuantumSecureKey.Run(IOperationFactory, Long, Long, Double, IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Run
  nameWithType: GenerateQuantumSecureKey.Run
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__
  name: VerifyChannelSecurity__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_VerifyChannelSecurity__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__
  nameWithType: GenerateQuantumSecureKey.VerifyChannelSecurity__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__*
  name: VerifyChannelSecurity__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey_VerifyChannelSecurity___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.VerifyChannelSecurity__
  nameWithType: GenerateQuantumSecureKey.VerifyChannelSecurity__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__
  nameWithType: GenerateQuantumSecureKey.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Body__
  nameWithType: GenerateQuantumSecureKey.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__(System.ValueTuple{System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((long, long, double, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___DataIn___System_ValueTuple_System_Int64_System_Int64_System_Double_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__(System.ValueTuple{System.Int64,System.Int64,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((Long, Long, Double, IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__((long, long, double, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__((Long, Long, Double, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateQuantumSecureKey.__DataIn__((long, long, double, IQArray<bool>))
  nameWithType.vb: GenerateQuantumSecureKey.__DataIn__((Long, Long, Double, IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataIn__
  nameWithType: GenerateQuantumSecureKey.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__(System.ValueTuple{System.Boolean,System.Double,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___DataOut___System_ValueTuple_System_Boolean_System_Double_System_Double_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__(System.ValueTuple{System.Boolean,System.Double,System.Double,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataOut__((Boolean, Double, Double, IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__((bool, double, double, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__((Boolean, Double, Double, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: GenerateQuantumSecureKey.__DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: GenerateQuantumSecureKey.__DataOut__((Boolean, Double, Double, IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__DataOut__
  nameWithType: GenerateQuantumSecureKey.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__()
  nameWithType: GenerateQuantumSecureKey.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html#EasyQ_Quantum_Cryptography_GenerateQuantumSecureKey___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.__Init__
  nameWithType: GenerateQuantumSecureKey.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit
  name: GenerateRandomBit
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomBit
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit
  nameWithType: GenerateRandomBit
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateRandomBit(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBit.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.GenerateRandomBit(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBit.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomBit.GenerateRandomBit(IOperationFactory)
  nameWithType.vb: GenerateRandomBit.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.#ctor*
  name: GenerateRandomBit
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.GenerateRandomBit
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBit.New
  nameWithType: GenerateRandomBit.GenerateRandomBit
  nameWithType.vb: GenerateRandomBit.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Allocate__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__
  nameWithType: GenerateRandomBit.Allocate__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Allocate___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Allocate__
  nameWithType: GenerateRandomBit.Allocate__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
  nameWithType: GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
  nameWithType: GenerateRandomBit.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Microsoft__Quantum__Intrinsic__M
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
  nameWithType: GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M*
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Microsoft__Quantum__Intrinsic__M_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
  nameWithType: GenerateRandomBit.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Release__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__
  nameWithType: GenerateRandomBit.Release__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Release___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Release__
  nameWithType: GenerateRandomBit.Release__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Reset__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__
  nameWithType: GenerateRandomBit.Reset__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__*
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Reset___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Reset__
  nameWithType: GenerateRandomBit.Reset__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: Run(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBit.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomBit.Run(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.Run
  nameWithType: GenerateRandomBit.Run
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__
  nameWithType: GenerateRandomBit.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Body__
  nameWithType: GenerateRandomBit.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  name: __DataIn__(QVoid)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___DataIn___Microsoft_Quantum_Simulation_Core_QVoid_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__(Microsoft.Quantum.Simulation.Core.QVoid)
  nameWithType: GenerateRandomBit.__DataIn__(QVoid)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataIn__
  nameWithType: GenerateRandomBit.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__(System.Boolean)
  name: __DataOut__(bool)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___DataOut___System_Boolean_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__(System.Boolean)
  name.vb: __DataOut__(Boolean)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__(bool)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__(Boolean)
  nameWithType: GenerateRandomBit.__DataOut__(bool)
  nameWithType.vb: GenerateRandomBit.__DataOut__(Boolean)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__DataOut__
  nameWithType: GenerateRandomBit.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__()
  nameWithType: GenerateRandomBit.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html#EasyQ_Quantum_Cryptography_GenerateRandomBit___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBit.__Init__
  nameWithType: GenerateRandomBit.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits
  name: GenerateRandomBits
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomBits
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits
  nameWithType: GenerateRandomBits
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateRandomBits(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBits.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBits(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBits.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomBits.GenerateRandomBits(IOperationFactory)
  nameWithType.vb: GenerateRandomBits.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.#ctor*
  name: GenerateRandomBits
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBits
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBits.New
  nameWithType: GenerateRandomBits.GenerateRandomBits
  nameWithType.vb: GenerateRandomBits.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__
  name: GenerateRandomBit__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits_GenerateRandomBit__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__
  nameWithType: GenerateRandomBits.GenerateRandomBit__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__*
  name: GenerateRandomBit__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits_GenerateRandomBit___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.GenerateRandomBit__
  nameWithType: GenerateRandomBits.GenerateRandomBit__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name: Run(IOperationFactory, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name.vb: Run(IOperationFactory, Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long)
  nameWithType: GenerateRandomBits.Run(IOperationFactory, long)
  nameWithType.vb: GenerateRandomBits.Run(IOperationFactory, Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.Run
  nameWithType: GenerateRandomBits.Run
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__
  nameWithType: GenerateRandomBits.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Body__
  nameWithType: GenerateRandomBits.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__(System.Int64)
  name: __DataIn__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___DataIn___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__(System.Int64)
  name.vb: __DataIn__(Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__(Long)
  nameWithType: GenerateRandomBits.__DataIn__(long)
  nameWithType.vb: GenerateRandomBits.__DataIn__(Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataIn__
  nameWithType: GenerateRandomBits.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: __DataOut__(IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: __DataOut__(IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: GenerateRandomBits.__DataOut__(IQArray<bool>)
  nameWithType.vb: GenerateRandomBits.__DataOut__(IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__DataOut__
  nameWithType: GenerateRandomBits.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__()
  nameWithType: GenerateRandomBits.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html#EasyQ_Quantum_Cryptography_GenerateRandomBits___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBits.__Init__
  nameWithType: GenerateRandomBits.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes
  name: GenerateRandomBytes
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomBytes
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes
  nameWithType: GenerateRandomBytes
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateRandomBytes(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBytes.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBytes(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBytes.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomBytes.GenerateRandomBytes(IOperationFactory)
  nameWithType.vb: GenerateRandomBytes.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.#ctor*
  name: GenerateRandomBytes
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBytes
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBytes.New
  nameWithType: GenerateRandomBytes.GenerateRandomBytes
  nameWithType.vb: GenerateRandomBytes.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__
  name: GenerateRandomBits__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_GenerateRandomBits__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__
  nameWithType: GenerateRandomBytes.GenerateRandomBits__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__*
  name: GenerateRandomBits__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_GenerateRandomBits___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.GenerateRandomBits__
  nameWithType: GenerateRandomBytes.GenerateRandomBits__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_Microsoft__Quantum__Convert__BoolArrayAsInt
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt*
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_Microsoft__Quantum__Convert__BoolArrayAsInt_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: GenerateRandomBytes.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name: Run(IOperationFactory, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name.vb: Run(IOperationFactory, Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long)
  nameWithType: GenerateRandomBytes.Run(IOperationFactory, long)
  nameWithType.vb: GenerateRandomBytes.Run(IOperationFactory, Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.Run
  nameWithType: GenerateRandomBytes.Run
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__
  nameWithType: GenerateRandomBytes.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Body__
  nameWithType: GenerateRandomBytes.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__(System.Int64)
  name: __DataIn__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___DataIn___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__(System.Int64)
  name.vb: __DataIn__(Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__(Long)
  nameWithType: GenerateRandomBytes.__DataIn__(long)
  nameWithType.vb: GenerateRandomBytes.__DataIn__(Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataIn__
  nameWithType: GenerateRandomBytes.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Int64})
  name: __DataOut__(IQArray<long>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Int64})
  name.vb: __DataOut__(IQArray(Of Long))
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<long>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Long))
  nameWithType: GenerateRandomBytes.__DataOut__(IQArray<long>)
  nameWithType.vb: GenerateRandomBytes.__DataOut__(IQArray(Of Long))
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__DataOut__
  nameWithType: GenerateRandomBytes.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__()
  nameWithType: GenerateRandomBytes.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html#EasyQ_Quantum_Cryptography_GenerateRandomBytes___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomBytes.__Init__
  nameWithType: GenerateRandomBytes.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt
  name: GenerateRandomInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomInt
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt
  nameWithType: GenerateRandomInt
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateRandomInt(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomInt(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomInt.GenerateRandomInt(IOperationFactory)
  nameWithType.vb: GenerateRandomInt.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.#ctor*
  name: GenerateRandomInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomInt
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.New
  nameWithType: GenerateRandomInt.GenerateRandomInt
  nameWithType.vb: GenerateRandomInt.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__
  name: GenerateRandomBits__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_GenerateRandomBits__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__
  nameWithType: GenerateRandomInt.GenerateRandomBits__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__*
  name: GenerateRandomBits__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_GenerateRandomBits___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.GenerateRandomBits__
  nameWithType: GenerateRandomInt.GenerateRandomBits__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.In
  name: GenerateRandomInt.In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.In.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomInt.In
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.In
  nameWithType: GenerateRandomInt.In
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name: In((long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.In.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_In__ctor_System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name.vb: New((Long, Long))
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.In((long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.New((Long, Long))
  nameWithType: GenerateRandomInt.In.In((long, long))
  nameWithType.vb: GenerateRandomInt.In.New((Long, Long))
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.In.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.In.New
  nameWithType: GenerateRandomInt.In.In
  nameWithType.vb: GenerateRandomInt.In.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Convert__BoolArrayAsInt
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt*
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Convert__BoolArrayAsInt_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Convert__IntAsDouble
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble*
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Convert__IntAsDouble_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
  name: Microsoft__Quantum__Math__Ceiling
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Math__Ceiling
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling*
  name: Microsoft__Quantum__Math__Ceiling
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Math__Ceiling_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Math__Ceiling
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg
  name: Microsoft__Quantum__Math__Lg
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Math__Lg
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Math__Lg
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg*
  name: Microsoft__Quantum__Math__Lg
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Microsoft__Quantum__Math__Lg_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Microsoft__Quantum__Math__Lg
  nameWithType: GenerateRandomInt.Microsoft__Quantum__Math__Lg
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name: Run(IOperationFactory, long, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name.vb: Run(IOperationFactory, Long, Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Long)
  nameWithType: GenerateRandomInt.Run(IOperationFactory, long, long)
  nameWithType.vb: GenerateRandomInt.Run(IOperationFactory, Long, Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.Run
  nameWithType: GenerateRandomInt.Run
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__
  nameWithType: GenerateRandomInt.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Body__
  nameWithType: GenerateRandomInt.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name: __DataIn__((long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___DataIn___System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name.vb: __DataIn__((Long, Long))
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__((long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__((Long, Long))
  nameWithType: GenerateRandomInt.__DataIn__((long, long))
  nameWithType.vb: GenerateRandomInt.__DataIn__((Long, Long))
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataIn__
  nameWithType: GenerateRandomInt.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__(System.Int64)
  name: __DataOut__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___DataOut___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__(System.Int64)
  name.vb: __DataOut__(Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__(Long)
  nameWithType: GenerateRandomInt.__DataOut__(long)
  nameWithType.vb: GenerateRandomInt.__DataOut__(Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__DataOut__
  nameWithType: GenerateRandomInt.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__()
  nameWithType: GenerateRandomInt.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html#EasyQ_Quantum_Cryptography_GenerateRandomInt___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomInt.__Init__
  nameWithType: GenerateRandomInt.__Init__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation
  name: GenerateRandomPermutation
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html
  commentId: T:EasyQ.Quantum.Cryptography.GenerateRandomPermutation
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation
  nameWithType: GenerateRandomPermutation
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GenerateRandomPermutation(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomPermutation(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GenerateRandomPermutation.GenerateRandomPermutation(IOperationFactory)
  nameWithType.vb: GenerateRandomPermutation.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.#ctor*
  name: GenerateRandomPermutation
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomPermutation
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.New
  nameWithType: GenerateRandomPermutation.GenerateRandomPermutation
  nameWithType.vb: GenerateRandomPermutation.New
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__
  nameWithType: GenerateRandomPermutation.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.GenerateRandomInt__
  nameWithType: GenerateRandomPermutation.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name: Run(IOperationFactory, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name.vb: Run(IOperationFactory, Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long)
  nameWithType: GenerateRandomPermutation.Run(IOperationFactory, long)
  nameWithType.vb: GenerateRandomPermutation.Run(IOperationFactory, Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.Run
  nameWithType: GenerateRandomPermutation.Run
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__
  nameWithType: GenerateRandomPermutation.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Body__
  nameWithType: GenerateRandomPermutation.__Body__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__(System.Int64)
  name: __DataIn__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___DataIn___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__(System.Int64)
  name.vb: __DataIn__(Long)
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__(Long)
  nameWithType: GenerateRandomPermutation.__DataIn__(long)
  nameWithType.vb: GenerateRandomPermutation.__DataIn__(Long)
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataIn__
  nameWithType: GenerateRandomPermutation.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Int64})
  name: __DataOut__(IQArray<long>)
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Int64})
  name.vb: __DataOut__(IQArray(Of Long))
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<long>)
  fullName.vb: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Long))
  nameWithType: GenerateRandomPermutation.__DataOut__(IQArray<long>)
  nameWithType.vb: GenerateRandomPermutation.__DataOut__(IQArray(Of Long))
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__DataOut__
  nameWithType: GenerateRandomPermutation.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__()
  nameWithType: GenerateRandomPermutation.__Init__()
- uid: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html#EasyQ_Quantum_Cryptography_GenerateRandomPermutation___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GenerateRandomPermutation.__Init__
  nameWithType: GenerateRandomPermutation.__Init__
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle
  name: GetMeasurementAngle
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html
  commentId: T:EasyQ.Quantum.Cryptography.GetMeasurementAngle
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle
  nameWithType: GetMeasurementAngle
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GetMeasurementAngle(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.GetMeasurementAngle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.GetMeasurementAngle(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.GetMeasurementAngle.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GetMeasurementAngle.GetMeasurementAngle(IOperationFactory)
  nameWithType.vb: GetMeasurementAngle.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.#ctor*
  name: GetMeasurementAngle
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.GetMeasurementAngle
  fullName.vb: EasyQ.Quantum.Cryptography.GetMeasurementAngle.New
  nameWithType: GetMeasurementAngle.GetMeasurementAngle
  nameWithType.vb: GetMeasurementAngle.New
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI
  name: Microsoft__Quantum__Math__PI
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle_Microsoft__Quantum__Math__PI
  commentId: P:EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI
  nameWithType: GetMeasurementAngle.Microsoft__Quantum__Math__PI
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI*
  name: Microsoft__Quantum__Math__PI
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle_Microsoft__Quantum__Math__PI_
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Microsoft__Quantum__Math__PI
  nameWithType: GetMeasurementAngle.Microsoft__Quantum__Math__PI
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name: Run(IOperationFactory, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64)
  name.vb: Run(IOperationFactory, Long)
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long)
  fullName.vb: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long)
  nameWithType: GetMeasurementAngle.Run(IOperationFactory, long)
  nameWithType.vb: GetMeasurementAngle.Run(IOperationFactory, Long)
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.Run
  nameWithType: GetMeasurementAngle.Run
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___Body__
  commentId: P:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__
  nameWithType: GetMeasurementAngle.__Body__
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Body__
  nameWithType: GetMeasurementAngle.__Body__
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__(System.Int64)
  name: __DataIn__(long)
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___DataIn___System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__(System.Int64)
  name.vb: __DataIn__(Long)
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__(long)
  fullName.vb: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__(Long)
  nameWithType: GetMeasurementAngle.__DataIn__(long)
  nameWithType.vb: GetMeasurementAngle.__DataIn__(Long)
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataIn__
  nameWithType: GetMeasurementAngle.__DataIn__
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__(System.Double)
  name: __DataOut__(double)
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___DataOut___System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__(System.Double)
  name.vb: __DataOut__(Double)
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__(double)
  fullName.vb: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__(Double)
  nameWithType: GetMeasurementAngle.__DataOut__(double)
  nameWithType.vb: GetMeasurementAngle.__DataOut__(Double)
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__DataOut__
  nameWithType: GetMeasurementAngle.__DataOut__
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___Init__
  commentId: M:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__()
  nameWithType: GetMeasurementAngle.__Init__()
- uid: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html#EasyQ_Quantum_Cryptography_GetMeasurementAngle___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.GetMeasurementAngle.__Init__
  nameWithType: GetMeasurementAngle.__Init__
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis
  name: MeasureInBasis
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html
  commentId: T:EasyQ.Quantum.Cryptography.MeasureInBasis
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis
  nameWithType: MeasureInBasis
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: MeasureInBasis(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.MeasureInBasis(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: MeasureInBasis.MeasureInBasis(IOperationFactory)
  nameWithType.vb: MeasureInBasis.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.#ctor*
  name: MeasureInBasis
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.MeasureInBasis
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.New
  nameWithType: MeasureInBasis.MeasureInBasis
  nameWithType.vb: MeasureInBasis.New
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.In
  name: MeasureInBasis.In
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.In.html
  commentId: T:EasyQ.Quantum.Cryptography.MeasureInBasis.In
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.In
  nameWithType: MeasureInBasis.In
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,System.Double})
  name: In((Qubit, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.In.html#EasyQ_Quantum_Cryptography_MeasureInBasis_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_Qubit_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,System.Double})
  name.vb: New((Qubit, Double))
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.In.In((Microsoft.Quantum.Simulation.Core.Qubit, double))
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.In.New((Microsoft.Quantum.Simulation.Core.Qubit, Double))
  nameWithType: MeasureInBasis.In.In((Qubit, double))
  nameWithType.vb: MeasureInBasis.In.New((Qubit, Double))
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.In.html#EasyQ_Quantum_Cryptography_MeasureInBasis_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.In.New
  nameWithType: MeasureInBasis.In.In
  nameWithType.vb: MeasureInBasis.In.New
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__M
  commentId: P:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M*
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__M_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__M
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
  name: Microsoft__Quantum__Intrinsic__Ry
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__Ry
  commentId: P:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry*
  name: Microsoft__Quantum__Intrinsic__Ry
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__Ry_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__Ry
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__X
  commentId: P:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X*
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Microsoft__Quantum__Intrinsic__X_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Microsoft__Quantum__Intrinsic__X
  nameWithType: MeasureInBasis.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.Qubit,System.Double)
  name: Run(IOperationFactory, Qubit, double)
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_Qubit_System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.Qubit,System.Double)
  name.vb: Run(IOperationFactory, Qubit, Double)
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.Qubit, double)
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.Qubit, Double)
  nameWithType: MeasureInBasis.Run(IOperationFactory, Qubit, double)
  nameWithType.vb: MeasureInBasis.Run(IOperationFactory, Qubit, Double)
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.Run
  nameWithType: MeasureInBasis.Run
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___Body__
  commentId: P:EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__
  nameWithType: MeasureInBasis.__Body__
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__Body__
  nameWithType: MeasureInBasis.__Body__
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,System.Double})
  name: __DataIn__((Qubit, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_Qubit_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.Qubit,System.Double})
  name.vb: __DataIn__((Qubit, Double))
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__((Microsoft.Quantum.Simulation.Core.Qubit, double))
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__((Microsoft.Quantum.Simulation.Core.Qubit, Double))
  nameWithType: MeasureInBasis.__DataIn__((Qubit, double))
  nameWithType.vb: MeasureInBasis.__DataIn__((Qubit, Double))
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataIn__
  nameWithType: MeasureInBasis.__DataIn__
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__(System.Boolean)
  name: __DataOut__(bool)
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___DataOut___System_Boolean_
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__(System.Boolean)
  name.vb: __DataOut__(Boolean)
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__(bool)
  fullName.vb: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__(Boolean)
  nameWithType: MeasureInBasis.__DataOut__(bool)
  nameWithType.vb: MeasureInBasis.__DataOut__(Boolean)
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__DataOut__
  nameWithType: MeasureInBasis.__DataOut__
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___Init__
  commentId: M:EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__()
  nameWithType: MeasureInBasis.__Init__()
- uid: EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html#EasyQ_Quantum_Cryptography_MeasureInBasis___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.MeasureInBasis.__Init__
  nameWithType: MeasureInBasis.__Init__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection
  name: PerformErrorCorrection
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformErrorCorrection
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection
  nameWithType: PerformErrorCorrection
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: PerformErrorCorrection(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.PerformErrorCorrection(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: PerformErrorCorrection.PerformErrorCorrection(IOperationFactory)
  nameWithType.vb: PerformErrorCorrection.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.#ctor*
  name: PerformErrorCorrection
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.PerformErrorCorrection
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.New
  nameWithType: PerformErrorCorrection.PerformErrorCorrection
  nameWithType.vb: PerformErrorCorrection.New
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__
  nameWithType: PerformErrorCorrection.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.GenerateRandomInt__
  nameWithType: PerformErrorCorrection.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In
  name: PerformErrorCorrection.In
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformErrorCorrection.In
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In
  nameWithType: PerformErrorCorrection.In
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double})
  name: In((IQArray<bool>, IQArray<bool>, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double})
  name.vb: New((IQArray(Of Boolean), IQArray(Of Boolean), Double))
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, double))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Double))
  nameWithType: PerformErrorCorrection.In.In((IQArray<bool>, IQArray<bool>, double))
  nameWithType.vb: PerformErrorCorrection.In.New((IQArray(Of Boolean), IQArray(Of Boolean), Double))
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.New
  nameWithType: PerformErrorCorrection.In.In
  nameWithType.vb: PerformErrorCorrection.In.New
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Length__
  commentId: P:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__
  nameWithType: PerformErrorCorrection.Length__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Length__
  nameWithType: PerformErrorCorrection.Length__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min
  nameWithType: PerformErrorCorrection.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Microsoft__Quantum__Math__Min
  nameWithType: PerformErrorCorrection.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out
  name: PerformErrorCorrection.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out
  nameWithType: PerformErrorCorrection.Out
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64})
  name: Out((IQArray<bool>, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Out__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64})
  name.vb: New((IQArray(Of Boolean), Long))
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.Out((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long))
  nameWithType: PerformErrorCorrection.Out.Out((IQArray<bool>, long))
  nameWithType.vb: PerformErrorCorrection.Out.New((IQArray(Of Boolean), Long))
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.New
  nameWithType: PerformErrorCorrection.Out.Out
  nameWithType.vb: PerformErrorCorrection.Out.New
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double)
  name: Run(IOperationFactory, IQArray<bool>, IQArray<bool>, double)
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double)
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean), Double)
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, double)
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Double)
  nameWithType: PerformErrorCorrection.Run(IOperationFactory, IQArray<bool>, IQArray<bool>, double)
  nameWithType.vb: PerformErrorCorrection.Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean), Double)
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.Run
  nameWithType: PerformErrorCorrection.Run
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___Body__
  commentId: P:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__
  nameWithType: PerformErrorCorrection.__Body__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Body__
  nameWithType: PerformErrorCorrection.__Body__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double})
  name: __DataIn__((IQArray<bool>, IQArray<bool>, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Double})
  name.vb: __DataIn__((IQArray(Of Boolean), IQArray(Of Boolean), Double))
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, double))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Double))
  nameWithType: PerformErrorCorrection.__DataIn__((IQArray<bool>, IQArray<bool>, double))
  nameWithType.vb: PerformErrorCorrection.__DataIn__((IQArray(Of Boolean), IQArray(Of Boolean), Double))
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataIn__
  nameWithType: PerformErrorCorrection.__DataIn__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64})
  name: __DataOut__((IQArray<bool>, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___DataOut___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64})
  name.vb: __DataOut__((IQArray(Of Boolean), Long))
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long))
  nameWithType: PerformErrorCorrection.__DataOut__((IQArray<bool>, long))
  nameWithType.vb: PerformErrorCorrection.__DataOut__((IQArray(Of Boolean), Long))
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__DataOut__
  nameWithType: PerformErrorCorrection.__DataOut__
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___Init__
  commentId: M:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__()
  nameWithType: PerformErrorCorrection.__Init__()
- uid: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html#EasyQ_Quantum_Cryptography_PerformErrorCorrection___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformErrorCorrection.__Init__
  nameWithType: PerformErrorCorrection.__Init__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange
  name: PerformQuantumExchange
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformQuantumExchange
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange
  nameWithType: PerformQuantumExchange
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: PerformQuantumExchange(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.PerformQuantumExchange(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: PerformQuantumExchange.PerformQuantumExchange(IOperationFactory)
  nameWithType.vb: PerformQuantumExchange.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.#ctor*
  name: PerformQuantumExchange
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.PerformQuantumExchange
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.New
  nameWithType: PerformQuantumExchange.PerformQuantumExchange
  nameWithType.vb: PerformQuantumExchange.New
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Allocate__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__
  nameWithType: PerformQuantumExchange.Allocate__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Allocate___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Allocate__
  nameWithType: PerformQuantumExchange.Allocate__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__
  nameWithType: PerformQuantumExchange.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GenerateRandomInt__
  nameWithType: PerformQuantumExchange.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__
  name: GetMeasurementAngle__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_GetMeasurementAngle__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__
  nameWithType: PerformQuantumExchange.GetMeasurementAngle__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__*
  name: GetMeasurementAngle__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_GetMeasurementAngle___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.GetMeasurementAngle__
  nameWithType: PerformQuantumExchange.GetMeasurementAngle__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In
  name: PerformQuantumExchange.In
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformQuantumExchange.In
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In
  nameWithType: PerformQuantumExchange.In
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name: In((long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_In__ctor_System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name.vb: New((Long, Long))
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.In((long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.New((Long, Long))
  nameWithType: PerformQuantumExchange.In.In((long, long))
  nameWithType.vb: PerformQuantumExchange.In.New((Long, Long))
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.New
  nameWithType: PerformQuantumExchange.In.In
  nameWithType.vb: PerformQuantumExchange.In.New
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__
  name: MeasureInBasis__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_MeasureInBasis__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__
  nameWithType: PerformQuantumExchange.MeasureInBasis__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__*
  name: MeasureInBasis__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_MeasureInBasis___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.MeasureInBasis__
  nameWithType: PerformQuantumExchange.MeasureInBasis__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Microsoft__Quantum__Intrinsic__CNOT
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT*
  name: Microsoft__Quantum__Intrinsic__CNOT
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Microsoft__Quantum__Intrinsic__CNOT_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
  nameWithType: PerformQuantumExchange.Microsoft__Quantum__Intrinsic__CNOT
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
  nameWithType: PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
  nameWithType: PerformQuantumExchange.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out
  name: PerformQuantumExchange.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out
  nameWithType: PerformQuantumExchange.Out
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: Out((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Out__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.Out((Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: PerformQuantumExchange.Out.Out((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: PerformQuantumExchange.Out.New((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.New
  nameWithType: PerformQuantumExchange.Out.Out
  nameWithType.vb: PerformQuantumExchange.Out.New
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Release__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__
  nameWithType: PerformQuantumExchange.Release__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Release___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Release__
  nameWithType: PerformQuantumExchange.Release__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name: Run(IOperationFactory, long, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name.vb: Run(IOperationFactory, Long, Long)
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, long)
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Long)
  nameWithType: PerformQuantumExchange.Run(IOperationFactory, long, long)
  nameWithType.vb: PerformQuantumExchange.Run(IOperationFactory, Long, Long)
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.Run
  nameWithType: PerformQuantumExchange.Run
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___Body__
  commentId: P:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__
  nameWithType: PerformQuantumExchange.__Body__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Body__
  nameWithType: PerformQuantumExchange.__Body__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name: __DataIn__((long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___DataIn___System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name.vb: __DataIn__((Long, Long))
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__((long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__((Long, Long))
  nameWithType: PerformQuantumExchange.__DataIn__((long, long))
  nameWithType.vb: PerformQuantumExchange.__DataIn__((Long, Long))
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataIn__
  nameWithType: PerformQuantumExchange.__DataIn__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___DataOut___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Int64__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Int64},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataOut__((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<long>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__((Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Long), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: PerformQuantumExchange.__DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: PerformQuantumExchange.__DataOut__((IQArray(Of Long), IQArray(Of Long), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__DataOut__
  nameWithType: PerformQuantumExchange.__DataOut__
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___Init__
  commentId: M:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__()
  nameWithType: PerformQuantumExchange.__Init__()
- uid: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html#EasyQ_Quantum_Cryptography_PerformQuantumExchange___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.PerformQuantumExchange.__Init__
  nameWithType: PerformQuantumExchange.__Init__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle
  name: QuantumRandomOracle
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html
  commentId: T:EasyQ.Quantum.Cryptography.QuantumRandomOracle
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle
  nameWithType: QuantumRandomOracle
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: QuantumRandomOracle(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.QuantumRandomOracle(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: QuantumRandomOracle.QuantumRandomOracle(IOperationFactory)
  nameWithType.vb: QuantumRandomOracle.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.#ctor*
  name: QuantumRandomOracle
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.QuantumRandomOracle
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.New
  nameWithType: QuantumRandomOracle.QuantumRandomOracle
  nameWithType.vb: QuantumRandomOracle.New
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Allocate__
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__
  nameWithType: QuantumRandomOracle.Allocate__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Allocate___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Allocate__
  nameWithType: QuantumRandomOracle.Allocate__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In
  name: QuantumRandomOracle.In
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.html
  commentId: T:EasyQ.Quantum.Cryptography.QuantumRandomOracle.In
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In
  nameWithType: QuantumRandomOracle.In
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64})
  name: In((IQArray<bool>, long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64})
  name.vb: New((IQArray(Of Boolean), Long, Long))
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long))
  nameWithType: QuantumRandomOracle.In.In((IQArray<bool>, long, long))
  nameWithType.vb: QuantumRandomOracle.In.New((IQArray(Of Boolean), Long, Long))
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.New
  nameWithType: QuantumRandomOracle.In.In
  nameWithType.vb: QuantumRandomOracle.In.New
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Convert__BoolArrayAsInt
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt*
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Convert__BoolArrayAsInt_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__M
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M*
  name: Microsoft__Quantum__Intrinsic__M
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__M_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__M
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__Z
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z*
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Microsoft__Quantum__Intrinsic__Z_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
  nameWithType: QuantumRandomOracle.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Release__
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__
  nameWithType: QuantumRandomOracle.Release__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Release___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Release__
  nameWithType: QuantumRandomOracle.Release__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Reset__
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__
  nameWithType: QuantumRandomOracle.Reset__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__*
  name: Reset__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Reset___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Reset__
  nameWithType: QuantumRandomOracle.Reset__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64)
  name: Run(IOperationFactory, IQArray<bool>, long, long)
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64_
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64)
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), Long, Long)
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long)
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long)
  nameWithType: QuantumRandomOracle.Run(IOperationFactory, IQArray<bool>, long, long)
  nameWithType.vb: QuantumRandomOracle.Run(IOperationFactory, IQArray(Of Boolean), Long, Long)
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.Run
  nameWithType: QuantumRandomOracle.Run
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___Body__
  commentId: P:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__
  nameWithType: QuantumRandomOracle.__Body__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Body__
  nameWithType: QuantumRandomOracle.__Body__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64})
  name: __DataIn__((IQArray<bool>, long, long))
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},System.Int64,System.Int64})
  name.vb: __DataIn__((IQArray(Of Boolean), Long, Long))
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, long, long))
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Long, Long))
  nameWithType: QuantumRandomOracle.__DataIn__((IQArray<bool>, long, long))
  nameWithType.vb: QuantumRandomOracle.__DataIn__((IQArray(Of Boolean), Long, Long))
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataIn__
  nameWithType: QuantumRandomOracle.__DataIn__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: __DataOut__(IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___DataOut___Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: __DataOut__(IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__(Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: QuantumRandomOracle.__DataOut__(IQArray<bool>)
  nameWithType.vb: QuantumRandomOracle.__DataOut__(IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__DataOut__
  nameWithType: QuantumRandomOracle.__DataOut__
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___Init__
  commentId: M:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__()
  nameWithType: QuantumRandomOracle.__Init__()
- uid: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html#EasyQ_Quantum_Cryptography_QuantumRandomOracle___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.QuantumRandomOracle.__Init__
  nameWithType: QuantumRandomOracle.__Init__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication
  name: VerifyAuthentication
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html
  commentId: T:EasyQ.Quantum.Cryptography.VerifyAuthentication
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication
  nameWithType: VerifyAuthentication
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: VerifyAuthentication(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.VerifyAuthentication(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: VerifyAuthentication.VerifyAuthentication(IOperationFactory)
  nameWithType.vb: VerifyAuthentication.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.#ctor*
  name: VerifyAuthentication
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.VerifyAuthentication
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.New
  nameWithType: VerifyAuthentication.VerifyAuthentication
  nameWithType.vb: VerifyAuthentication.New
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__
  name: GenerateAuthenticationCode__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_GenerateAuthenticationCode__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__
  nameWithType: VerifyAuthentication.GenerateAuthenticationCode__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__*
  name: GenerateAuthenticationCode__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_GenerateAuthenticationCode___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.GenerateAuthenticationCode__
  nameWithType: VerifyAuthentication.GenerateAuthenticationCode__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.In
  name: VerifyAuthentication.In
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.In.html
  commentId: T:EasyQ.Quantum.Cryptography.VerifyAuthentication.In
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.In
  nameWithType: VerifyAuthentication.In
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((IQArray<bool>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.In.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.In((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: VerifyAuthentication.In.In((IQArray<bool>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: VerifyAuthentication.In.New((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.In.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.In.New
  nameWithType: VerifyAuthentication.In.In
  nameWithType.vb: VerifyAuthentication.In.New
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Length__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__
  nameWithType: VerifyAuthentication.Length__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Length__
  nameWithType: VerifyAuthentication.Length__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Microsoft__Quantum__Math__Min
  commentId: P:EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min
  nameWithType: VerifyAuthentication.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min*
  name: Microsoft__Quantum__Math__Min
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Microsoft__Quantum__Math__Min_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Microsoft__Quantum__Math__Min
  nameWithType: VerifyAuthentication.Microsoft__Quantum__Math__Min
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, IQArray<bool>, IQArray<bool>, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: VerifyAuthentication.Run(IOperationFactory, IQArray<bool>, IQArray<bool>, IQArray<bool>)
  nameWithType.vb: VerifyAuthentication.Run(IOperationFactory, IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean))
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.Run
  nameWithType: VerifyAuthentication.Run
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___Body__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__
  nameWithType: VerifyAuthentication.__Body__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Body__
  nameWithType: VerifyAuthentication.__Body__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: VerifyAuthentication.__DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>))
  nameWithType.vb: VerifyAuthentication.__DataIn__((IQArray(Of Boolean), IQArray(Of Boolean), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataIn__
  nameWithType: VerifyAuthentication.__DataIn__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__(System.Boolean)
  name: __DataOut__(bool)
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___DataOut___System_Boolean_
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__(System.Boolean)
  name.vb: __DataOut__(Boolean)
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__(bool)
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__(Boolean)
  nameWithType: VerifyAuthentication.__DataOut__(bool)
  nameWithType.vb: VerifyAuthentication.__DataOut__(Boolean)
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__DataOut__
  nameWithType: VerifyAuthentication.__DataOut__
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___Init__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__()
  nameWithType: VerifyAuthentication.__Init__()
- uid: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html#EasyQ_Quantum_Cryptography_VerifyAuthentication___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyAuthentication.__Init__
  nameWithType: VerifyAuthentication.__Init__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity
  name: VerifyChannelSecurity
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html
  commentId: T:EasyQ.Quantum.Cryptography.VerifyChannelSecurity
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity
  nameWithType: VerifyChannelSecurity
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: VerifyChannelSecurity(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.VerifyChannelSecurity(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: VerifyChannelSecurity.VerifyChannelSecurity(IOperationFactory)
  nameWithType.vb: VerifyChannelSecurity.New(IOperationFactory)
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.#ctor*
  name: VerifyChannelSecurity
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.VerifyChannelSecurity
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.New
  nameWithType: VerifyChannelSecurity.VerifyChannelSecurity
  nameWithType.vb: VerifyChannelSecurity.New
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_GenerateRandomInt__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__
  nameWithType: VerifyChannelSecurity.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__*
  name: GenerateRandomInt__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_GenerateRandomInt___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.GenerateRandomInt__
  nameWithType: VerifyChannelSecurity.GenerateRandomInt__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In
  name: VerifyChannelSecurity.In
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.html
  commentId: T:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In
  nameWithType: VerifyChannelSecurity.In
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double})
  name: In((IQArray<(long, long, bool, bool)>, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_ValueTuple_System_Int64_System_Int64_System_Boolean_System_Boolean___System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double})
  name.vb: New((IQArray(Of (Long, Long, Boolean, Boolean)), Double))
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.In((Microsoft.Quantum.Simulation.Core.IQArray<(long, long, bool, bool)>, double))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of (Long, Long, Boolean, Boolean)), Double))
  nameWithType: VerifyChannelSecurity.In.In((IQArray<(long, long, bool, bool)>, double))
  nameWithType.vb: VerifyChannelSecurity.In.New((IQArray(Of (Long, Long, Boolean, Boolean)), Double))
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_In__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.In
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.New
  nameWithType: VerifyChannelSecurity.In.In
  nameWithType.vb: VerifyChannelSecurity.In.New
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Length__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__
  nameWithType: VerifyChannelSecurity.Length__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Length___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Length__
  nameWithType: VerifyChannelSecurity.Length__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Microsoft__Quantum__Convert__IntAsDouble
  commentId: P:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble*
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Microsoft__Quantum__Convert__IntAsDouble_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: VerifyChannelSecurity.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out
  name: VerifyChannelSecurity.Out
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.html
  commentId: T:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out
  nameWithType: VerifyChannelSecurity.Out
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.#ctor(System.ValueTuple{System.Boolean,System.Double})
  name: Out((bool, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Out__ctor_System_ValueTuple_System_Boolean_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.#ctor(System.ValueTuple{System.Boolean,System.Double})
  name.vb: New((Boolean, Double))
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.Out((bool, double))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.New((Boolean, Double))
  nameWithType: VerifyChannelSecurity.Out.Out((bool, double))
  nameWithType.vb: VerifyChannelSecurity.Out.New((Boolean, Double))
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.#ctor*
  name: Out
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Out__ctor_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.Out
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.New
  nameWithType: VerifyChannelSecurity.Out.Out
  nameWithType.vb: VerifyChannelSecurity.Out.New
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double)
  name: Run(IOperationFactory, IQArray<(long, long, bool, bool)>, double)
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_System_ValueTuple_System_Int64_System_Int64_System_Boolean_System_Boolean___System_Double_
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double)
  name.vb: Run(IOperationFactory, IQArray(Of (Long, Long, Boolean, Boolean)), Double)
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<(long, long, bool, bool)>, double)
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of (Long, Long, Boolean, Boolean)), Double)
  nameWithType: VerifyChannelSecurity.Run(IOperationFactory, IQArray<(long, long, bool, bool)>, double)
  nameWithType.vb: VerifyChannelSecurity.Run(IOperationFactory, IQArray(Of (Long, Long, Boolean, Boolean)), Double)
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity_Run_
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Run
  nameWithType: VerifyChannelSecurity.Run
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___Body__
  commentId: P:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__
  nameWithType: VerifyChannelSecurity.__Body__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___Body___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Body__
  nameWithType: VerifyChannelSecurity.__Body__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double})
  name: __DataIn__((IQArray<(long, long, bool, bool)>, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_System_ValueTuple_System_Int64_System_Int64_System_Boolean_System_Boolean___System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{System.ValueTuple{System.Int64,System.Int64,System.Boolean,System.Boolean}},System.Double})
  name.vb: __DataIn__((IQArray(Of (Long, Long, Boolean, Boolean)), Double))
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<(long, long, bool, bool)>, double))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of (Long, Long, Boolean, Boolean)), Double))
  nameWithType: VerifyChannelSecurity.__DataIn__((IQArray<(long, long, bool, bool)>, double))
  nameWithType.vb: VerifyChannelSecurity.__DataIn__((IQArray(Of (Long, Long, Boolean, Boolean)), Double))
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___DataIn___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataIn__
  nameWithType: VerifyChannelSecurity.__DataIn__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__(System.ValueTuple{System.Boolean,System.Double})
  name: __DataOut__((bool, double))
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___DataOut___System_ValueTuple_System_Boolean_System_Double__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__(System.ValueTuple{System.Boolean,System.Double})
  name.vb: __DataOut__((Boolean, Double))
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__((bool, double))
  fullName.vb: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__((Boolean, Double))
  nameWithType: VerifyChannelSecurity.__DataOut__((bool, double))
  nameWithType.vb: VerifyChannelSecurity.__DataOut__((Boolean, Double))
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___DataOut___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__DataOut__
  nameWithType: VerifyChannelSecurity.__DataOut__
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___Init__
  commentId: M:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__()
  nameWithType: VerifyChannelSecurity.__Init__()
- uid: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html#EasyQ_Quantum_Cryptography_VerifyChannelSecurity___Init___
  commentId: Overload:EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Cryptography.VerifyChannelSecurity.__Init__
  nameWithType: VerifyChannelSecurity.__Init__
- uid: EasyQ.Quantum.Search
  name: EasyQ.Quantum.Search
  href: api/quantum/EasyQ.Quantum.Search.html
  commentId: N:EasyQ.Quantum.Search
  fullName: EasyQ.Quantum.Search
  nameWithType: EasyQ.Quantum.Search
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator
  name: ApplyGroverDiffusionOperator
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html
  commentId: T:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator
  nameWithType: ApplyGroverDiffusionOperator
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: ApplyGroverDiffusionOperator(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.ApplyGroverDiffusionOperator(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: ApplyGroverDiffusionOperator.ApplyGroverDiffusionOperator(IOperationFactory)
  nameWithType.vb: ApplyGroverDiffusionOperator.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.#ctor*
  name: ApplyGroverDiffusionOperator
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator__ctor_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.ApplyGroverDiffusionOperator
  fullName.vb: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.New
  nameWithType: ApplyGroverDiffusionOperator.ApplyGroverDiffusionOperator
  nameWithType.vb: ApplyGroverDiffusionOperator.New
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
  name: Microsoft__Quantum__Arrays__Most
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Arrays__Most
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most*
  name: Microsoft__Quantum__Arrays__Most
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Arrays__Most_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Most
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
  name: Microsoft__Quantum__Arrays__Tail
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Arrays__Tail
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail*
  name: Microsoft__Quantum__Arrays__Tail
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Arrays__Tail_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Arrays__Tail
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
  name: Microsoft__Quantum__Canon__ApplyToEachA
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Canon__ApplyToEachA
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA*
  name: Microsoft__Quantum__Canon__ApplyToEachA
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Canon__ApplyToEachA_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Canon__ApplyToEachA
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__X
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X*
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__X_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__Z
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z*
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Microsoft__Quantum__Intrinsic__Z_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
  nameWithType: ApplyGroverDiffusionOperator.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name: Run(IOperationFactory, IQArray<Qubit>)
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name.vb: Run(IOperationFactory, IQArray(Of Qubit))
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>)
  fullName.vb: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: ApplyGroverDiffusionOperator.Run(IOperationFactory, IQArray<Qubit>)
  nameWithType.vb: ApplyGroverDiffusionOperator.Run(IOperationFactory, IQArray(Of Qubit))
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator_Run_
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.Run
  nameWithType: ApplyGroverDiffusionOperator.Run
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___AdjointBody__
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__
  nameWithType: ApplyGroverDiffusionOperator.__AdjointBody__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__*
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___AdjointBody___
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__AdjointBody__
  nameWithType: ApplyGroverDiffusionOperator.__AdjointBody__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___Body__
  commentId: P:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__
  nameWithType: ApplyGroverDiffusionOperator.__Body__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___Body___
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Body__
  nameWithType: ApplyGroverDiffusionOperator.__Body__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name: __DataIn__(IQArray<Qubit>)
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___DataIn___Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name.vb: __DataIn__(IQArray(Of Qubit))
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>)
  fullName.vb: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: ApplyGroverDiffusionOperator.__DataIn__(IQArray<Qubit>)
  nameWithType.vb: ApplyGroverDiffusionOperator.__DataIn__(IQArray(Of Qubit))
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataIn__
  nameWithType: ApplyGroverDiffusionOperator.__DataIn__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  name: __DataOut__(QVoid)
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___DataOut___Microsoft_Quantum_Simulation_Core_QVoid_
  commentId: M:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  nameWithType: ApplyGroverDiffusionOperator.__DataOut__(QVoid)
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__DataOut__
  nameWithType: ApplyGroverDiffusionOperator.__DataOut__
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___Init__
  commentId: M:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__()
  nameWithType: ApplyGroverDiffusionOperator.__Init__()
- uid: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html#EasyQ_Quantum_Search_ApplyGroverDiffusionOperator___Init___
  commentId: Overload:EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.__Init__
  nameWithType: ApplyGroverDiffusionOperator.__Init__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget
  name: ApplyPauliFlipToMatchTarget
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html
  commentId: T:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget
  nameWithType: ApplyPauliFlipToMatchTarget
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: ApplyPauliFlipToMatchTarget(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.ApplyPauliFlipToMatchTarget(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: ApplyPauliFlipToMatchTarget.ApplyPauliFlipToMatchTarget(IOperationFactory)
  nameWithType.vb: ApplyPauliFlipToMatchTarget.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.#ctor*
  name: ApplyPauliFlipToMatchTarget
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget__ctor_
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.ApplyPauliFlipToMatchTarget
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.New
  nameWithType: ApplyPauliFlipToMatchTarget.ApplyPauliFlipToMatchTarget
  nameWithType.vb: ApplyPauliFlipToMatchTarget.New
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In
  name: ApplyPauliFlipToMatchTarget.In
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.html
  commentId: T:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In
  nameWithType: ApplyPauliFlipToMatchTarget.In
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: In((IQArray<Qubit>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: New((IQArray(Of Qubit), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.In((Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: ApplyPauliFlipToMatchTarget.In.In((IQArray<Qubit>, IQArray<bool>))
  nameWithType.vb: ApplyPauliFlipToMatchTarget.In.New((IQArray(Of Qubit), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_In__ctor_
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.In
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.New
  nameWithType: ApplyPauliFlipToMatchTarget.In.In
  nameWithType.vb: ApplyPauliFlipToMatchTarget.In.New
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Length__
  commentId: P:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__
  nameWithType: ApplyPauliFlipToMatchTarget.Length__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Length___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Length__
  nameWithType: ApplyPauliFlipToMatchTarget.Length__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Microsoft__Quantum__Intrinsic__X
  commentId: P:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
  nameWithType: ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X*
  name: Microsoft__Quantum__Intrinsic__X
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Microsoft__Quantum__Intrinsic__X_
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
  nameWithType: ApplyPauliFlipToMatchTarget.Microsoft__Quantum__Intrinsic__X
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__
  name: RangeReverse__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_RangeReverse__
  commentId: P:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__
  nameWithType: ApplyPauliFlipToMatchTarget.RangeReverse__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__*
  name: RangeReverse__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_RangeReverse___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.RangeReverse__
  nameWithType: ApplyPauliFlipToMatchTarget.RangeReverse__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name: Run(IOperationFactory, IQArray<Qubit>, IQArray<bool>)
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean__
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean})
  name.vb: Run(IOperationFactory, IQArray(Of Qubit), IQArray(Of Boolean))
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, Microsoft.Quantum.Simulation.Core.IQArray<bool>)
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean))
  nameWithType: ApplyPauliFlipToMatchTarget.Run(IOperationFactory, IQArray<Qubit>, IQArray<bool>)
  nameWithType.vb: ApplyPauliFlipToMatchTarget.Run(IOperationFactory, IQArray(Of Qubit), IQArray(Of Boolean))
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget_Run_
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.Run
  nameWithType: ApplyPauliFlipToMatchTarget.Run
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___AdjointBody__
  commentId: P:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__
  nameWithType: ApplyPauliFlipToMatchTarget.__AdjointBody__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__*
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___AdjointBody___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__AdjointBody__
  nameWithType: ApplyPauliFlipToMatchTarget.__AdjointBody__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___Body__
  commentId: P:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__
  nameWithType: ApplyPauliFlipToMatchTarget.__Body__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___Body___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Body__
  nameWithType: ApplyPauliFlipToMatchTarget.__Body__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name: __DataIn__((IQArray<Qubit>, IQArray<bool>))
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__Microsoft_Quantum_Simulation_Core_IQArray_System_Boolean___
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},Microsoft.Quantum.Simulation.Core.IQArray{System.Boolean}})
  name.vb: __DataIn__((IQArray(Of Qubit), IQArray(Of Boolean)))
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, Microsoft.Quantum.Simulation.Core.IQArray<bool>))
  fullName.vb: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Microsoft.Quantum.Simulation.Core.IQArray(Of Boolean)))
  nameWithType: ApplyPauliFlipToMatchTarget.__DataIn__((IQArray<Qubit>, IQArray<bool>))
  nameWithType.vb: ApplyPauliFlipToMatchTarget.__DataIn__((IQArray(Of Qubit), IQArray(Of Boolean)))
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataIn__
  nameWithType: ApplyPauliFlipToMatchTarget.__DataIn__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  name: __DataOut__(QVoid)
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___DataOut___Microsoft_Quantum_Simulation_Core_QVoid_
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  nameWithType: ApplyPauliFlipToMatchTarget.__DataOut__(QVoid)
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__DataOut__
  nameWithType: ApplyPauliFlipToMatchTarget.__DataOut__
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___Init__
  commentId: M:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__()
  nameWithType: ApplyPauliFlipToMatchTarget.__Init__()
- uid: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html#EasyQ_Quantum_Search_ApplyPauliFlipToMatchTarget___Init___
  commentId: Overload:EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.__Init__
  nameWithType: ApplyPauliFlipToMatchTarget.__Init__
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations
  name: CalculateOptimalIterations
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html
  commentId: T:EasyQ.Quantum.Search.CalculateOptimalIterations
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations
  nameWithType: CalculateOptimalIterations
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: CalculateOptimalIterations(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.CalculateOptimalIterations(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: CalculateOptimalIterations.CalculateOptimalIterations(IOperationFactory)
  nameWithType.vb: CalculateOptimalIterations.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.#ctor*
  name: CalculateOptimalIterations
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations__ctor_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.CalculateOptimalIterations
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.New
  nameWithType: CalculateOptimalIterations.CalculateOptimalIterations
  nameWithType.vb: CalculateOptimalIterations.New
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.In
  name: CalculateOptimalIterations.In
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.In.html
  commentId: T:EasyQ.Quantum.Search.CalculateOptimalIterations.In
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.In
  nameWithType: CalculateOptimalIterations.In
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name: In((long, long))
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.In.html#EasyQ_Quantum_Search_CalculateOptimalIterations_In__ctor_System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name.vb: New((Long, Long))
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.In.In((long, long))
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.In.New((Long, Long))
  nameWithType: CalculateOptimalIterations.In.In((long, long))
  nameWithType.vb: CalculateOptimalIterations.In.New((Long, Long))
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.In.html#EasyQ_Quantum_Search_CalculateOptimalIterations_In__ctor_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.In.In
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.In.New
  nameWithType: CalculateOptimalIterations.In.In
  nameWithType.vb: CalculateOptimalIterations.In.New
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Convert__IntAsDouble
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble*
  name: Microsoft__Quantum__Convert__IntAsDouble
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Convert__IntAsDouble_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Convert__IntAsDouble
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
  name: Microsoft__Quantum__Math__ArcSin
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__ArcSin
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin*
  name: Microsoft__Quantum__Math__ArcSin
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__ArcSin_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__ArcSin
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Max
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max*
  name: Microsoft__Quantum__Math__Max
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Max_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Max
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Max
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI
  name: Microsoft__Quantum__Math__PI
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__PI
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__PI
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI*
  name: Microsoft__Quantum__Math__PI
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__PI_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__PI
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__PI
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round
  name: Microsoft__Quantum__Math__Round
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Round
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Round
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round*
  name: Microsoft__Quantum__Math__Round
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Round_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Round
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Round
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
  name: Microsoft__Quantum__Math__Sqrt
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Sqrt
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt*
  name: Microsoft__Quantum__Math__Sqrt
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Microsoft__Quantum__Math__Sqrt_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
  nameWithType: CalculateOptimalIterations.Microsoft__Quantum__Math__Sqrt
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name: Run(IOperationFactory, long, long)
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_System_Int64_
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name.vb: Run(IOperationFactory, Long, Long)
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, long)
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Long)
  nameWithType: CalculateOptimalIterations.Run(IOperationFactory, long, long)
  nameWithType.vb: CalculateOptimalIterations.Run(IOperationFactory, Long, Long)
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations_Run_
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.Run
  nameWithType: CalculateOptimalIterations.Run
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___Body__
  commentId: P:EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__
  nameWithType: CalculateOptimalIterations.__Body__
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___Body___
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__Body__
  nameWithType: CalculateOptimalIterations.__Body__
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name: __DataIn__((long, long))
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___DataIn___System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name.vb: __DataIn__((Long, Long))
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__((long, long))
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__((Long, Long))
  nameWithType: CalculateOptimalIterations.__DataIn__((long, long))
  nameWithType.vb: CalculateOptimalIterations.__DataIn__((Long, Long))
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataIn__
  nameWithType: CalculateOptimalIterations.__DataIn__
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__(System.Int64)
  name: __DataOut__(long)
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___DataOut___System_Int64_
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__(System.Int64)
  name.vb: __DataOut__(Long)
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__(long)
  fullName.vb: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__(Long)
  nameWithType: CalculateOptimalIterations.__DataOut__(long)
  nameWithType.vb: CalculateOptimalIterations.__DataOut__(Long)
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__DataOut__
  nameWithType: CalculateOptimalIterations.__DataOut__
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___Init__
  commentId: M:EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__()
  nameWithType: CalculateOptimalIterations.__Init__()
- uid: EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html#EasyQ_Quantum_Search_CalculateOptimalIterations___Init___
  commentId: Overload:EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CalculateOptimalIterations.__Init__
  nameWithType: CalculateOptimalIterations.__Init__
- uid: EasyQ.Quantum.Search.CreateOracleForItem
  name: CreateOracleForItem
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html
  commentId: T:EasyQ.Quantum.Search.CreateOracleForItem
  fullName: EasyQ.Quantum.Search.CreateOracleForItem
  nameWithType: CreateOracleForItem
- uid: EasyQ.Quantum.Search.CreateOracleForItem.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: CreateOracleForItem(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.CreateOracleForItem(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: CreateOracleForItem.CreateOracleForItem(IOperationFactory)
  nameWithType.vb: CreateOracleForItem.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.CreateOracleForItem.#ctor*
  name: CreateOracleForItem
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem__ctor_
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.CreateOracleForItem
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.New
  nameWithType: CreateOracleForItem.CreateOracleForItem
  nameWithType.vb: CreateOracleForItem.New
- uid: EasyQ.Quantum.Search.CreateOracleForItem.In
  name: CreateOracleForItem.In
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.In.html
  commentId: T:EasyQ.Quantum.Search.CreateOracleForItem.In
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.In
  nameWithType: CreateOracleForItem.In
- uid: EasyQ.Quantum.Search.CreateOracleForItem.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name: In((long, long))
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.In.html#EasyQ_Quantum_Search_CreateOracleForItem_In__ctor_System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.In.#ctor(System.ValueTuple{System.Int64,System.Int64})
  name.vb: New((Long, Long))
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.In.In((long, long))
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.In.New((Long, Long))
  nameWithType: CreateOracleForItem.In.In((long, long))
  nameWithType.vb: CreateOracleForItem.In.New((Long, Long))
- uid: EasyQ.Quantum.Search.CreateOracleForItem.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.In.html#EasyQ_Quantum_Search_CreateOracleForItem_In__ctor_
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.In.In
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.In.New
  nameWithType: CreateOracleForItem.In.In
  nameWithType.vb: CreateOracleForItem.In.New
- uid: EasyQ.Quantum.Search.CreateOracleForItem.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name: Run(IOperationFactory, long, long)
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_System_Int64_
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,System.Int64)
  name.vb: Run(IOperationFactory, Long, Long)
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, long)
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Long)
  nameWithType: CreateOracleForItem.Run(IOperationFactory, long, long)
  nameWithType.vb: CreateOracleForItem.Run(IOperationFactory, Long, Long)
- uid: EasyQ.Quantum.Search.CreateOracleForItem.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem_Run_
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.Run
  nameWithType: CreateOracleForItem.Run
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___Body__
  commentId: P:EasyQ.Quantum.Search.CreateOracleForItem.__Body__
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__Body__
  nameWithType: CreateOracleForItem.__Body__
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___Body___
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__Body__
  nameWithType: CreateOracleForItem.__Body__
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name: __DataIn__((long, long))
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___DataIn___System_ValueTuple_System_Int64_System_Int64__
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__(System.ValueTuple{System.Int64,System.Int64})
  name.vb: __DataIn__((Long, Long))
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__((long, long))
  fullName.vb: EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__((Long, Long))
  nameWithType: CreateOracleForItem.__DataIn__((long, long))
  nameWithType.vb: CreateOracleForItem.__DataIn__((Long, Long))
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__DataIn__
  nameWithType: CreateOracleForItem.__DataIn__
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__(Microsoft.Quantum.Simulation.Core.IAdjointable)
  name: __DataOut__(IAdjointable)
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___DataOut___Microsoft_Quantum_Simulation_Core_IAdjointable_
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__(Microsoft.Quantum.Simulation.Core.IAdjointable)
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__(Microsoft.Quantum.Simulation.Core.IAdjointable)
  nameWithType: CreateOracleForItem.__DataOut__(IAdjointable)
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__DataOut__
  nameWithType: CreateOracleForItem.__DataOut__
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___Init__
  commentId: M:EasyQ.Quantum.Search.CreateOracleForItem.__Init__
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__Init__()
  nameWithType: CreateOracleForItem.__Init__()
- uid: EasyQ.Quantum.Search.CreateOracleForItem.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html#EasyQ_Quantum_Search_CreateOracleForItem___Init___
  commentId: Overload:EasyQ.Quantum.Search.CreateOracleForItem.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.CreateOracleForItem.__Init__
  nameWithType: CreateOracleForItem.__Init__
- uid: EasyQ.Quantum.Search.GroverSearch
  name: GroverSearch
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html
  commentId: T:EasyQ.Quantum.Search.GroverSearch
  fullName: EasyQ.Quantum.Search.GroverSearch
  nameWithType: GroverSearch
- uid: EasyQ.Quantum.Search.GroverSearch.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: GroverSearch(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.GroverSearch.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.GroverSearch.GroverSearch(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: GroverSearch.GroverSearch(IOperationFactory)
  nameWithType.vb: GroverSearch.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.GroverSearch.#ctor*
  name: GroverSearch
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch__ctor_
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.GroverSearch.GroverSearch
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.New
  nameWithType: GroverSearch.GroverSearch
  nameWithType.vb: GroverSearch.New
- uid: EasyQ.Quantum.Search.GroverSearch.Allocate__
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Allocate__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.Allocate__
  fullName: EasyQ.Quantum.Search.GroverSearch.Allocate__
  nameWithType: GroverSearch.Allocate__
- uid: EasyQ.Quantum.Search.GroverSearch.Allocate__*
  name: Allocate__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Allocate___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.Allocate__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.Allocate__
  nameWithType: GroverSearch.Allocate__
- uid: EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__
  name: ApplyGroverDiffusionOperator__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_ApplyGroverDiffusionOperator__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__
  fullName: EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__
  nameWithType: GroverSearch.ApplyGroverDiffusionOperator__
- uid: EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__*
  name: ApplyGroverDiffusionOperator__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_ApplyGroverDiffusionOperator___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.ApplyGroverDiffusionOperator__
  nameWithType: GroverSearch.ApplyGroverDiffusionOperator__
- uid: EasyQ.Quantum.Search.GroverSearch.In
  name: GroverSearch.In
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.In.html
  commentId: T:EasyQ.Quantum.Search.GroverSearch.In
  fullName: EasyQ.Quantum.Search.GroverSearch.In
  nameWithType: GroverSearch.In
- uid: EasyQ.Quantum.Search.GroverSearch.In.#ctor(System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64})
  name: In((long, IAdjointable, long))
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.In.html#EasyQ_Quantum_Search_GroverSearch_In__ctor_System_ValueTuple_System_Int64_Microsoft_Quantum_Simulation_Core_IAdjointable_System_Int64__
  commentId: M:EasyQ.Quantum.Search.GroverSearch.In.#ctor(System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64})
  name.vb: New((Long, IAdjointable, Long))
  fullName: EasyQ.Quantum.Search.GroverSearch.In.In((long, Microsoft.Quantum.Simulation.Core.IAdjointable, long))
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.In.New((Long, Microsoft.Quantum.Simulation.Core.IAdjointable, Long))
  nameWithType: GroverSearch.In.In((long, IAdjointable, long))
  nameWithType.vb: GroverSearch.In.New((Long, IAdjointable, Long))
- uid: EasyQ.Quantum.Search.GroverSearch.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.In.html#EasyQ_Quantum_Search_GroverSearch_In__ctor_
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.GroverSearch.In.In
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.In.New
  nameWithType: GroverSearch.In.In
  nameWithType.vb: GroverSearch.In.New
- uid: EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__
  name: MeasureAllQubits__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_MeasureAllQubits__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__
  fullName: EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__
  nameWithType: GroverSearch.MeasureAllQubits__
- uid: EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__*
  name: MeasureAllQubits__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_MeasureAllQubits___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.MeasureAllQubits__
  nameWithType: GroverSearch.MeasureAllQubits__
- uid: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
  name: Microsoft__Quantum__Canon__ApplyToEachA
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Microsoft__Quantum__Canon__ApplyToEachA
  commentId: P:EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
  fullName: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
  nameWithType: GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
- uid: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA*
  name: Microsoft__Quantum__Canon__ApplyToEachA
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Microsoft__Quantum__Canon__ApplyToEachA_
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
  nameWithType: GroverSearch.Microsoft__Quantum__Canon__ApplyToEachA
- uid: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Microsoft__Quantum__Intrinsic__H
  commentId: P:EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H
  fullName: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H
  nameWithType: GroverSearch.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H*
  name: Microsoft__Quantum__Intrinsic__H
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Microsoft__Quantum__Intrinsic__H_
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.Microsoft__Quantum__Intrinsic__H
  nameWithType: GroverSearch.Microsoft__Quantum__Intrinsic__H
- uid: EasyQ.Quantum.Search.GroverSearch.Release__
  name: Release__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Release__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.Release__
  fullName: EasyQ.Quantum.Search.GroverSearch.Release__
  nameWithType: GroverSearch.Release__
- uid: EasyQ.Quantum.Search.GroverSearch.Release__*
  name: Release__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Release___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.Release__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.Release__
  nameWithType: GroverSearch.Release__
- uid: EasyQ.Quantum.Search.GroverSearch.ResetAll__
  name: ResetAll__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_ResetAll__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.ResetAll__
  fullName: EasyQ.Quantum.Search.GroverSearch.ResetAll__
  nameWithType: GroverSearch.ResetAll__
- uid: EasyQ.Quantum.Search.GroverSearch.ResetAll__*
  name: ResetAll__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_ResetAll___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.ResetAll__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.ResetAll__
  nameWithType: GroverSearch.ResetAll__
- uid: EasyQ.Quantum.Search.GroverSearch.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64)
  name: Run(IOperationFactory, long, IAdjointable, long)
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_System_Int64_Microsoft_Quantum_Simulation_Core_IAdjointable_System_Int64_
  commentId: M:EasyQ.Quantum.Search.GroverSearch.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64)
  name.vb: Run(IOperationFactory, Long, IAdjointable, Long)
  fullName: EasyQ.Quantum.Search.GroverSearch.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, long, Microsoft.Quantum.Simulation.Core.IAdjointable, long)
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Long, Microsoft.Quantum.Simulation.Core.IAdjointable, Long)
  nameWithType: GroverSearch.Run(IOperationFactory, long, IAdjointable, long)
  nameWithType.vb: GroverSearch.Run(IOperationFactory, Long, IAdjointable, Long)
- uid: EasyQ.Quantum.Search.GroverSearch.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch_Run_
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.Run
  nameWithType: GroverSearch.Run
- uid: EasyQ.Quantum.Search.GroverSearch.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___Body__
  commentId: P:EasyQ.Quantum.Search.GroverSearch.__Body__
  fullName: EasyQ.Quantum.Search.GroverSearch.__Body__
  nameWithType: GroverSearch.__Body__
- uid: EasyQ.Quantum.Search.GroverSearch.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___Body___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.__Body__
  nameWithType: GroverSearch.__Body__
- uid: EasyQ.Quantum.Search.GroverSearch.__DataIn__(System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64})
  name: __DataIn__((long, IAdjointable, long))
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___DataIn___System_ValueTuple_System_Int64_Microsoft_Quantum_Simulation_Core_IAdjointable_System_Int64__
  commentId: M:EasyQ.Quantum.Search.GroverSearch.__DataIn__(System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.IAdjointable,System.Int64})
  name.vb: __DataIn__((Long, IAdjointable, Long))
  fullName: EasyQ.Quantum.Search.GroverSearch.__DataIn__((long, Microsoft.Quantum.Simulation.Core.IAdjointable, long))
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.__DataIn__((Long, Microsoft.Quantum.Simulation.Core.IAdjointable, Long))
  nameWithType: GroverSearch.__DataIn__((long, IAdjointable, long))
  nameWithType.vb: GroverSearch.__DataIn__((Long, IAdjointable, Long))
- uid: EasyQ.Quantum.Search.GroverSearch.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.__DataIn__
  nameWithType: GroverSearch.__DataIn__
- uid: EasyQ.Quantum.Search.GroverSearch.__DataOut__(System.Int64)
  name: __DataOut__(long)
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___DataOut___System_Int64_
  commentId: M:EasyQ.Quantum.Search.GroverSearch.__DataOut__(System.Int64)
  name.vb: __DataOut__(Long)
  fullName: EasyQ.Quantum.Search.GroverSearch.__DataOut__(long)
  fullName.vb: EasyQ.Quantum.Search.GroverSearch.__DataOut__(Long)
  nameWithType: GroverSearch.__DataOut__(long)
  nameWithType.vb: GroverSearch.__DataOut__(Long)
- uid: EasyQ.Quantum.Search.GroverSearch.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.__DataOut__
  nameWithType: GroverSearch.__DataOut__
- uid: EasyQ.Quantum.Search.GroverSearch.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___Init__
  commentId: M:EasyQ.Quantum.Search.GroverSearch.__Init__
  fullName: EasyQ.Quantum.Search.GroverSearch.__Init__()
  nameWithType: GroverSearch.__Init__()
- uid: EasyQ.Quantum.Search.GroverSearch.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.GroverSearch.html#EasyQ_Quantum_Search_GroverSearch___Init___
  commentId: Overload:EasyQ.Quantum.Search.GroverSearch.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.GroverSearch.__Init__
  nameWithType: GroverSearch.__Init__
- uid: EasyQ.Quantum.Search.MeasureAllQubits
  name: MeasureAllQubits
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html
  commentId: T:EasyQ.Quantum.Search.MeasureAllQubits
  fullName: EasyQ.Quantum.Search.MeasureAllQubits
  nameWithType: MeasureAllQubits
- uid: EasyQ.Quantum.Search.MeasureAllQubits.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: MeasureAllQubits(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.MeasureAllQubits.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.MeasureAllQubits(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.MeasureAllQubits.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: MeasureAllQubits.MeasureAllQubits(IOperationFactory)
  nameWithType.vb: MeasureAllQubits.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.MeasureAllQubits.#ctor*
  name: MeasureAllQubits
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits__ctor_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.MeasureAllQubits
  fullName.vb: EasyQ.Quantum.Search.MeasureAllQubits.New
  nameWithType: MeasureAllQubits.MeasureAllQubits
  nameWithType.vb: MeasureAllQubits.New
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
  name: Microsoft__Quantum__Arrays__ForEach
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Arrays__ForEach
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach*
  name: Microsoft__Quantum__Arrays__ForEach
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Arrays__ForEach_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Arrays__ForEach
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
  name: Microsoft__Quantum__Arrays__Mapped
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Arrays__Mapped
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped*
  name: Microsoft__Quantum__Arrays__Mapped
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Arrays__Mapped_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Arrays__Mapped
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Convert__BoolArrayAsInt
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt*
  name: Microsoft__Quantum__Convert__BoolArrayAsInt
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Convert__BoolArrayAsInt_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Convert__BoolArrayAsInt
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
  name: Microsoft__Quantum__Convert__ResultAsBool
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Convert__ResultAsBool
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool*
  name: Microsoft__Quantum__Convert__ResultAsBool
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Convert__ResultAsBool_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Convert__ResultAsBool
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
  name: Microsoft__Quantum__Measurement__MResetZ
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Measurement__MResetZ
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ*
  name: Microsoft__Quantum__Measurement__MResetZ
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Microsoft__Quantum__Measurement__MResetZ_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
  nameWithType: MeasureAllQubits.Microsoft__Quantum__Measurement__MResetZ
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name: Run(IOperationFactory, IQArray<Qubit>)
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Search.MeasureAllQubits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name.vb: Run(IOperationFactory, IQArray(Of Qubit))
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>)
  fullName.vb: EasyQ.Quantum.Search.MeasureAllQubits.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: MeasureAllQubits.Run(IOperationFactory, IQArray<Qubit>)
  nameWithType.vb: MeasureAllQubits.Run(IOperationFactory, IQArray(Of Qubit))
- uid: EasyQ.Quantum.Search.MeasureAllQubits.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits_Run_
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.Run
  nameWithType: MeasureAllQubits.Run
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___Body__
  commentId: P:EasyQ.Quantum.Search.MeasureAllQubits.__Body__
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__Body__
  nameWithType: MeasureAllQubits.__Body__
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___Body___
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__Body__
  nameWithType: MeasureAllQubits.__Body__
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name: __DataIn__(IQArray<Qubit>)
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___DataIn___Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__
  commentId: M:EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit})
  name.vb: __DataIn__(IQArray(Of Qubit))
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>)
  fullName.vb: EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__(Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit))
  nameWithType: MeasureAllQubits.__DataIn__(IQArray<Qubit>)
  nameWithType.vb: MeasureAllQubits.__DataIn__(IQArray(Of Qubit))
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__DataIn__
  nameWithType: MeasureAllQubits.__DataIn__
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__(System.Int64)
  name: __DataOut__(long)
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___DataOut___System_Int64_
  commentId: M:EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__(System.Int64)
  name.vb: __DataOut__(Long)
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__(long)
  fullName.vb: EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__(Long)
  nameWithType: MeasureAllQubits.__DataOut__(long)
  nameWithType.vb: MeasureAllQubits.__DataOut__(Long)
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__DataOut__
  nameWithType: MeasureAllQubits.__DataOut__
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___Init__
  commentId: M:EasyQ.Quantum.Search.MeasureAllQubits.__Init__
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__Init__()
  nameWithType: MeasureAllQubits.__Init__()
- uid: EasyQ.Quantum.Search.MeasureAllQubits.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html#EasyQ_Quantum_Search_MeasureAllQubits___Init___
  commentId: Overload:EasyQ.Quantum.Search.MeasureAllQubits.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.MeasureAllQubits.__Init__
  nameWithType: MeasureAllQubits.__Init__
- uid: EasyQ.Quantum.Search.Oracle
  name: Oracle
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html
  commentId: T:EasyQ.Quantum.Search.Oracle
  fullName: EasyQ.Quantum.Search.Oracle
  nameWithType: Oracle
- uid: EasyQ.Quantum.Search.Oracle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name: Oracle(IOperationFactory)
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle__ctor_Microsoft_Quantum_Simulation_Core_IOperationFactory_
  commentId: M:EasyQ.Quantum.Search.Oracle.#ctor(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  name.vb: New(IOperationFactory)
  fullName: EasyQ.Quantum.Search.Oracle.Oracle(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  fullName.vb: EasyQ.Quantum.Search.Oracle.New(Microsoft.Quantum.Simulation.Core.IOperationFactory)
  nameWithType: Oracle.Oracle(IOperationFactory)
  nameWithType.vb: Oracle.New(IOperationFactory)
- uid: EasyQ.Quantum.Search.Oracle.#ctor*
  name: Oracle
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle__ctor_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.Oracle.Oracle
  fullName.vb: EasyQ.Quantum.Search.Oracle.New
  nameWithType: Oracle.Oracle
  nameWithType.vb: Oracle.New
- uid: EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__
  name: ApplyPauliFlipToMatchTarget__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_ApplyPauliFlipToMatchTarget__
  commentId: P:EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__
  fullName: EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__
  nameWithType: Oracle.ApplyPauliFlipToMatchTarget__
- uid: EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__*
  name: ApplyPauliFlipToMatchTarget__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_ApplyPauliFlipToMatchTarget___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.ApplyPauliFlipToMatchTarget__
  nameWithType: Oracle.ApplyPauliFlipToMatchTarget__
- uid: EasyQ.Quantum.Search.Oracle.In
  name: Oracle.In
  href: api/quantum/EasyQ.Quantum.Search.Oracle.In.html
  commentId: T:EasyQ.Quantum.Search.Oracle.In
  fullName: EasyQ.Quantum.Search.Oracle.In
  nameWithType: Oracle.In
- uid: EasyQ.Quantum.Search.Oracle.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64})
  name: In((IQArray<Qubit>, long))
  href: api/quantum/EasyQ.Quantum.Search.Oracle.In.html#EasyQ_Quantum_Search_Oracle_In__ctor_System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__System_Int64__
  commentId: M:EasyQ.Quantum.Search.Oracle.In.#ctor(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64})
  name.vb: New((IQArray(Of Qubit), Long))
  fullName: EasyQ.Quantum.Search.Oracle.In.In((Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, long))
  fullName.vb: EasyQ.Quantum.Search.Oracle.In.New((Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Long))
  nameWithType: Oracle.In.In((IQArray<Qubit>, long))
  nameWithType.vb: Oracle.In.New((IQArray(Of Qubit), Long))
- uid: EasyQ.Quantum.Search.Oracle.In.#ctor*
  name: In
  href: api/quantum/EasyQ.Quantum.Search.Oracle.In.html#EasyQ_Quantum_Search_Oracle_In__ctor_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.In.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EasyQ.Quantum.Search.Oracle.In.In
  fullName.vb: EasyQ.Quantum.Search.Oracle.In.New
  nameWithType: Oracle.In.In
  nameWithType.vb: Oracle.In.New
- uid: EasyQ.Quantum.Search.Oracle.Length__
  name: Length__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Length__
  commentId: P:EasyQ.Quantum.Search.Oracle.Length__
  fullName: EasyQ.Quantum.Search.Oracle.Length__
  nameWithType: Oracle.Length__
- uid: EasyQ.Quantum.Search.Oracle.Length__*
  name: Length__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Length___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Length__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Length__
  nameWithType: Oracle.Length__
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most
  name: Microsoft__Quantum__Arrays__Most
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Arrays__Most
  commentId: P:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most
  nameWithType: Oracle.Microsoft__Quantum__Arrays__Most
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most*
  name: Microsoft__Quantum__Arrays__Most
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Arrays__Most_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Most
  nameWithType: Oracle.Microsoft__Quantum__Arrays__Most
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail
  name: Microsoft__Quantum__Arrays__Tail
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Arrays__Tail
  commentId: P:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail
  nameWithType: Oracle.Microsoft__Quantum__Arrays__Tail
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail*
  name: Microsoft__Quantum__Arrays__Tail
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Arrays__Tail_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Arrays__Tail
  nameWithType: Oracle.Microsoft__Quantum__Arrays__Tail
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
  name: Microsoft__Quantum__Convert__IntAsBoolArray
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Convert__IntAsBoolArray
  commentId: P:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
  nameWithType: Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray*
  name: Microsoft__Quantum__Convert__IntAsBoolArray
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Convert__IntAsBoolArray_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
  nameWithType: Oracle.Microsoft__Quantum__Convert__IntAsBoolArray
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Intrinsic__Z
  commentId: P:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z
  nameWithType: Oracle.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z*
  name: Microsoft__Quantum__Intrinsic__Z
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Microsoft__Quantum__Intrinsic__Z_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Microsoft__Quantum__Intrinsic__Z
  nameWithType: Oracle.Microsoft__Quantum__Intrinsic__Z
- uid: EasyQ.Quantum.Search.Oracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64)
  name: Run(IOperationFactory, IQArray<Qubit>, long)
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Run_Microsoft_Quantum_Simulation_Core_IOperationFactory_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__System_Int64_
  commentId: M:EasyQ.Quantum.Search.Oracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory,Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64)
  name.vb: Run(IOperationFactory, IQArray(Of Qubit), Long)
  fullName: EasyQ.Quantum.Search.Oracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, long)
  fullName.vb: EasyQ.Quantum.Search.Oracle.Run(Microsoft.Quantum.Simulation.Core.IOperationFactory, Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Long)
  nameWithType: Oracle.Run(IOperationFactory, IQArray<Qubit>, long)
  nameWithType.vb: Oracle.Run(IOperationFactory, IQArray(Of Qubit), Long)
- uid: EasyQ.Quantum.Search.Oracle.Run*
  name: Run
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle_Run_
  commentId: Overload:EasyQ.Quantum.Search.Oracle.Run
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.Run
  nameWithType: Oracle.Run
- uid: EasyQ.Quantum.Search.Oracle.__AdjointBody__
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___AdjointBody__
  commentId: P:EasyQ.Quantum.Search.Oracle.__AdjointBody__
  fullName: EasyQ.Quantum.Search.Oracle.__AdjointBody__
  nameWithType: Oracle.__AdjointBody__
- uid: EasyQ.Quantum.Search.Oracle.__AdjointBody__*
  name: __AdjointBody__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___AdjointBody___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.__AdjointBody__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.__AdjointBody__
  nameWithType: Oracle.__AdjointBody__
- uid: EasyQ.Quantum.Search.Oracle.__Body__
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___Body__
  commentId: P:EasyQ.Quantum.Search.Oracle.__Body__
  fullName: EasyQ.Quantum.Search.Oracle.__Body__
  nameWithType: Oracle.__Body__
- uid: EasyQ.Quantum.Search.Oracle.__Body__*
  name: __Body__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___Body___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.__Body__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.__Body__
  nameWithType: Oracle.__Body__
- uid: EasyQ.Quantum.Search.Oracle.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64})
  name: __DataIn__((IQArray<Qubit>, long))
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___DataIn___System_ValueTuple_Microsoft_Quantum_Simulation_Core_IQArray_Microsoft_Quantum_Simulation_Core_Qubit__System_Int64__
  commentId: M:EasyQ.Quantum.Search.Oracle.__DataIn__(System.ValueTuple{Microsoft.Quantum.Simulation.Core.IQArray{Microsoft.Quantum.Simulation.Core.Qubit},System.Int64})
  name.vb: __DataIn__((IQArray(Of Qubit), Long))
  fullName: EasyQ.Quantum.Search.Oracle.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray<Microsoft.Quantum.Simulation.Core.Qubit>, long))
  fullName.vb: EasyQ.Quantum.Search.Oracle.__DataIn__((Microsoft.Quantum.Simulation.Core.IQArray(Of Microsoft.Quantum.Simulation.Core.Qubit), Long))
  nameWithType: Oracle.__DataIn__((IQArray<Qubit>, long))
  nameWithType.vb: Oracle.__DataIn__((IQArray(Of Qubit), Long))
- uid: EasyQ.Quantum.Search.Oracle.__DataIn__*
  name: __DataIn__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___DataIn___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.__DataIn__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.__DataIn__
  nameWithType: Oracle.__DataIn__
- uid: EasyQ.Quantum.Search.Oracle.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  name: __DataOut__(QVoid)
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___DataOut___Microsoft_Quantum_Simulation_Core_QVoid_
  commentId: M:EasyQ.Quantum.Search.Oracle.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  fullName: EasyQ.Quantum.Search.Oracle.__DataOut__(Microsoft.Quantum.Simulation.Core.QVoid)
  nameWithType: Oracle.__DataOut__(QVoid)
- uid: EasyQ.Quantum.Search.Oracle.__DataOut__*
  name: __DataOut__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___DataOut___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.__DataOut__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.__DataOut__
  nameWithType: Oracle.__DataOut__
- uid: EasyQ.Quantum.Search.Oracle.__Init__
  name: __Init__()
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___Init__
  commentId: M:EasyQ.Quantum.Search.Oracle.__Init__
  fullName: EasyQ.Quantum.Search.Oracle.__Init__()
  nameWithType: Oracle.__Init__()
- uid: EasyQ.Quantum.Search.Oracle.__Init__*
  name: __Init__
  href: api/quantum/EasyQ.Quantum.Search.Oracle.html#EasyQ_Quantum_Search_Oracle___Init___
  commentId: Overload:EasyQ.Quantum.Search.Oracle.__Init__
  isSpec: "True"
  fullName: EasyQ.Quantum.Search.Oracle.__Init__
  nameWithType: Oracle.__Init__
