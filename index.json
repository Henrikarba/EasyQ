{
  "api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.AuthenticationMode.html",
    "title": "Enum AuthenticationMode",
    "summary": "Enum AuthenticationMode Authentication modes for quantum key distribution. Namespace: EasyQ.Bridge.Cryptography Assembly: EasyQ.Bridge.dll Syntax public enum AuthenticationMode Fields Name Description Enhanced Enhanced authentication with additional quantum verification. None No authentication is performed. Standard Standard authentication using pre-shared secret."
  },
  "api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.KeyDistributionResult.html",
    "title": "Class KeyDistributionResult",
    "summary": "Class KeyDistributionResult Results of a quantum key distribution operation. Inheritance object KeyDistributionResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Cryptography Assembly: EasyQ.Bridge.dll Syntax public class KeyDistributionResult Properties AuthenticationTag Authentication tag for key verification. Declaration public byte[]? AuthenticationTag { get; set; } Property Value Type Description byte[] EntangledPairsCreated The number of entangled pairs created during the process. Declaration public int EntangledPairsCreated { get; set; } Property Value Type Description int ErrorRate The observed error rate between sender and receiver keys. Declaration public double ErrorRate { get; set; } Property Value Type Description double FailureReason Reason for failure (if unsuccessful). Declaration public string? FailureReason { get; set; } Property Value Type Description string Key The generated key (null if unsuccessful). Declaration public byte[]? Key { get; set; } Property Value Type Description byte[] SecurityParameter The security parameter value (CHSH inequality test result). Declaration public double SecurityParameter { get; set; } Property Value Type Description double Success Whether the key distribution was successful. Declaration public bool Success { get; set; } Property Value Type Description bool"
  },
  "api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistribution.html",
    "title": "Class QuantumKeyDistribution",
    "summary": "Class QuantumKeyDistribution Provides a simple API for quantum key distribution, hiding all quantum computing complexity. Uses the E91 protocol with entanglement-based quantum key distribution. Inheritance object QuantumKeyDistribution Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Cryptography Assembly: EasyQ.Bridge.dll Syntax public class QuantumKeyDistribution : IDisposable Constructors QuantumKeyDistribution() Initializes a new instance of the QuantumKeyDistribution class with default options. Declaration public QuantumKeyDistribution() QuantumKeyDistribution(QuantumKeyDistributionOptions) Initializes a new instance of the QuantumKeyDistribution class with specified options. Declaration public QuantumKeyDistribution(QuantumKeyDistributionOptions options) Parameters Type Name Description QuantumKeyDistributionOptions options Configuration options for quantum key distribution. Methods CalculateSecurityMargin(double) Calculates the security margin percentage based on the security parameter. Declaration public static double CalculateSecurityMargin(double securityParameter) Parameters Type Name Description double securityParameter The security parameter (CHSH value) Returns Type Description double The security margin as a percentage Dispose() Disposes the quantum simulator. Declaration public void Dispose() Dispose(bool) Disposes the quantum simulator. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Whether this is being called from Dispose or the finalizer EstimateRequiredPairs(int, int, double) Estimates the number of entangled pairs needed based on desired key length and parameters. Declaration public static int EstimateRequiredPairs(int keyLength, int securityLevel, double expectedErrorRate) Parameters Type Name Description int keyLength Desired final key length in bits int securityLevel Security level (1-5) double expectedErrorRate Expected error rate Returns Type Description int Estimated number of entangled pairs needed ~QuantumKeyDistribution() Finalizer Declaration protected ~QuantumKeyDistribution() GenerateKeyAsync() Generates a cryptographically secure key using quantum key distribution. Declaration public Task<KeyDistributionResult> GenerateKeyAsync() Returns Type Description Task<KeyDistributionResult> The result of the key distribution process. SimulateProtocolEfficiency() Simulates the protocol efficiency under various conditions. Useful for estimating performance without running the full protocol. Declaration public Dictionary<string, double> SimulateProtocolEfficiency() Returns Type Description Dictionary<string, double> Dictionary mapping condition descriptions to key yield ratios VerifyChannelSecurityAsync() Verifies the security of a quantum channel without generating a full key. Useful for checking if eavesdropping is detected. Declaration public Task<(bool isSecure, double securityParameter, double errorRate)> VerifyChannelSecurityAsync() Returns Type Description Task<(bool isSecure, double securityParameter, double errorRate)> Tuple containing: (channel is secure, security parameter, error rate) Implements IDisposable"
  },
  "api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.QuantumKeyDistributionOptions.html",
    "title": "Class QuantumKeyDistributionOptions",
    "summary": "Class QuantumKeyDistributionOptions Configuration options for quantum key distribution. Inheritance object QuantumKeyDistributionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Cryptography Assembly: EasyQ.Bridge.dll Syntax public class QuantumKeyDistributionOptions Properties AuthenticationMode Authentication mode to use for key verification. Declaration public AuthenticationMode AuthenticationMode { get; set; } Property Value Type Description AuthenticationMode EnableErrorCorrection Determines if error correction should be performed on the raw key. Declaration public bool EnableErrorCorrection { get; set; } Property Value Type Description bool EnableLogging Whether to log detailed information about the key distribution process. Declaration public bool EnableLogging { get; set; } Property Value Type Description bool KeyLength The desired length of the generated key in bits. Declaration public int KeyLength { get; set; } Property Value Type Description int MaxAcceptableErrorRate The maximum acceptable error rate before aborting key generation. Declaration public double MaxAcceptableErrorRate { get; set; } Property Value Type Description double MaxAttempts Maximum number of attempts to generate a key before giving up. Declaration public int? MaxAttempts { get; set; } Property Value Type Description int? PreSharedSecret Custom pre-shared authentication secret. If null, a random one will be generated. Declaration public byte[]? PreSharedSecret { get; set; } Property Value Type Description byte[] SecurityLevel Security level (1-5). Higher values increase security but decrease efficiency. Declaration public int SecurityLevel { get; set; } Property Value Type Description int SecurityThreshold The minimum security parameter (CHSH value) required to consider a channel secure. Classical limit is 2.0. Quantum maximum is 2√2 ≈ 2.83. Recommended values: 2.2-2.4 for standard security. Declaration public double SecurityThreshold { get; set; } Property Value Type Description double"
  },
  "api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.QuantumRng.html",
    "title": "Class QuantumRng",
    "summary": "Class QuantumRng Provides a simple API for quantum random number generation, hiding all quantum computing complexity. Uses pure quantum approaches with no classical fallbacks to generate true randomness. Inheritance object QuantumRng Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Cryptography Assembly: EasyQ.Bridge.dll Syntax public class QuantumRng : IDisposable Remarks Quantum random number generation provides true randomness based on quantum measurement, which is fundamentally different from classical pseudo-random number generators. This makes it suitable for cryptographic applications and any scenario where true unpredictability is required. Constructors QuantumRng() Initializes a new instance of the QuantumRng class. Declaration public QuantumRng() QuantumRng(bool, int) Initializes a new instance of the QuantumRng class with logging option. Declaration public QuantumRng(bool enableLogging, int maxAttempts = 3) Parameters Type Name Description bool enableLogging Whether to log operations to the console. int maxAttempts Maximum number of attempts before giving up. Methods Dispose() Disposes the quantum simulator. Declaration public void Dispose() Dispose(bool) Disposes the quantum simulator. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Whether this is being called from Dispose or the finalizer ~QuantumRng() Finalizer Declaration protected ~QuantumRng() RandomInt(int, int) Generates a true random integer between the specified minimum (inclusive) and maximum (inclusive) values using quantum measurement. Declaration public Task<int> RandomInt(int min, int max) Parameters Type Name Description int min The minimum value (inclusive). int max The maximum value (inclusive). Returns Type Description Task<int> A true random integer in the specified range. Remarks This function leverages quantum properties to generate truly random numbers, unlike classical algorithms that can only produce pseudo-random numbers. Implements IDisposable"
  },
  "api/bridge/EasyQ.Bridge.Cryptography.html": {
    "href": "api/bridge/EasyQ.Bridge.Cryptography.html",
    "title": "Namespace EasyQ.Bridge.Cryptography",
    "summary": "Namespace EasyQ.Bridge.Cryptography Classes KeyDistributionResult Results of a quantum key distribution operation. QuantumKeyDistribution Provides a simple API for quantum key distribution, hiding all quantum computing complexity. Uses the E91 protocol with entanglement-based quantum key distribution. QuantumKeyDistributionOptions Configuration options for quantum key distribution. QuantumRng Provides a simple API for quantum random number generation, hiding all quantum computing complexity. Uses pure quantum approaches with no classical fallbacks to generate true randomness. Enums AuthenticationMode Authentication modes for quantum key distribution."
  },
  "api/bridge/EasyQ.Bridge.Search.IterationStrategy.html": {
    "href": "api/bridge/EasyQ.Bridge.Search.IterationStrategy.html",
    "title": "Enum IterationStrategy",
    "summary": "Enum IterationStrategy Strategies for determining the number of Grover iterations. Namespace: EasyQ.Bridge.Search Assembly: EasyQ.Bridge.dll Syntax public enum IterationStrategy Fields Name Description Aggressive More aggressive approach (PI / (4 * angle)) Conservative Conservative approach (PI / (4 * angle) - 1) Custom Custom iteration count using CustomIterationFactor and CustomIterationOffset HalfOptimal Half the standard iterations (PI / (8 * angle)) Optimal Standard optimal iterations (PI / (4 * angle) - 0.5) SingleIteration One iteration only (useful for small search spaces)"
  },
  "api/bridge/EasyQ.Bridge.Search.QuantumSearch.html": {
    "href": "api/bridge/EasyQ.Bridge.Search.QuantumSearch.html",
    "title": "Class QuantumSearch",
    "summary": "Class QuantumSearch Provides a simple API for quantum search operations, hiding all quantum computing complexity. Uses pure quantum approaches with no classical fallbacks. Inheritance object QuantumSearch Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Search Assembly: EasyQ.Bridge.dll Syntax public class QuantumSearch : IDisposable Constructors QuantumSearch() Initializes a new instance of the QuantumSearch class with default options. Declaration public QuantumSearch() QuantumSearch(QuantumSearchOptions) Initializes a new instance of the QuantumSearch class with specified options. Declaration public QuantumSearch(QuantumSearchOptions options) Parameters Type Name Description QuantumSearchOptions options Configuration options for quantum search operations. Methods Dispose() Disposes the quantum simulator. Declaration public void Dispose() Dispose(bool) Disposes the quantum simulator. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Whether this is being called from Dispose or the finalizer ~QuantumSearch() Finalizer Declaration protected ~QuantumSearch() Search<T>(IList<T>, Func<T, bool>, QuantumSearchOptions?, int?) Searches for all items matching a predicate in a collection using quantum search. Declaration public Task<List<(T Item, int Index)>> Search<T>(IList<T> collection, Func<T, bool> predicate, QuantumSearchOptions? options = null, int? knownMatchCount = null) Parameters Type Name Description IList<T> collection The collection to search in. Func<T, bool> predicate A function that determines if an item matches the search criteria. QuantumSearchOptions options Optional search configuration options. int? knownMatchCount Optional parameter to specify the exact number of matching items. Returns Type Description Task<List<(T Item, int Index)>> A list of tuples containing all items that match the predicate and their indices. Type Parameters Name Description T The type of items in the collection. Search<T>(IList<T>, T, QuantumSearchOptions?) Searches for all items matching a specific value in a collection using quantum search. Declaration public Task<List<(T Item, int Index)>> Search<T>(IList<T> collection, T item, QuantumSearchOptions? options = null) Parameters Type Name Description IList<T> collection The collection to search in. T item The item to search for. QuantumSearchOptions options Optional search configuration options. Returns Type Description Task<List<(T Item, int Index)>> A list of tuples containing the found items and their indices. Type Parameters Name Description T The type of items in the collection. Implements IDisposable"
  },
  "api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html": {
    "href": "api/bridge/EasyQ.Bridge.Search.QuantumSearchOptions.html",
    "title": "Class QuantumSearchOptions",
    "summary": "Class QuantumSearchOptions Configuration options for quantum search operations. Inheritance object QuantumSearchOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Bridge.Search Assembly: EasyQ.Bridge.dll Syntax public class QuantumSearchOptions Properties CustomIterationFactor Factor to multiply the standard optimal iteration count by. Only used when IterationStrategy is set to Custom. Declaration public double CustomIterationFactor { get; set; } Property Value Type Description double CustomIterationOffset Offset to add to the iteration count. Only used when IterationStrategy is set to Custom. Declaration public int CustomIterationOffset { get; set; } Property Value Type Description int EnableLogging Whether to log detailed information about the quantum search process. Declaration public bool EnableLogging { get; set; } Property Value Type Description bool FullScanThreshold The maximum database size to scan completely. Only used with SamplingStrategy.Auto. Declaration public int FullScanThreshold { get; set; } Property Value Type Description int IterationStrategy The iteration strategy to use for determining the number of Grover iterations. Declaration public IterationStrategy IterationStrategy { get; set; } Property Value Type Description IterationStrategy MaxAttempts Maximum number of search attempts to try before giving up. If set to null, will continue trying until successful or resources are exhausted. Declaration public int? MaxAttempts { get; set; } Property Value Type Description int? MaxTargets Maximum number of target items to sample for the oracle. If set to null, will use all available targets. Declaration public int? MaxTargets { get; set; } Property Value Type Description int? SampleSize The number of samples to use when estimating match counts. Only used with SamplingStrategy.Sampling. Declaration public int SampleSize { get; set; } Property Value Type Description int SamplingStrategy The sampling strategy to use for estimating the number of matches. Declaration public SamplingStrategy SamplingStrategy { get; set; } Property Value Type Description SamplingStrategy"
  },
  "api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html": {
    "href": "api/bridge/EasyQ.Bridge.Search.SamplingStrategy.html",
    "title": "Enum SamplingStrategy",
    "summary": "Enum SamplingStrategy Strategies for estimating the number of matches in the database. Namespace: EasyQ.Bridge.Search Assembly: EasyQ.Bridge.dll Syntax public enum SamplingStrategy Fields Name Description AssumeOne Assume only one match exists (fastest but only appropriate when you know there's exactly one match) Auto Automatically choose between FullScan and Sampling based on database size FullScan Always scan the entire database (accurate but may be slow for large databases) Sampling Use random sampling to estimate (faster but less accurate) UserProvided Use a specific count provided by the user"
  },
  "api/bridge/EasyQ.Bridge.Search.html": {
    "href": "api/bridge/EasyQ.Bridge.Search.html",
    "title": "Namespace EasyQ.Bridge.Search",
    "summary": "Namespace EasyQ.Bridge.Search Classes QuantumSearch Provides a simple API for quantum search operations, hiding all quantum computing complexity. Uses pure quantum approaches with no classical fallbacks. QuantumSearchOptions Configuration options for quantum search operations. Enums IterationStrategy Strategies for determining the number of Grover iterations. SamplingStrategy Strategies for estimating the number of matches in the database."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "EasyQ API Documentation",
    "summary": "EasyQ API Documentation Welcome to the API documentation for EasyQ, a quantum computing framework for regular developers. Note: Normal developers only look at the Bridge Layer, as this is what you will be actually using untill I make packages for golang and python (maybe more languages in future). The Quantum layer contains the core quantum operations implemented in Q#. These components implement the actual quantum algorithms and operations that power the EasyQ framework. Namespaces Bridge Layer EasyQ.Bridge.Search - Search functionality using quantum algorithms EasyQ.Bridge.Cryptography - Cryptographic functionality using quantum properties Quantum Layer EasyQ.Quantum.Search - Quantum search algorithms EasyQ.Quantum.Cryptography - Quantum cryptography operations"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.BinaryEntropyCalc.html",
    "title": "Class BinaryEntropyCalc",
    "summary": "Class BinaryEntropyCalc Inheritance object AbstractCallable Function<double, double> BinaryEntropyCalc Implements ICallable<double, double> ICallable IApplyData Inherited Members Function<double, double>.__DataIn__(double) Function<double, double>.__DataOut__(double) Function<double, double>.Apply(double) Function<double, double>.Partial<T>(object) Function<double, double>.Partial<P>(Func<P, double>) Function<double, double>.Apply<GenO>(object) Function<double, double>.ToString() Function<double, double>.__qsharpType() Function<double, double>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 603, -1)] public class BinaryEntropyCalc : Function<double, double>, ICallable<double, double>, ICallable, IApplyData Constructors BinaryEntropyCalc(IOperationFactory) Declaration public BinaryEntropyCalc(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Math__Log Declaration protected ICallable<double, double> Microsoft__Quantum__Math__Log { get; set; } Property Value Type Description ICallable<double, double> __Body__ Declaration public override Func<double, double> __Body__ { get; } Property Value Type Description Func<double, double> Overrides Function<double, double>.__Body__ Methods Run(IOperationFactory, double) Declaration public static Task<double> Run(IOperationFactory __m__, double p) Parameters Type Name Description IOperationFactory __m__ double p Returns Type Description Task<double> __DataIn__(double) Declaration public override IApplyData __DataIn__(double data) Parameters Type Name Description double data Returns Type Description IApplyData Overrides Function<double, double>.__DataIn__(double) __DataOut__(double) Declaration public override IApplyData __DataOut__(double data) Parameters Type Name Description double data Returns Type Description IApplyData Overrides Function<double, double>.__DataOut__(double) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.In.html",
    "title": "Class CalculateErrorRate.In",
    "summary": "Class CalculateErrorRate.In Inheritance object QTuple<(IQArray<bool>, IQArray<bool>)> CalculateErrorRate.In Implements IQTuple<(IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(IQArray<bool>, IQArray<bool>)>) QTuple<(IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class CalculateErrorRate.In : QTuple<(IQArray<bool>, IQArray<bool>)>, IQTuple<(IQArray<bool>, IQArray<bool>)>, IApplyData Constructors In((IQArray<bool>, IQArray<bool>)) Declaration public In((IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.CalculateErrorRate.html",
    "title": "Class CalculateErrorRate",
    "summary": "Class CalculateErrorRate Inheritance object AbstractCallable Function<(IQArray<bool>, IQArray<bool>), double> CalculateErrorRate Implements ICallable<(IQArray<bool>, IQArray<bool>), double> ICallable IApplyData Inherited Members Function<(IQArray<bool>, IQArray<bool>), double>.__DataIn__((IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>), double>.__DataOut__(double) Function<(IQArray<bool>, IQArray<bool>), double>.Apply((IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>), double>.Partial<T>(object) Function<(IQArray<bool>, IQArray<bool>), double>.Partial<P>(Func<P, (IQArray<bool>, IQArray<bool>)>) Function<(IQArray<bool>, IQArray<bool>), double>.Apply<GenO>(object) Function<(IQArray<bool>, IQArray<bool>), double>.ToString() Function<(IQArray<bool>, IQArray<bool>), double>.__qsharpType() Function<(IQArray<bool>, IQArray<bool>), double>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 451, 489)] public class CalculateErrorRate : Function<(IQArray<bool>, IQArray<bool>), double>, ICallable<(IQArray<bool>, IQArray<bool>), double>, ICallable, IApplyData Constructors CalculateErrorRate(IOperationFactory) Declaration public CalculateErrorRate(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Convert__IntAsDouble Declaration protected ICallable<long, double> Microsoft__Quantum__Convert__IntAsDouble { get; set; } Property Value Type Description ICallable<long, double> Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(IQArray<bool>, IQArray<bool>), double> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, IQArray<bool>), double> Overrides Function<(IQArray<bool>, IQArray<bool>), double>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, IQArray<bool>) Declaration public static Task<double> Run(IOperationFactory __m__, IQArray<bool> bits1, IQArray<bool> bits2) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> bits1 IQArray<bool> bits2 Returns Type Description Task<double> __DataIn__((IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataIn__((IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>), double>.__DataIn__((IQArray<bool>, IQArray<bool>)) __DataOut__(double) Declaration public override IApplyData __DataOut__(double data) Parameters Type Name Description double data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>), double>.__DataOut__(double) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.Out.html",
    "title": "Class CreateEntangledPair.Out",
    "summary": "Class CreateEntangledPair.Out Inheritance object QTuple<(Qubit, Qubit)> CreateEntangledPair.Out Implements IQTuple<(Qubit, Qubit)> IApplyData Inherited Members QTuple<(Qubit, Qubit)>.Equals(object) QTuple<(Qubit, Qubit)>.Equals(QTuple<(Qubit, Qubit)>) QTuple<(Qubit, Qubit)>.GetHashCode() QTuple<(Qubit, Qubit)>.ToString() QTuple<(Qubit, Qubit)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class CreateEntangledPair.Out : QTuple<(Qubit, Qubit)>, IQTuple<(Qubit, Qubit)>, IApplyData Constructors Out((Qubit, Qubit)) Declaration public Out((Qubit, Qubit) data) Parameters Type Name Description (Qubit, Qubit) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.CreateEntangledPair.html",
    "title": "Class CreateEntangledPair",
    "summary": "Class CreateEntangledPair Inheritance object AbstractCallable Operation<QVoid, (Qubit, Qubit)> CreateEntangledPair Implements ICallable<QVoid, (Qubit, Qubit)> ICallable IApplyData Inherited Members Operation<QVoid, (Qubit, Qubit)>.__DataIn__(QVoid) Operation<QVoid, (Qubit, Qubit)>.__DataOut__((Qubit, Qubit)) Operation<QVoid, (Qubit, Qubit)>.GetRuntimeMetadata(IApplyData) Operation<QVoid, (Qubit, Qubit)>.Apply(QVoid) Operation<QVoid, (Qubit, Qubit)>.Partial<T>(object) Operation<QVoid, (Qubit, Qubit)>.Partial<P>(Func<P, QVoid>) Operation<QVoid, (Qubit, Qubit)>.Apply<GenO>(object) Operation<QVoid, (Qubit, Qubit)>.FindPartialType(Type, object) Operation<QVoid, (Qubit, Qubit)>.ToString() Operation<QVoid, (Qubit, Qubit)>.__qsharpType() Operation<QVoid, (Qubit, Qubit)>.__Body__ Operation<QVoid, (Qubit, Qubit)>.__AdjointBody__ Operation<QVoid, (Qubit, Qubit)>.__ControlledBody__ Operation<QVoid, (Qubit, Qubit)>.__ControlledAdjointBody__ Operation<QVoid, (Qubit, Qubit)>.Adjoint Operation<QVoid, (Qubit, Qubit)>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 25, 42)] public class CreateEntangledPair : Operation<QVoid, (Qubit, Qubit)>, ICallable<QVoid, (Qubit, Qubit)>, ICallable, IApplyData Constructors CreateEntangledPair(IOperationFactory) Declaration public CreateEntangledPair(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate Microsoft__Quantum__Intrinsic__CNOT Declaration protected IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__CNOT { get; set; } Property Value Type Description IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release __Body__ Declaration public override Func<QVoid, (Qubit, Qubit)> __Body__ { get; } Property Value Type Description Func<QVoid, (Qubit, Qubit)> Overrides Operation<QVoid, (Qubit, Qubit)>.__Body__ Methods Run(IOperationFactory) Declaration public static Task<(Qubit, Qubit)> Run(IOperationFactory __m__) Parameters Type Name Description IOperationFactory __m__ Returns Type Description Task<(Qubit, Qubit)> __DataIn__(QVoid) Declaration public override IApplyData __DataIn__(QVoid data) Parameters Type Name Description QVoid data Returns Type Description IApplyData Overrides Operation<QVoid, (Qubit, Qubit)>.__DataIn__(QVoid) __DataOut__((Qubit, Qubit)) Declaration public override IApplyData __DataOut__((Qubit, Qubit) data) Parameters Type Name Description (Qubit, Qubit) data Returns Type Description IApplyData Overrides Operation<QVoid, (Qubit, Qubit)>.__DataOut__((Qubit, Qubit)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.In.html",
    "title": "Class EnhanceKeySecurity.In",
    "summary": "Class EnhanceKeySecurity.In Inheritance object QTuple<(IQArray<bool>, long, long, double)> EnhanceKeySecurity.In Implements IQTuple<(IQArray<bool>, long, long, double)> IApplyData Inherited Members QTuple<(IQArray<bool>, long, long, double)>.Equals(object) QTuple<(IQArray<bool>, long, long, double)>.Equals(QTuple<(IQArray<bool>, long, long, double)>) QTuple<(IQArray<bool>, long, long, double)>.GetHashCode() QTuple<(IQArray<bool>, long, long, double)>.ToString() QTuple<(IQArray<bool>, long, long, double)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class EnhanceKeySecurity.In : QTuple<(IQArray<bool>, long, long, double)>, IQTuple<(IQArray<bool>, long, long, double)>, IApplyData Constructors In((IQArray<bool>, long, long, double)) Declaration public In((IQArray<bool>, long, long, double) data) Parameters Type Name Description (IQArray<bool>, long, long, double) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.EnhanceKeySecurity.html",
    "title": "Class EnhanceKeySecurity",
    "summary": "Class EnhanceKeySecurity Inheritance object AbstractCallable Operation<(IQArray<bool>, long, long, double), IQArray<bool>> EnhanceKeySecurity Implements ICallable<(IQArray<bool>, long, long, double), IQArray<bool>> ICallable IApplyData Inherited Members Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__DataIn__((IQArray<bool>, long, long, double)) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__DataOut__(IQArray<bool>) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Apply((IQArray<bool>, long, long, double)) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Partial<T>(object) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Partial<P>(Func<P, (IQArray<bool>, long, long, double)>) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Apply<GenO>(object) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.FindPartialType(Type, object) Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.ToString() Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__qsharpType() Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__Body__ Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__AdjointBody__ Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__ControlledBody__ Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__ControlledAdjointBody__ Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Adjoint Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 341, 390)] public class EnhanceKeySecurity : Operation<(IQArray<bool>, long, long, double), IQArray<bool>>, ICallable<(IQArray<bool>, long, long, double), IQArray<bool>>, ICallable, IApplyData Constructors EnhanceKeySecurity(IOperationFactory) Declaration public EnhanceKeySecurity(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Math__Max Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Max { get; set; } Property Value Type Description ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(IQArray<bool>, long, long, double), IQArray<bool>> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, long, long, double), IQArray<bool>> Overrides Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, long, long, double) Declaration public static Task<IQArray<bool>> Run(IOperationFactory __m__, IQArray<bool> rawKey, long targetLength, long leakedBits, double securityParameter) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> rawKey long targetLength long leakedBits double securityParameter Returns Type Description Task<IQArray<bool>> __DataIn__((IQArray<bool>, long, long, double)) Declaration public override IApplyData __DataIn__((IQArray<bool>, long, long, double) data) Parameters Type Name Description (IQArray<bool>, long, long, double) data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__DataIn__((IQArray<bool>, long, long, double)) __DataOut__(IQArray<bool>) Declaration public override IApplyData __DataOut__(IQArray<bool> data) Parameters Type Name Description IQArray<bool> data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, long, long, double), IQArray<bool>>.__DataOut__(IQArray<bool>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.EntanglementBasedRandomness.html",
    "title": "Class EntanglementBasedRandomness",
    "summary": "Class EntanglementBasedRandomness Inheritance object AbstractCallable Operation<long, IQArray<bool>> EntanglementBasedRandomness Implements ICallable<long, IQArray<bool>> ICallable IApplyData Inherited Members Operation<long, IQArray<bool>>.__DataIn__(long) Operation<long, IQArray<bool>>.__DataOut__(IQArray<bool>) Operation<long, IQArray<bool>>.GetRuntimeMetadata(IApplyData) Operation<long, IQArray<bool>>.Apply(long) Operation<long, IQArray<bool>>.Partial<T>(object) Operation<long, IQArray<bool>>.Partial<P>(Func<P, long>) Operation<long, IQArray<bool>>.Apply<GenO>(object) Operation<long, IQArray<bool>>.FindPartialType(Type, object) Operation<long, IQArray<bool>>.ToString() Operation<long, IQArray<bool>>.__qsharpType() Operation<long, IQArray<bool>>.__Body__ Operation<long, IQArray<bool>>.__AdjointBody__ Operation<long, IQArray<bool>>.__ControlledBody__ Operation<long, IQArray<bool>>.__ControlledAdjointBody__ Operation<long, IQArray<bool>>.Adjoint Operation<long, IQArray<bool>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 186, -1)] public class EntanglementBasedRandomness : Operation<long, IQArray<bool>>, ICallable<long, IQArray<bool>>, ICallable, IApplyData Constructors EntanglementBasedRandomness(IOperationFactory) Declaration public EntanglementBasedRandomness(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate Microsoft__Quantum__Intrinsic__CNOT Declaration protected IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__CNOT { get; set; } Property Value Type Description IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Microsoft__Quantum__Intrinsic__M Declaration protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M { get; set; } Property Value Type Description ICallable<Qubit, Result> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release Reset__ Declaration protected ICallable<Qubit, QVoid> Reset__ { get; set; } Property Value Type Description ICallable<Qubit, QVoid> __Body__ Declaration public override Func<long, IQArray<bool>> __Body__ { get; } Property Value Type Description Func<long, IQArray<bool>> Overrides Operation<long, IQArray<bool>>.__Body__ Methods Run(IOperationFactory, long) Declaration public static Task<IQArray<bool>> Run(IOperationFactory __m__, long numBits) Parameters Type Name Description IOperationFactory __m__ long numBits Returns Type Description Task<IQArray<bool>> __DataIn__(long) Declaration public override IApplyData __DataIn__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<long, IQArray<bool>>.__DataIn__(long) __DataOut__(IQArray<bool>) Declaration public override IApplyData __DataOut__(IQArray<bool> data) Parameters Type Name Description IQArray<bool> data Returns Type Description IApplyData Overrides Operation<long, IQArray<bool>>.__DataOut__(IQArray<bool>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.In.html",
    "title": "Class EstimateKeyYield.In",
    "summary": "Class EstimateKeyYield.In Inheritance object QTuple<(double, double, long)> EstimateKeyYield.In Implements IQTuple<(double, double, long)> IApplyData Inherited Members QTuple<(double, double, long)>.Equals(object) QTuple<(double, double, long)>.Equals(QTuple<(double, double, long)>) QTuple<(double, double, long)>.GetHashCode() QTuple<(double, double, long)>.ToString() QTuple<(double, double, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class EstimateKeyYield.In : QTuple<(double, double, long)>, IQTuple<(double, double, long)>, IApplyData Constructors In((double, double, long)) Declaration public In((double, double, long) data) Parameters Type Name Description (double, double, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.EstimateKeyYield.html",
    "title": "Class EstimateKeyYield",
    "summary": "Class EstimateKeyYield Inheritance object AbstractCallable Function<(double, double, long), long> EstimateKeyYield Implements ICallable<(double, double, long), long> ICallable IApplyData Inherited Members Function<(double, double, long), long>.__DataIn__((double, double, long)) Function<(double, double, long), long>.__DataOut__(long) Function<(double, double, long), long>.Apply((double, double, long)) Function<(double, double, long), long>.Partial<T>(object) Function<(double, double, long), long>.Partial<P>(Func<P, (double, double, long)>) Function<(double, double, long), long>.Apply<GenO>(object) Function<(double, double, long), long>.ToString() Function<(double, double, long), long>.__qsharpType() Function<(double, double, long), long>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 567, 603)] public class EstimateKeyYield : Function<(double, double, long), long>, ICallable<(double, double, long), long>, ICallable, IApplyData Constructors EstimateKeyYield(IOperationFactory) Declaration public EstimateKeyYield(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties BinaryEntropyCalc__ Declaration protected ICallable<double, double> BinaryEntropyCalc__ { get; set; } Property Value Type Description ICallable<double, double> Microsoft__Quantum__Convert__IntAsDouble Declaration protected ICallable<long, double> Microsoft__Quantum__Convert__IntAsDouble { get; set; } Property Value Type Description ICallable<long, double> Microsoft__Quantum__Math__Floor Declaration protected ICallable<double, long> Microsoft__Quantum__Math__Floor { get; set; } Property Value Type Description ICallable<double, long> Microsoft__Quantum__Math__Max Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Max { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(double, double, long), long> __Body__ { get; } Property Value Type Description Func<(double, double, long), long> Overrides Function<(double, double, long), long>.__Body__ Methods Run(IOperationFactory, double, double, long) Declaration public static Task<long> Run(IOperationFactory __m__, double securityParameter, double errorRate, long numRawBits) Parameters Type Name Description IOperationFactory __m__ double securityParameter double errorRate long numRawBits Returns Type Description Task<long> __DataIn__((double, double, long)) Declaration public override IApplyData __DataIn__((double, double, long) data) Parameters Type Name Description (double, double, long) data Returns Type Description IApplyData Overrides Function<(double, double, long), long>.__DataIn__((double, double, long)) __DataOut__(long) Declaration public override IApplyData __DataOut__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Function<(double, double, long), long>.__DataOut__(long) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.In.html",
    "title": "Class FilterMeasurementResults.In",
    "summary": "Class FilterMeasurementResults.In Inheritance object QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> FilterMeasurementResults.In Implements IQTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>) QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class FilterMeasurementResults.In : QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, IQTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, IApplyData Constructors In((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Declaration public In((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.Out.html",
    "title": "Class FilterMeasurementResults.Out",
    "summary": "Class FilterMeasurementResults.Out Inheritance object QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> FilterMeasurementResults.Out Implements IQTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> IApplyData Inherited Members QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Equals(object) QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Equals(QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>) QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.GetHashCode() QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.ToString() QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class FilterMeasurementResults.Out : QTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>, IQTuple<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>, IApplyData Constructors Out((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)) Declaration public Out((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.FilterMeasurementResults.html",
    "title": "Class FilterMeasurementResults",
    "summary": "Class FilterMeasurementResults Inheritance object AbstractCallable Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> FilterMeasurementResults Implements ICallable<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> ICallable IApplyData Inherited Members Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Apply((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Partial<T>(object) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Partial<P>(Func<P, (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.Apply<GenO>(object) Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.ToString() Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__qsharpType() Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 155, 208)] public class FilterMeasurementResults : Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>, ICallable<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>, ICallable, IApplyData Constructors FilterMeasurementResults(IOperationFactory) Declaration public FilterMeasurementResults(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable __Body__ Declaration public override Func<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> __Body__ { get; } Property Value Type Description Func<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> Overrides Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__Body__ Methods Run(IOperationFactory, IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) Declaration public static Task<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> Run(IOperationFactory __m__, IQArray<long> senderBases, IQArray<long> receiverBases, IQArray<bool> senderResults, IQArray<bool> receiverResults) Parameters Type Name Description IOperationFactory __m__ IQArray<long> senderBases IQArray<long> receiverBases IQArray<bool> senderResults IQArray<bool> receiverResults Returns Type Description Task<(IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> __DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__DataIn__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) __DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)) Declaration public override IApplyData __DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>) data Returns Type Description IApplyData Overrides Function<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)>.__DataOut__((IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.In.html",
    "title": "Class GenerateAuthenticationCode.In",
    "summary": "Class GenerateAuthenticationCode.In Inheritance object QTuple<(IQArray<bool>, IQArray<bool>)> GenerateAuthenticationCode.In Implements IQTuple<(IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(IQArray<bool>, IQArray<bool>)>) QTuple<(IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class GenerateAuthenticationCode.In : QTuple<(IQArray<bool>, IQArray<bool>)>, IQTuple<(IQArray<bool>, IQArray<bool>)>, IApplyData Constructors In((IQArray<bool>, IQArray<bool>)) Declaration public In((IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateAuthenticationCode.html",
    "title": "Class GenerateAuthenticationCode",
    "summary": "Class GenerateAuthenticationCode Inheritance object AbstractCallable Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>> GenerateAuthenticationCode Implements ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>> ICallable IApplyData Inherited Members Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__DataIn__((IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__DataOut__(IQArray<bool>) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.Apply((IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.Partial<T>(object) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.Partial<P>(Func<P, (IQArray<bool>, IQArray<bool>)>) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.Apply<GenO>(object) Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.ToString() Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__qsharpType() Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 390, 424)] public class GenerateAuthenticationCode : Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>, ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>>, ICallable, IApplyData Constructors GenerateAuthenticationCode(IOperationFactory) Declaration public GenerateAuthenticationCode(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(IQArray<bool>, IQArray<bool>), IQArray<bool>> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, IQArray<bool>), IQArray<bool>> Overrides Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, IQArray<bool>) Declaration public static Task<IQArray<bool>> Run(IOperationFactory __m__, IQArray<bool> key, IQArray<bool> authSecret) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> key IQArray<bool> authSecret Returns Type Description Task<IQArray<bool>> __DataIn__((IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataIn__((IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__DataIn__((IQArray<bool>, IQArray<bool>)) __DataOut__(IQArray<bool>) Declaration public override IApplyData __DataOut__(IQArray<bool> data) Parameters Type Name Description IQArray<bool> data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>), IQArray<bool>>.__DataOut__(IQArray<bool>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.In.html",
    "title": "Class GenerateQuantumSecureKey.In",
    "summary": "Class GenerateQuantumSecureKey.In Inheritance object QTuple<(long, long, double, IQArray<bool>)> GenerateQuantumSecureKey.In Implements IQTuple<(long, long, double, IQArray<bool>)> IApplyData Inherited Members QTuple<(long, long, double, IQArray<bool>)>.Equals(object) QTuple<(long, long, double, IQArray<bool>)>.Equals(QTuple<(long, long, double, IQArray<bool>)>) QTuple<(long, long, double, IQArray<bool>)>.GetHashCode() QTuple<(long, long, double, IQArray<bool>)>.ToString() QTuple<(long, long, double, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class GenerateQuantumSecureKey.In : QTuple<(long, long, double, IQArray<bool>)>, IQTuple<(long, long, double, IQArray<bool>)>, IApplyData Constructors In((long, long, double, IQArray<bool>)) Declaration public In((long, long, double, IQArray<bool>) data) Parameters Type Name Description (long, long, double, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.Out.html",
    "title": "Class GenerateQuantumSecureKey.Out",
    "summary": "Class GenerateQuantumSecureKey.Out Inheritance object QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)> GenerateQuantumSecureKey.Out Implements IQTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>) QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class GenerateQuantumSecureKey.Out : QTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>, IQTuple<(bool, double, double, IQArray<bool>, IQArray<bool>)>, IApplyData Constructors Out((bool, double, double, IQArray<bool>, IQArray<bool>)) Declaration public Out((bool, double, double, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (bool, double, double, IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateQuantumSecureKey.html",
    "title": "Class GenerateQuantumSecureKey",
    "summary": "Class GenerateQuantumSecureKey Inheritance object AbstractCallable Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)> GenerateQuantumSecureKey Implements ICallable<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)> ICallable IApplyData Inherited Members Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__DataIn__((long, long, double, IQArray<bool>)) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>)) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.GetRuntimeMetadata(IApplyData) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Apply((long, long, double, IQArray<bool>)) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Partial<T>(object) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Partial<P>(Func<P, (long, long, double, IQArray<bool>)>) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Apply<GenO>(object) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.FindPartialType(Type, object) Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.ToString() Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__qsharpType() Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__Body__ Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__AdjointBody__ Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__ControlledBody__ Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__ControlledAdjointBody__ Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Adjoint Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 489, 567)] public class GenerateQuantumSecureKey : Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>, ICallable<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>, ICallable, IApplyData Constructors GenerateQuantumSecureKey(IOperationFactory) Declaration public GenerateQuantumSecureKey(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties CalculateErrorRate__ Declaration protected ICallable<(IQArray<bool>, IQArray<bool>), double> CalculateErrorRate__ { get; set; } Property Value Type Description ICallable<(IQArray<bool>, IQArray<bool>), double> EnhanceKeySecurity__ Declaration protected ICallable<(IQArray<bool>, long, long, double), IQArray<bool>> EnhanceKeySecurity__ { get; set; } Property Value Type Description ICallable<(IQArray<bool>, long, long, double), IQArray<bool>> FilterMeasurementResults__ Declaration protected ICallable<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> FilterMeasurementResults__ { get; set; } Property Value Type Description ICallable<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>), (IQArray<bool>, IQArray<bool>, IQArray<(long, long, bool, bool)>)> GenerateAuthenticationCode__ Declaration protected ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>> GenerateAuthenticationCode__ { get; set; } Property Value Type Description ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>> GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Math__Max Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Max { get; set; } Property Value Type Description ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> PerformErrorCorrection__ Declaration protected ICallable<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> PerformErrorCorrection__ { get; set; } Property Value Type Description ICallable<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> PerformQuantumExchange__ Declaration protected ICallable<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> PerformQuantumExchange__ { get; set; } Property Value Type Description ICallable<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> VerifyChannelSecurity__ Declaration protected ICallable<(IQArray<(long, long, bool, bool)>, double), (bool, double)> VerifyChannelSecurity__ { get; set; } Property Value Type Description ICallable<(IQArray<(long, long, bool, bool)>, double), (bool, double)> __Body__ Declaration public override Func<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)> __Body__ { get; } Property Value Type Description Func<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)> Overrides Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__Body__ Methods Run(IOperationFactory, long, long, double, IQArray<bool>) Declaration public static Task<(bool, double, double, IQArray<bool>, IQArray<bool>)> Run(IOperationFactory __m__, long keyLength, long securityLevel, double securityThreshold, IQArray<bool> authSecret) Parameters Type Name Description IOperationFactory __m__ long keyLength long securityLevel double securityThreshold IQArray<bool> authSecret Returns Type Description Task<(bool, double, double, IQArray<bool>, IQArray<bool>)> __DataIn__((long, long, double, IQArray<bool>)) Declaration public override IApplyData __DataIn__((long, long, double, IQArray<bool>) data) Parameters Type Name Description (long, long, double, IQArray<bool>) data Returns Type Description IApplyData Overrides Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__DataIn__((long, long, double, IQArray<bool>)) __DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (bool, double, double, IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Operation<(long, long, double, IQArray<bool>), (bool, double, double, IQArray<bool>, IQArray<bool>)>.__DataOut__((bool, double, double, IQArray<bool>, IQArray<bool>)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBit.html",
    "title": "Class GenerateRandomBit",
    "summary": "Class GenerateRandomBit Inheritance object AbstractCallable Operation<QVoid, bool> GenerateRandomBit Implements ICallable<QVoid, bool> ICallable IApplyData Inherited Members Operation<QVoid, bool>.__DataIn__(QVoid) Operation<QVoid, bool>.__DataOut__(bool) Operation<QVoid, bool>.GetRuntimeMetadata(IApplyData) Operation<QVoid, bool>.Apply(QVoid) Operation<QVoid, bool>.Partial<T>(object) Operation<QVoid, bool>.Partial<P>(Func<P, QVoid>) Operation<QVoid, bool>.Apply<GenO>(object) Operation<QVoid, bool>.FindPartialType(Type, object) Operation<QVoid, bool>.ToString() Operation<QVoid, bool>.__qsharpType() Operation<QVoid, bool>.__Body__ Operation<QVoid, bool>.__AdjointBody__ Operation<QVoid, bool>.__ControlledBody__ Operation<QVoid, bool>.__ControlledAdjointBody__ Operation<QVoid, bool>.Adjoint Operation<QVoid, bool>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 14, 34)] public class GenerateRandomBit : Operation<QVoid, bool>, ICallable<QVoid, bool>, ICallable, IApplyData Constructors GenerateRandomBit(IOperationFactory) Declaration public GenerateRandomBit(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Microsoft__Quantum__Intrinsic__M Declaration protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M { get; set; } Property Value Type Description ICallable<Qubit, Result> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release Reset__ Declaration protected ICallable<Qubit, QVoid> Reset__ { get; set; } Property Value Type Description ICallable<Qubit, QVoid> __Body__ Declaration public override Func<QVoid, bool> __Body__ { get; } Property Value Type Description Func<QVoid, bool> Overrides Operation<QVoid, bool>.__Body__ Methods Run(IOperationFactory) Declaration public static Task<bool> Run(IOperationFactory __m__) Parameters Type Name Description IOperationFactory __m__ Returns Type Description Task<bool> __DataIn__(QVoid) Declaration public override IApplyData __DataIn__(QVoid data) Parameters Type Name Description QVoid data Returns Type Description IApplyData Overrides Operation<QVoid, bool>.__DataIn__(QVoid) __DataOut__(bool) Declaration public override IApplyData __DataOut__(bool data) Parameters Type Name Description bool data Returns Type Description IApplyData Overrides Operation<QVoid, bool>.__DataOut__(bool) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBits.html",
    "title": "Class GenerateRandomBits",
    "summary": "Class GenerateRandomBits Inheritance object AbstractCallable Operation<long, IQArray<bool>> GenerateRandomBits Implements ICallable<long, IQArray<bool>> ICallable IApplyData Inherited Members Operation<long, IQArray<bool>>.__DataIn__(long) Operation<long, IQArray<bool>>.__DataOut__(IQArray<bool>) Operation<long, IQArray<bool>>.GetRuntimeMetadata(IApplyData) Operation<long, IQArray<bool>>.Apply(long) Operation<long, IQArray<bool>>.Partial<T>(object) Operation<long, IQArray<bool>>.Partial<P>(Func<P, long>) Operation<long, IQArray<bool>>.Apply<GenO>(object) Operation<long, IQArray<bool>>.FindPartialType(Type, object) Operation<long, IQArray<bool>>.ToString() Operation<long, IQArray<bool>>.__qsharpType() Operation<long, IQArray<bool>>.__Body__ Operation<long, IQArray<bool>>.__AdjointBody__ Operation<long, IQArray<bool>>.__ControlledBody__ Operation<long, IQArray<bool>>.__ControlledAdjointBody__ Operation<long, IQArray<bool>>.Adjoint Operation<long, IQArray<bool>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 34, 53)] public class GenerateRandomBits : Operation<long, IQArray<bool>>, ICallable<long, IQArray<bool>>, ICallable, IApplyData Constructors GenerateRandomBits(IOperationFactory) Declaration public GenerateRandomBits(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomBit__ Declaration protected ICallable<QVoid, bool> GenerateRandomBit__ { get; set; } Property Value Type Description ICallable<QVoid, bool> __Body__ Declaration public override Func<long, IQArray<bool>> __Body__ { get; } Property Value Type Description Func<long, IQArray<bool>> Overrides Operation<long, IQArray<bool>>.__Body__ Methods Run(IOperationFactory, long) Declaration public static Task<IQArray<bool>> Run(IOperationFactory __m__, long length) Parameters Type Name Description IOperationFactory __m__ long length Returns Type Description Task<IQArray<bool>> __DataIn__(long) Declaration public override IApplyData __DataIn__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<long, IQArray<bool>>.__DataIn__(long) __DataOut__(IQArray<bool>) Declaration public override IApplyData __DataOut__(IQArray<bool> data) Parameters Type Name Description IQArray<bool> data Returns Type Description IApplyData Overrides Operation<long, IQArray<bool>>.__DataOut__(IQArray<bool>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomBytes.html",
    "title": "Class GenerateRandomBytes",
    "summary": "Class GenerateRandomBytes Inheritance object AbstractCallable Operation<long, IQArray<long>> GenerateRandomBytes Implements ICallable<long, IQArray<long>> ICallable IApplyData Inherited Members Operation<long, IQArray<long>>.__DataIn__(long) Operation<long, IQArray<long>>.__DataOut__(IQArray<long>) Operation<long, IQArray<long>>.GetRuntimeMetadata(IApplyData) Operation<long, IQArray<long>>.Apply(long) Operation<long, IQArray<long>>.Partial<T>(object) Operation<long, IQArray<long>>.Partial<P>(Func<P, long>) Operation<long, IQArray<long>>.Apply<GenO>(object) Operation<long, IQArray<long>>.FindPartialType(Type, object) Operation<long, IQArray<long>>.ToString() Operation<long, IQArray<long>>.__qsharpType() Operation<long, IQArray<long>>.__Body__ Operation<long, IQArray<long>>.__AdjointBody__ Operation<long, IQArray<long>>.__ControlledBody__ Operation<long, IQArray<long>>.__ControlledAdjointBody__ Operation<long, IQArray<long>>.Adjoint Operation<long, IQArray<long>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 79, 102)] public class GenerateRandomBytes : Operation<long, IQArray<long>>, ICallable<long, IQArray<long>>, ICallable, IApplyData Constructors GenerateRandomBytes(IOperationFactory) Declaration public GenerateRandomBytes(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomBits__ Declaration protected ICallable<long, IQArray<bool>> GenerateRandomBits__ { get; set; } Property Value Type Description ICallable<long, IQArray<bool>> Microsoft__Quantum__Convert__BoolArrayAsInt Declaration protected ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__BoolArrayAsInt { get; set; } Property Value Type Description ICallable<IQArray<bool>, long> __Body__ Declaration public override Func<long, IQArray<long>> __Body__ { get; } Property Value Type Description Func<long, IQArray<long>> Overrides Operation<long, IQArray<long>>.__Body__ Methods Run(IOperationFactory, long) Declaration public static Task<IQArray<long>> Run(IOperationFactory __m__, long length) Parameters Type Name Description IOperationFactory __m__ long length Returns Type Description Task<IQArray<long>> __DataIn__(long) Declaration public override IApplyData __DataIn__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<long, IQArray<long>>.__DataIn__(long) __DataOut__(IQArray<long>) Declaration public override IApplyData __DataOut__(IQArray<long> data) Parameters Type Name Description IQArray<long> data Returns Type Description IApplyData Overrides Operation<long, IQArray<long>>.__DataOut__(IQArray<long>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.In.html",
    "title": "Class GenerateRandomInt.In",
    "summary": "Class GenerateRandomInt.In Inheritance object QTuple<(long, long)> GenerateRandomInt.In Implements IQTuple<(long, long)> IApplyData Inherited Members QTuple<(long, long)>.Equals(object) QTuple<(long, long)>.Equals(QTuple<(long, long)>) QTuple<(long, long)>.GetHashCode() QTuple<(long, long)>.ToString() QTuple<(long, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class GenerateRandomInt.In : QTuple<(long, long)>, IQTuple<(long, long)>, IApplyData Constructors In((long, long)) Declaration public In((long, long) data) Parameters Type Name Description (long, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomInt.html",
    "title": "Class GenerateRandomInt",
    "summary": "Class GenerateRandomInt Inheritance object AbstractCallable Operation<(long, long), long> GenerateRandomInt Implements ICallable<(long, long), long> ICallable IApplyData Inherited Members Operation<(long, long), long>.__DataIn__((long, long)) Operation<(long, long), long>.__DataOut__(long) Operation<(long, long), long>.GetRuntimeMetadata(IApplyData) Operation<(long, long), long>.Apply((long, long)) Operation<(long, long), long>.Partial<T>(object) Operation<(long, long), long>.Partial<P>(Func<P, (long, long)>) Operation<(long, long), long>.Apply<GenO>(object) Operation<(long, long), long>.FindPartialType(Type, object) Operation<(long, long), long>.ToString() Operation<(long, long), long>.__qsharpType() Operation<(long, long), long>.__Body__ Operation<(long, long), long>.__AdjointBody__ Operation<(long, long), long>.__ControlledBody__ Operation<(long, long), long>.__ControlledAdjointBody__ Operation<(long, long), long>.Adjoint Operation<(long, long), long>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 53, 79)] public class GenerateRandomInt : Operation<(long, long), long>, ICallable<(long, long), long>, ICallable, IApplyData Constructors GenerateRandomInt(IOperationFactory) Declaration public GenerateRandomInt(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomBits__ Declaration protected ICallable<long, IQArray<bool>> GenerateRandomBits__ { get; set; } Property Value Type Description ICallable<long, IQArray<bool>> Microsoft__Quantum__Convert__BoolArrayAsInt Declaration protected ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__BoolArrayAsInt { get; set; } Property Value Type Description ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__IntAsDouble Declaration protected ICallable<long, double> Microsoft__Quantum__Convert__IntAsDouble { get; set; } Property Value Type Description ICallable<long, double> Microsoft__Quantum__Math__Ceiling Declaration protected ICallable<double, long> Microsoft__Quantum__Math__Ceiling { get; set; } Property Value Type Description ICallable<double, long> Microsoft__Quantum__Math__Lg Declaration protected ICallable<double, double> Microsoft__Quantum__Math__Lg { get; set; } Property Value Type Description ICallable<double, double> __Body__ Declaration public override Func<(long, long), long> __Body__ { get; } Property Value Type Description Func<(long, long), long> Overrides Operation<(long, long), long>.__Body__ Methods Run(IOperationFactory, long, long) Declaration public static Task<long> Run(IOperationFactory __m__, long min, long max) Parameters Type Name Description IOperationFactory __m__ long min long max Returns Type Description Task<long> __DataIn__((long, long)) Declaration public override IApplyData __DataIn__((long, long) data) Parameters Type Name Description (long, long) data Returns Type Description IApplyData Overrides Operation<(long, long), long>.__DataIn__((long, long)) __DataOut__(long) Declaration public override IApplyData __DataOut__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<(long, long), long>.__DataOut__(long) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GenerateRandomPermutation.html",
    "title": "Class GenerateRandomPermutation",
    "summary": "Class GenerateRandomPermutation Inheritance object AbstractCallable Operation<long, IQArray<long>> GenerateRandomPermutation Implements ICallable<long, IQArray<long>> ICallable IApplyData Inherited Members Operation<long, IQArray<long>>.__DataIn__(long) Operation<long, IQArray<long>>.__DataOut__(IQArray<long>) Operation<long, IQArray<long>>.GetRuntimeMetadata(IApplyData) Operation<long, IQArray<long>>.Apply(long) Operation<long, IQArray<long>>.Partial<T>(object) Operation<long, IQArray<long>>.Partial<P>(Func<P, long>) Operation<long, IQArray<long>>.Apply<GenO>(object) Operation<long, IQArray<long>>.FindPartialType(Type, object) Operation<long, IQArray<long>>.ToString() Operation<long, IQArray<long>>.__qsharpType() Operation<long, IQArray<long>>.__Body__ Operation<long, IQArray<long>>.__AdjointBody__ Operation<long, IQArray<long>>.__ControlledBody__ Operation<long, IQArray<long>>.__ControlledAdjointBody__ Operation<long, IQArray<long>>.Adjoint Operation<long, IQArray<long>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 102, 137)] public class GenerateRandomPermutation : Operation<long, IQArray<long>>, ICallable<long, IQArray<long>>, ICallable, IApplyData Constructors GenerateRandomPermutation(IOperationFactory) Declaration public GenerateRandomPermutation(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> __Body__ Declaration public override Func<long, IQArray<long>> __Body__ { get; } Property Value Type Description Func<long, IQArray<long>> Overrides Operation<long, IQArray<long>>.__Body__ Methods Run(IOperationFactory, long) Declaration public static Task<IQArray<long>> Run(IOperationFactory __m__, long length) Parameters Type Name Description IOperationFactory __m__ long length Returns Type Description Task<IQArray<long>> __DataIn__(long) Declaration public override IApplyData __DataIn__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<long, IQArray<long>>.__DataIn__(long) __DataOut__(IQArray<long>) Declaration public override IApplyData __DataOut__(IQArray<long> data) Parameters Type Name Description IQArray<long> data Returns Type Description IApplyData Overrides Operation<long, IQArray<long>>.__DataOut__(IQArray<long>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.GetMeasurementAngle.html",
    "title": "Class GetMeasurementAngle",
    "summary": "Class GetMeasurementAngle Inheritance object AbstractCallable Function<long, double> GetMeasurementAngle Implements ICallable<long, double> ICallable IApplyData Inherited Members Function<long, double>.__DataIn__(long) Function<long, double>.__DataOut__(double) Function<long, double>.Apply(long) Function<long, double>.Partial<T>(object) Function<long, double>.Partial<P>(Func<P, long>) Function<long, double>.Apply<GenO>(object) Function<long, double>.ToString() Function<long, double>.__qsharpType() Function<long, double>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 42, 66)] public class GetMeasurementAngle : Function<long, double>, ICallable<long, double>, ICallable, IApplyData Constructors GetMeasurementAngle(IOperationFactory) Declaration public GetMeasurementAngle(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Math__PI Declaration protected ICallable<QVoid, double> Microsoft__Quantum__Math__PI { get; set; } Property Value Type Description ICallable<QVoid, double> __Body__ Declaration public override Func<long, double> __Body__ { get; } Property Value Type Description Func<long, double> Overrides Function<long, double>.__Body__ Methods Run(IOperationFactory, long) Declaration public static Task<double> Run(IOperationFactory __m__, long basisIndex) Parameters Type Name Description IOperationFactory __m__ long basisIndex Returns Type Description Task<double> __DataIn__(long) Declaration public override IApplyData __DataIn__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Function<long, double>.__DataIn__(long) __DataOut__(double) Declaration public override IApplyData __DataOut__(double data) Parameters Type Name Description double data Returns Type Description IApplyData Overrides Function<long, double>.__DataOut__(double) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.In.html",
    "title": "Class MeasureInBasis.In",
    "summary": "Class MeasureInBasis.In Inheritance object QTuple<(Qubit, double)> MeasureInBasis.In Implements IQTuple<(Qubit, double)> IApplyData Inherited Members QTuple<(Qubit, double)>.Equals(object) QTuple<(Qubit, double)>.Equals(QTuple<(Qubit, double)>) QTuple<(Qubit, double)>.GetHashCode() QTuple<(Qubit, double)>.ToString() QTuple<(Qubit, double)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class MeasureInBasis.In : QTuple<(Qubit, double)>, IQTuple<(Qubit, double)>, IApplyData Constructors In((Qubit, double)) Declaration public In((Qubit, double) data) Parameters Type Name Description (Qubit, double) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.MeasureInBasis.html",
    "title": "Class MeasureInBasis",
    "summary": "Class MeasureInBasis Inheritance object AbstractCallable Operation<(Qubit, double), bool> MeasureInBasis Implements ICallable<(Qubit, double), bool> ICallable IApplyData Inherited Members Operation<(Qubit, double), bool>.__DataIn__((Qubit, double)) Operation<(Qubit, double), bool>.__DataOut__(bool) Operation<(Qubit, double), bool>.GetRuntimeMetadata(IApplyData) Operation<(Qubit, double), bool>.Apply((Qubit, double)) Operation<(Qubit, double), bool>.Partial<T>(object) Operation<(Qubit, double), bool>.Partial<P>(Func<P, (Qubit, double)>) Operation<(Qubit, double), bool>.Apply<GenO>(object) Operation<(Qubit, double), bool>.FindPartialType(Type, object) Operation<(Qubit, double), bool>.ToString() Operation<(Qubit, double), bool>.__qsharpType() Operation<(Qubit, double), bool>.__Body__ Operation<(Qubit, double), bool>.__AdjointBody__ Operation<(Qubit, double), bool>.__ControlledBody__ Operation<(Qubit, double), bool>.__ControlledAdjointBody__ Operation<(Qubit, double), bool>.Adjoint Operation<(Qubit, double), bool>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 66, 97)] public class MeasureInBasis : Operation<(Qubit, double), bool>, ICallable<(Qubit, double), bool>, ICallable, IApplyData Constructors MeasureInBasis(IOperationFactory) Declaration public MeasureInBasis(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Intrinsic__M Declaration protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M { get; set; } Property Value Type Description ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__Ry Declaration protected IUnitary<(double, Qubit)> Microsoft__Quantum__Intrinsic__Ry { get; set; } Property Value Type Description IUnitary<(double, Qubit)> Microsoft__Quantum__Intrinsic__X Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X { get; set; } Property Value Type Description IUnitary<Qubit> __Body__ Declaration public override Func<(Qubit, double), bool> __Body__ { get; } Property Value Type Description Func<(Qubit, double), bool> Overrides Operation<(Qubit, double), bool>.__Body__ Methods Run(IOperationFactory, Qubit, double) Declaration public static Task<bool> Run(IOperationFactory __m__, Qubit qubit, double angle) Parameters Type Name Description IOperationFactory __m__ Qubit qubit double angle Returns Type Description Task<bool> __DataIn__((Qubit, double)) Declaration public override IApplyData __DataIn__((Qubit, double) data) Parameters Type Name Description (Qubit, double) data Returns Type Description IApplyData Overrides Operation<(Qubit, double), bool>.__DataIn__((Qubit, double)) __DataOut__(bool) Declaration public override IApplyData __DataOut__(bool data) Parameters Type Name Description bool data Returns Type Description IApplyData Overrides Operation<(Qubit, double), bool>.__DataOut__(bool) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.In.html",
    "title": "Class PerformErrorCorrection.In",
    "summary": "Class PerformErrorCorrection.In Inheritance object QTuple<(IQArray<bool>, IQArray<bool>, double)> PerformErrorCorrection.In Implements IQTuple<(IQArray<bool>, IQArray<bool>, double)> IApplyData Inherited Members QTuple<(IQArray<bool>, IQArray<bool>, double)>.Equals(object) QTuple<(IQArray<bool>, IQArray<bool>, double)>.Equals(QTuple<(IQArray<bool>, IQArray<bool>, double)>) QTuple<(IQArray<bool>, IQArray<bool>, double)>.GetHashCode() QTuple<(IQArray<bool>, IQArray<bool>, double)>.ToString() QTuple<(IQArray<bool>, IQArray<bool>, double)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class PerformErrorCorrection.In : QTuple<(IQArray<bool>, IQArray<bool>, double)>, IQTuple<(IQArray<bool>, IQArray<bool>, double)>, IApplyData Constructors In((IQArray<bool>, IQArray<bool>, double)) Declaration public In((IQArray<bool>, IQArray<bool>, double) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, double) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.Out.html",
    "title": "Class PerformErrorCorrection.Out",
    "summary": "Class PerformErrorCorrection.Out Inheritance object QTuple<(IQArray<bool>, long)> PerformErrorCorrection.Out Implements IQTuple<(IQArray<bool>, long)> IApplyData Inherited Members QTuple<(IQArray<bool>, long)>.Equals(object) QTuple<(IQArray<bool>, long)>.Equals(QTuple<(IQArray<bool>, long)>) QTuple<(IQArray<bool>, long)>.GetHashCode() QTuple<(IQArray<bool>, long)>.ToString() QTuple<(IQArray<bool>, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class PerformErrorCorrection.Out : QTuple<(IQArray<bool>, long)>, IQTuple<(IQArray<bool>, long)>, IApplyData Constructors Out((IQArray<bool>, long)) Declaration public Out((IQArray<bool>, long) data) Parameters Type Name Description (IQArray<bool>, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformErrorCorrection.html",
    "title": "Class PerformErrorCorrection",
    "summary": "Class PerformErrorCorrection Inheritance object AbstractCallable Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> PerformErrorCorrection Implements ICallable<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> ICallable IApplyData Inherited Members Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__DataIn__((IQArray<bool>, IQArray<bool>, double)) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__DataOut__((IQArray<bool>, long)) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Apply((IQArray<bool>, IQArray<bool>, double)) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Partial<T>(object) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Partial<P>(Func<P, (IQArray<bool>, IQArray<bool>, double)>) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Apply<GenO>(object) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.FindPartialType(Type, object) Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.ToString() Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__qsharpType() Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__Body__ Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__AdjointBody__ Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__ControlledBody__ Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__ControlledAdjointBody__ Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Adjoint Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 260, 341)] public class PerformErrorCorrection : Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>, ICallable<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>, ICallable, IApplyData Constructors PerformErrorCorrection(IOperationFactory) Declaration public PerformErrorCorrection(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)> Overrides Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, IQArray<bool>, double) Declaration public static Task<(IQArray<bool>, long)> Run(IOperationFactory __m__, IQArray<bool> referenceKey, IQArray<bool> keyToCorrect, double errorRate) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> referenceKey IQArray<bool> keyToCorrect double errorRate Returns Type Description Task<(IQArray<bool>, long)> __DataIn__((IQArray<bool>, IQArray<bool>, double)) Declaration public override IApplyData __DataIn__((IQArray<bool>, IQArray<bool>, double) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, double) data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__DataIn__((IQArray<bool>, IQArray<bool>, double)) __DataOut__((IQArray<bool>, long)) Declaration public override IApplyData __DataOut__((IQArray<bool>, long) data) Parameters Type Name Description (IQArray<bool>, long) data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, IQArray<bool>, double), (IQArray<bool>, long)>.__DataOut__((IQArray<bool>, long)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.In.html",
    "title": "Class PerformQuantumExchange.In",
    "summary": "Class PerformQuantumExchange.In Inheritance object QTuple<(long, long)> PerformQuantumExchange.In Implements IQTuple<(long, long)> IApplyData Inherited Members QTuple<(long, long)>.Equals(object) QTuple<(long, long)>.Equals(QTuple<(long, long)>) QTuple<(long, long)>.GetHashCode() QTuple<(long, long)>.ToString() QTuple<(long, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class PerformQuantumExchange.In : QTuple<(long, long)>, IQTuple<(long, long)>, IApplyData Constructors In((long, long)) Declaration public In((long, long) data) Parameters Type Name Description (long, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.Out.html",
    "title": "Class PerformQuantumExchange.Out",
    "summary": "Class PerformQuantumExchange.Out Inheritance object QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> PerformQuantumExchange.Out Implements IQTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>) QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class PerformQuantumExchange.Out : QTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, IQTuple<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, IApplyData Constructors Out((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Declaration public Out((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.PerformQuantumExchange.html",
    "title": "Class PerformQuantumExchange",
    "summary": "Class PerformQuantumExchange Inheritance object AbstractCallable Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> PerformQuantumExchange Implements ICallable<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> ICallable IApplyData Inherited Members Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__DataIn__((long, long)) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.GetRuntimeMetadata(IApplyData) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Apply((long, long)) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Partial<T>(object) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Partial<P>(Func<P, (long, long)>) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Apply<GenO>(object) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.FindPartialType(Type, object) Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.ToString() Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__qsharpType() Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__Body__ Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__AdjointBody__ Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__ControlledBody__ Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__ControlledAdjointBody__ Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Adjoint Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 97, 155)] public class PerformQuantumExchange : Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, ICallable<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>, ICallable, IApplyData Constructors PerformQuantumExchange(IOperationFactory) Declaration public PerformQuantumExchange(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> GetMeasurementAngle__ Declaration protected ICallable<long, double> GetMeasurementAngle__ { get; set; } Property Value Type Description ICallable<long, double> MeasureInBasis__ Declaration protected ICallable<(Qubit, double), bool> MeasureInBasis__ { get; set; } Property Value Type Description ICallable<(Qubit, double), bool> Microsoft__Quantum__Intrinsic__CNOT Declaration protected IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__CNOT { get; set; } Property Value Type Description IUnitary<(Qubit, Qubit)> Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release __Body__ Declaration public override Func<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> __Body__ { get; } Property Value Type Description Func<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> Overrides Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__Body__ Methods Run(IOperationFactory, long, long) Declaration public static Task<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> Run(IOperationFactory __m__, long numPairs, long securityLevel) Parameters Type Name Description IOperationFactory __m__ long numPairs long securityLevel Returns Type Description Task<(IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)> __DataIn__((long, long)) Declaration public override IApplyData __DataIn__((long, long) data) Parameters Type Name Description (long, long) data Returns Type Description IApplyData Overrides Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__DataIn__((long, long)) __DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Operation<(long, long), (IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)>.__DataOut__((IQArray<long>, IQArray<long>, IQArray<bool>, IQArray<bool>)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.In.html",
    "title": "Class QuantumRandomOracle.In",
    "summary": "Class QuantumRandomOracle.In Inheritance object QTuple<(IQArray<bool>, long, long)> QuantumRandomOracle.In Implements IQTuple<(IQArray<bool>, long, long)> IApplyData Inherited Members QTuple<(IQArray<bool>, long, long)>.Equals(object) QTuple<(IQArray<bool>, long, long)>.Equals(QTuple<(IQArray<bool>, long, long)>) QTuple<(IQArray<bool>, long, long)>.GetHashCode() QTuple<(IQArray<bool>, long, long)>.ToString() QTuple<(IQArray<bool>, long, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class QuantumRandomOracle.In : QTuple<(IQArray<bool>, long, long)>, IQTuple<(IQArray<bool>, long, long)>, IApplyData Constructors In((IQArray<bool>, long, long)) Declaration public In((IQArray<bool>, long, long) data) Parameters Type Name Description (IQArray<bool>, long, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.QuantumRandomOracle.html",
    "title": "Class QuantumRandomOracle",
    "summary": "Class QuantumRandomOracle Inheritance object AbstractCallable Operation<(IQArray<bool>, long, long), IQArray<bool>> QuantumRandomOracle Implements ICallable<(IQArray<bool>, long, long), IQArray<bool>> ICallable IApplyData Inherited Members Operation<(IQArray<bool>, long, long), IQArray<bool>>.__DataIn__((IQArray<bool>, long, long)) Operation<(IQArray<bool>, long, long), IQArray<bool>>.__DataOut__(IQArray<bool>) Operation<(IQArray<bool>, long, long), IQArray<bool>>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<bool>, long, long), IQArray<bool>>.Apply((IQArray<bool>, long, long)) Operation<(IQArray<bool>, long, long), IQArray<bool>>.Partial<T>(object) Operation<(IQArray<bool>, long, long), IQArray<bool>>.Partial<P>(Func<P, (IQArray<bool>, long, long)>) Operation<(IQArray<bool>, long, long), IQArray<bool>>.Apply<GenO>(object) Operation<(IQArray<bool>, long, long), IQArray<bool>>.FindPartialType(Type, object) Operation<(IQArray<bool>, long, long), IQArray<bool>>.ToString() Operation<(IQArray<bool>, long, long), IQArray<bool>>.__qsharpType() Operation<(IQArray<bool>, long, long), IQArray<bool>>.__Body__ Operation<(IQArray<bool>, long, long), IQArray<bool>>.__AdjointBody__ Operation<(IQArray<bool>, long, long), IQArray<bool>>.__ControlledBody__ Operation<(IQArray<bool>, long, long), IQArray<bool>>.__ControlledAdjointBody__ Operation<(IQArray<bool>, long, long), IQArray<bool>>.Adjoint Operation<(IQArray<bool>, long, long), IQArray<bool>>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/RNG.qs\", OperationFunctor.Body, 137, 186)] public class QuantumRandomOracle : Operation<(IQArray<bool>, long, long), IQArray<bool>>, ICallable<(IQArray<bool>, long, long), IQArray<bool>>, ICallable, IApplyData Constructors QuantumRandomOracle(IOperationFactory) Declaration public QuantumRandomOracle(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate Microsoft__Quantum__Convert__BoolArrayAsInt Declaration protected ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__BoolArrayAsInt { get; set; } Property Value Type Description ICallable<IQArray<bool>, long> Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Microsoft__Quantum__Intrinsic__M Declaration protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M { get; set; } Property Value Type Description ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__Z Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z { get; set; } Property Value Type Description IUnitary<Qubit> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release Reset__ Declaration protected ICallable<Qubit, QVoid> Reset__ { get; set; } Property Value Type Description ICallable<Qubit, QVoid> __Body__ Declaration public override Func<(IQArray<bool>, long, long), IQArray<bool>> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, long, long), IQArray<bool>> Overrides Operation<(IQArray<bool>, long, long), IQArray<bool>>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, long, long) Declaration public static Task<IQArray<bool>> Run(IOperationFactory __m__, IQArray<bool> input, long outputLength, long seed) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> input long outputLength long seed Returns Type Description Task<IQArray<bool>> __DataIn__((IQArray<bool>, long, long)) Declaration public override IApplyData __DataIn__((IQArray<bool>, long, long) data) Parameters Type Name Description (IQArray<bool>, long, long) data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, long, long), IQArray<bool>>.__DataIn__((IQArray<bool>, long, long)) __DataOut__(IQArray<bool>) Declaration public override IApplyData __DataOut__(IQArray<bool> data) Parameters Type Name Description IQArray<bool> data Returns Type Description IApplyData Overrides Operation<(IQArray<bool>, long, long), IQArray<bool>>.__DataOut__(IQArray<bool>) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.In.html",
    "title": "Class VerifyAuthentication.In",
    "summary": "Class VerifyAuthentication.In Inheritance object QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)> VerifyAuthentication.In Implements IQTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>.Equals(QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>) QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>.ToString() QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class VerifyAuthentication.In : QTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>, IQTuple<(IQArray<bool>, IQArray<bool>, IQArray<bool>)>, IApplyData Constructors In((IQArray<bool>, IQArray<bool>, IQArray<bool>)) Declaration public In((IQArray<bool>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.VerifyAuthentication.html",
    "title": "Class VerifyAuthentication",
    "summary": "Class VerifyAuthentication Inheritance object AbstractCallable Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool> VerifyAuthentication Implements ICallable<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool> ICallable IApplyData Inherited Members Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__DataOut__(bool) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.Apply((IQArray<bool>, IQArray<bool>, IQArray<bool>)) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.Partial<T>(object) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.Partial<P>(Func<P, (IQArray<bool>, IQArray<bool>, IQArray<bool>)>) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.Apply<GenO>(object) Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.ToString() Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__qsharpType() Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 424, 451)] public class VerifyAuthentication : Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>, ICallable<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>, ICallable, IApplyData Constructors VerifyAuthentication(IOperationFactory) Declaration public VerifyAuthentication(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateAuthenticationCode__ Declaration protected ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>> GenerateAuthenticationCode__ { get; set; } Property Value Type Description ICallable<(IQArray<bool>, IQArray<bool>), IQArray<bool>> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Math__Min Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Min { get; set; } Property Value Type Description ICallable<IQArray<long>, long> __Body__ Declaration public override Func<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool> __Body__ { get; } Property Value Type Description Func<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool> Overrides Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__Body__ Methods Run(IOperationFactory, IQArray<bool>, IQArray<bool>, IQArray<bool>) Declaration public static Task<bool> Run(IOperationFactory __m__, IQArray<bool> key, IQArray<bool> tag, IQArray<bool> authSecret) Parameters Type Name Description IOperationFactory __m__ IQArray<bool> key IQArray<bool> tag IQArray<bool> authSecret Returns Type Description Task<bool> __DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>)) Declaration public override IApplyData __DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>) data) Parameters Type Name Description (IQArray<bool>, IQArray<bool>, IQArray<bool>) data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__DataIn__((IQArray<bool>, IQArray<bool>, IQArray<bool>)) __DataOut__(bool) Declaration public override IApplyData __DataOut__(bool data) Parameters Type Name Description bool data Returns Type Description IApplyData Overrides Function<(IQArray<bool>, IQArray<bool>, IQArray<bool>), bool>.__DataOut__(bool) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.In.html",
    "title": "Class VerifyChannelSecurity.In",
    "summary": "Class VerifyChannelSecurity.In Inheritance object QTuple<(IQArray<(long, long, bool, bool)>, double)> VerifyChannelSecurity.In Implements IQTuple<(IQArray<(long, long, bool, bool)>, double)> IApplyData Inherited Members QTuple<(IQArray<(long, long, bool, bool)>, double)>.Equals(object) QTuple<(IQArray<(long, long, bool, bool)>, double)>.Equals(QTuple<(IQArray<(long, long, bool, bool)>, double)>) QTuple<(IQArray<(long, long, bool, bool)>, double)>.GetHashCode() QTuple<(IQArray<(long, long, bool, bool)>, double)>.ToString() QTuple<(IQArray<(long, long, bool, bool)>, double)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class VerifyChannelSecurity.In : QTuple<(IQArray<(long, long, bool, bool)>, double)>, IQTuple<(IQArray<(long, long, bool, bool)>, double)>, IApplyData Constructors In((IQArray<(long, long, bool, bool)>, double)) Declaration public In((IQArray<(long, long, bool, bool)>, double) data) Parameters Type Name Description (IQArray<(long, long, bool, bool)>, double) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.Out.html",
    "title": "Class VerifyChannelSecurity.Out",
    "summary": "Class VerifyChannelSecurity.Out Inheritance object QTuple<(bool, double)> VerifyChannelSecurity.Out Implements IQTuple<(bool, double)> IApplyData Inherited Members QTuple<(bool, double)>.Equals(object) QTuple<(bool, double)>.Equals(QTuple<(bool, double)>) QTuple<(bool, double)>.GetHashCode() QTuple<(bool, double)>.ToString() QTuple<(bool, double)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax public class VerifyChannelSecurity.Out : QTuple<(bool, double)>, IQTuple<(bool, double)>, IApplyData Constructors Out((bool, double)) Declaration public Out((bool, double) data) Parameters Type Name Description (bool, double) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.VerifyChannelSecurity.html",
    "title": "Class VerifyChannelSecurity",
    "summary": "Class VerifyChannelSecurity Inheritance object AbstractCallable Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)> VerifyChannelSecurity Implements ICallable<(IQArray<(long, long, bool, bool)>, double), (bool, double)> ICallable IApplyData Inherited Members Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__DataIn__((IQArray<(long, long, bool, bool)>, double)) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__DataOut__((bool, double)) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Apply((IQArray<(long, long, bool, bool)>, double)) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Partial<T>(object) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Partial<P>(Func<P, (IQArray<(long, long, bool, bool)>, double)>) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Apply<GenO>(object) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.FindPartialType(Type, object) Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.ToString() Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__qsharpType() Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__Body__ Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__AdjointBody__ Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__ControlledBody__ Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__ControlledAdjointBody__ Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Adjoint Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Cryptography Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Cryptography/KeyDistribution.qs\", OperationFunctor.Body, 208, 260)] public class VerifyChannelSecurity : Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>, ICallable<(IQArray<(long, long, bool, bool)>, double), (bool, double)>, ICallable, IApplyData Constructors VerifyChannelSecurity(IOperationFactory) Declaration public VerifyChannelSecurity(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties GenerateRandomInt__ Declaration protected ICallable<(long, long), long> GenerateRandomInt__ { get; set; } Property Value Type Description ICallable<(long, long), long> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Convert__IntAsDouble Declaration protected ICallable<long, double> Microsoft__Quantum__Convert__IntAsDouble { get; set; } Property Value Type Description ICallable<long, double> __Body__ Declaration public override Func<(IQArray<(long, long, bool, bool)>, double), (bool, double)> __Body__ { get; } Property Value Type Description Func<(IQArray<(long, long, bool, bool)>, double), (bool, double)> Overrides Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__Body__ Methods Run(IOperationFactory, IQArray<(long, long, bool, bool)>, double) Declaration public static Task<(bool, double)> Run(IOperationFactory __m__, IQArray<(long, long, bool, bool)> securityTestPairs, double securityThreshold) Parameters Type Name Description IOperationFactory __m__ IQArray<(long, long, bool, bool)> securityTestPairs double securityThreshold Returns Type Description Task<(bool, double)> __DataIn__((IQArray<(long, long, bool, bool)>, double)) Declaration public override IApplyData __DataIn__((IQArray<(long, long, bool, bool)>, double) data) Parameters Type Name Description (IQArray<(long, long, bool, bool)>, double) data Returns Type Description IApplyData Overrides Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__DataIn__((IQArray<(long, long, bool, bool)>, double)) __DataOut__((bool, double)) Declaration public override IApplyData __DataOut__((bool, double) data) Parameters Type Name Description (bool, double) data Returns Type Description IApplyData Overrides Operation<(IQArray<(long, long, bool, bool)>, double), (bool, double)>.__DataOut__((bool, double)) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Cryptography.html": {
    "href": "api/quantum/EasyQ.Quantum.Cryptography.html",
    "title": "Namespace EasyQ.Quantum.Cryptography",
    "summary": "Namespace EasyQ.Quantum.Cryptography Classes BinaryEntropyCalc CalculateErrorRate CalculateErrorRate.In CreateEntangledPair CreateEntangledPair.Out EnhanceKeySecurity EnhanceKeySecurity.In EntanglementBasedRandomness EstimateKeyYield EstimateKeyYield.In FilterMeasurementResults FilterMeasurementResults.In FilterMeasurementResults.Out GenerateAuthenticationCode GenerateAuthenticationCode.In GenerateQuantumSecureKey GenerateQuantumSecureKey.In GenerateQuantumSecureKey.Out GenerateRandomBit GenerateRandomBits GenerateRandomBytes GenerateRandomInt GenerateRandomInt.In GenerateRandomPermutation GetMeasurementAngle MeasureInBasis MeasureInBasis.In PerformErrorCorrection PerformErrorCorrection.In PerformErrorCorrection.Out PerformQuantumExchange PerformQuantumExchange.In PerformQuantumExchange.Out QuantumRandomOracle QuantumRandomOracle.In VerifyAuthentication VerifyAuthentication.In VerifyChannelSecurity VerifyChannelSecurity.In VerifyChannelSecurity.Out"
  },
  "api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.ApplyGroverDiffusionOperator.html",
    "title": "Class ApplyGroverDiffusionOperator",
    "summary": "Class ApplyGroverDiffusionOperator Inheritance object AbstractCallable Operation<IQArray<Qubit>, QVoid> Adjointable<IQArray<Qubit>> ApplyGroverDiffusionOperator Implements IAdjointable<IQArray<Qubit>> ICallable<IQArray<Qubit>, QVoid> IAdjointable ICallable IApplyData Inherited Members Operation<IQArray<Qubit>, QVoid>.__DataIn__(IQArray<Qubit>) Operation<IQArray<Qubit>, QVoid>.__DataOut__(QVoid) Operation<IQArray<Qubit>, QVoid>.GetRuntimeMetadata(IApplyData) Operation<IQArray<Qubit>, QVoid>.Apply(IQArray<Qubit>) Operation<IQArray<Qubit>, QVoid>.Partial<T>(object) Operation<IQArray<Qubit>, QVoid>.Partial<P>(Func<P, IQArray<Qubit>>) Operation<IQArray<Qubit>, QVoid>.Apply<GenO>(object) Operation<IQArray<Qubit>, QVoid>.FindPartialType(Type, object) Operation<IQArray<Qubit>, QVoid>.ToString() Operation<IQArray<Qubit>, QVoid>.__qsharpType() Operation<IQArray<Qubit>, QVoid>.__Body__ Operation<IQArray<Qubit>, QVoid>.__AdjointBody__ Operation<IQArray<Qubit>, QVoid>.__ControlledBody__ Operation<IQArray<Qubit>, QVoid>.__ControlledAdjointBody__ Operation<IQArray<Qubit>, QVoid>.Adjoint Operation<IQArray<Qubit>, QVoid>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 60, 82)] [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Adjoint, 60, 82)] public class ApplyGroverDiffusionOperator : Adjointable<IQArray<Qubit>>, IAdjointable<IQArray<Qubit>>, ICallable<IQArray<Qubit>, QVoid>, IAdjointable, ICallable, IApplyData Constructors ApplyGroverDiffusionOperator(IOperationFactory) Declaration public ApplyGroverDiffusionOperator(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Arrays__Most Declaration protected ICallable Microsoft__Quantum__Arrays__Most { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Arrays__Tail Declaration protected ICallable Microsoft__Quantum__Arrays__Tail { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Canon__ApplyToEachA Declaration protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA { get; set; } Property Value Type Description IAdjointable Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X { get; set; } Property Value Type Description IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z { get; set; } Property Value Type Description IUnitary<Qubit> __AdjointBody__ Declaration public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ { get; } Property Value Type Description Func<IQArray<Qubit>, QVoid> Overrides Operation<IQArray<Qubit>, QVoid>.__AdjointBody__ __Body__ Declaration public override Func<IQArray<Qubit>, QVoid> __Body__ { get; } Property Value Type Description Func<IQArray<Qubit>, QVoid> Overrides Operation<IQArray<Qubit>, QVoid>.__Body__ Methods Run(IOperationFactory, IQArray<Qubit>) Declaration public static Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qubits) Parameters Type Name Description IOperationFactory __m__ IQArray<Qubit> qubits Returns Type Description Task<QVoid> __DataIn__(IQArray<Qubit>) Declaration public override IApplyData __DataIn__(IQArray<Qubit> data) Parameters Type Name Description IQArray<Qubit> data Returns Type Description IApplyData Overrides Operation<IQArray<Qubit>, QVoid>.__DataIn__(IQArray<Qubit>) __DataOut__(QVoid) Declaration public override IApplyData __DataOut__(QVoid data) Parameters Type Name Description QVoid data Returns Type Description IApplyData Overrides Operation<IQArray<Qubit>, QVoid>.__DataOut__(QVoid) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements IAdjointable<I> ICallable<I, O> IAdjointable ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.In.html",
    "title": "Class ApplyPauliFlipToMatchTarget.In",
    "summary": "Class ApplyPauliFlipToMatchTarget.In Inheritance object QTuple<(IQArray<Qubit>, IQArray<bool>)> ApplyPauliFlipToMatchTarget.In Implements IQTuple<(IQArray<Qubit>, IQArray<bool>)> IApplyData Inherited Members QTuple<(IQArray<Qubit>, IQArray<bool>)>.Equals(object) QTuple<(IQArray<Qubit>, IQArray<bool>)>.Equals(QTuple<(IQArray<Qubit>, IQArray<bool>)>) QTuple<(IQArray<Qubit>, IQArray<bool>)>.GetHashCode() QTuple<(IQArray<Qubit>, IQArray<bool>)>.ToString() QTuple<(IQArray<Qubit>, IQArray<bool>)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax public class ApplyPauliFlipToMatchTarget.In : QTuple<(IQArray<Qubit>, IQArray<bool>)>, IQTuple<(IQArray<Qubit>, IQArray<bool>)>, IApplyData Constructors In((IQArray<Qubit>, IQArray<bool>)) Declaration public In((IQArray<Qubit>, IQArray<bool>) data) Parameters Type Name Description (IQArray<Qubit>, IQArray<bool>) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.ApplyPauliFlipToMatchTarget.html",
    "title": "Class ApplyPauliFlipToMatchTarget",
    "summary": "Class ApplyPauliFlipToMatchTarget Inheritance object AbstractCallable Operation<(IQArray<Qubit>, IQArray<bool>), QVoid> Adjointable<(IQArray<Qubit>, IQArray<bool>)> ApplyPauliFlipToMatchTarget Implements IAdjointable<(IQArray<Qubit>, IQArray<bool>)> ICallable<(IQArray<Qubit>, IQArray<bool>), QVoid> IAdjointable ICallable IApplyData Inherited Members Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__DataIn__((IQArray<Qubit>, IQArray<bool>)) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__DataOut__(QVoid) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Apply((IQArray<Qubit>, IQArray<bool>)) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Partial<T>(object) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Partial<P>(Func<P, (IQArray<Qubit>, IQArray<bool>)>) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Apply<GenO>(object) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.FindPartialType(Type, object) Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.ToString() Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__qsharpType() Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__Body__ Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__AdjointBody__ Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__ControlledBody__ Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__ControlledAdjointBody__ Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Adjoint Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 106, 125)] [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Adjoint, 106, 125)] public class ApplyPauliFlipToMatchTarget : Adjointable<(IQArray<Qubit>, IQArray<bool>)>, IAdjointable<(IQArray<Qubit>, IQArray<bool>)>, ICallable<(IQArray<Qubit>, IQArray<bool>), QVoid>, IAdjointable, ICallable, IApplyData Constructors ApplyPauliFlipToMatchTarget(IOperationFactory) Declaration public ApplyPauliFlipToMatchTarget(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Intrinsic__X Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X { get; set; } Property Value Type Description IUnitary<Qubit> RangeReverse__ Declaration protected ICallable<QRange, QRange> RangeReverse__ { get; set; } Property Value Type Description ICallable<QRange, QRange> __AdjointBody__ Declaration public override Func<(IQArray<Qubit>, IQArray<bool>), QVoid> __AdjointBody__ { get; } Property Value Type Description Func<(IQArray<Qubit>, IQArray<bool>), QVoid> Overrides Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__AdjointBody__ __Body__ Declaration public override Func<(IQArray<Qubit>, IQArray<bool>), QVoid> __Body__ { get; } Property Value Type Description Func<(IQArray<Qubit>, IQArray<bool>), QVoid> Overrides Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__Body__ Methods Run(IOperationFactory, IQArray<Qubit>, IQArray<bool>) Declaration public static Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qubits, IQArray<bool> targetBits) Parameters Type Name Description IOperationFactory __m__ IQArray<Qubit> qubits IQArray<bool> targetBits Returns Type Description Task<QVoid> __DataIn__((IQArray<Qubit>, IQArray<bool>)) Declaration public override IApplyData __DataIn__((IQArray<Qubit>, IQArray<bool>) data) Parameters Type Name Description (IQArray<Qubit>, IQArray<bool>) data Returns Type Description IApplyData Overrides Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__DataIn__((IQArray<Qubit>, IQArray<bool>)) __DataOut__(QVoid) Declaration public override IApplyData __DataOut__(QVoid data) Parameters Type Name Description QVoid data Returns Type Description IApplyData Overrides Operation<(IQArray<Qubit>, IQArray<bool>), QVoid>.__DataOut__(QVoid) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements IAdjointable<I> ICallable<I, O> IAdjointable ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.In.html",
    "title": "Class CalculateOptimalIterations.In",
    "summary": "Class CalculateOptimalIterations.In Inheritance object QTuple<(long, long)> CalculateOptimalIterations.In Implements IQTuple<(long, long)> IApplyData Inherited Members QTuple<(long, long)>.Equals(object) QTuple<(long, long)>.Equals(QTuple<(long, long)>) QTuple<(long, long)>.GetHashCode() QTuple<(long, long)>.ToString() QTuple<(long, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax public class CalculateOptimalIterations.In : QTuple<(long, long)>, IQTuple<(long, long)>, IApplyData Constructors In((long, long)) Declaration public In((long, long) data) Parameters Type Name Description (long, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.CalculateOptimalIterations.html",
    "title": "Class CalculateOptimalIterations",
    "summary": "Class CalculateOptimalIterations Inheritance object AbstractCallable Function<(long, long), long> CalculateOptimalIterations Implements ICallable<(long, long), long> ICallable IApplyData Inherited Members Function<(long, long), long>.__DataIn__((long, long)) Function<(long, long), long>.__DataOut__(long) Function<(long, long), long>.Apply((long, long)) Function<(long, long), long>.Partial<T>(object) Function<(long, long), long>.Partial<P>(Func<P, (long, long)>) Function<(long, long), long>.Apply<GenO>(object) Function<(long, long), long>.ToString() Function<(long, long), long>.__qsharpType() Function<(long, long), long>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 125, -1)] public class CalculateOptimalIterations : Function<(long, long), long>, ICallable<(long, long), long>, ICallable, IApplyData Constructors CalculateOptimalIterations(IOperationFactory) Declaration public CalculateOptimalIterations(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Convert__IntAsDouble Declaration protected ICallable<long, double> Microsoft__Quantum__Convert__IntAsDouble { get; set; } Property Value Type Description ICallable<long, double> Microsoft__Quantum__Math__ArcSin Declaration protected ICallable<double, double> Microsoft__Quantum__Math__ArcSin { get; set; } Property Value Type Description ICallable<double, double> Microsoft__Quantum__Math__Max Declaration protected ICallable<IQArray<long>, long> Microsoft__Quantum__Math__Max { get; set; } Property Value Type Description ICallable<IQArray<long>, long> Microsoft__Quantum__Math__PI Declaration protected ICallable<QVoid, double> Microsoft__Quantum__Math__PI { get; set; } Property Value Type Description ICallable<QVoid, double> Microsoft__Quantum__Math__Round Declaration protected ICallable<double, long> Microsoft__Quantum__Math__Round { get; set; } Property Value Type Description ICallable<double, long> Microsoft__Quantum__Math__Sqrt Declaration protected ICallable<double, double> Microsoft__Quantum__Math__Sqrt { get; set; } Property Value Type Description ICallable<double, double> __Body__ Declaration public override Func<(long, long), long> __Body__ { get; } Property Value Type Description Func<(long, long), long> Overrides Function<(long, long), long>.__Body__ Methods Run(IOperationFactory, long, long) Declaration public static Task<long> Run(IOperationFactory __m__, long numItems, long numMarkedItems) Parameters Type Name Description IOperationFactory __m__ long numItems long numMarkedItems Returns Type Description Task<long> __DataIn__((long, long)) Declaration public override IApplyData __DataIn__((long, long) data) Parameters Type Name Description (long, long) data Returns Type Description IApplyData Overrides Function<(long, long), long>.__DataIn__((long, long)) __DataOut__(long) Declaration public override IApplyData __DataOut__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Function<(long, long), long>.__DataOut__(long) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.In.html",
    "title": "Class CreateOracleForItem.In",
    "summary": "Class CreateOracleForItem.In Inheritance object QTuple<(long, long)> CreateOracleForItem.In Implements IQTuple<(long, long)> IApplyData Inherited Members QTuple<(long, long)>.Equals(object) QTuple<(long, long)>.Equals(QTuple<(long, long)>) QTuple<(long, long)>.GetHashCode() QTuple<(long, long)>.ToString() QTuple<(long, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax public class CreateOracleForItem.In : QTuple<(long, long)>, IQTuple<(long, long)>, IApplyData Constructors In((long, long)) Declaration public In((long, long) data) Parameters Type Name Description (long, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.CreateOracleForItem.html",
    "title": "Class CreateOracleForItem",
    "summary": "Class CreateOracleForItem Inheritance object AbstractCallable Function<(long, long), IAdjointable> CreateOracleForItem Implements ICallable<(long, long), IAdjointable> ICallable IApplyData Inherited Members Function<(long, long), IAdjointable>.__DataIn__((long, long)) Function<(long, long), IAdjointable>.__DataOut__(IAdjointable) Function<(long, long), IAdjointable>.Apply((long, long)) Function<(long, long), IAdjointable>.Partial<T>(object) Function<(long, long), IAdjointable>.Partial<P>(Func<P, (long, long)>) Function<(long, long), IAdjointable>.Apply<GenO>(object) Function<(long, long), IAdjointable>.ToString() Function<(long, long), IAdjointable>.__qsharpType() Function<(long, long), IAdjointable>.__Body__ AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 82, 88)] public class CreateOracleForItem : Function<(long, long), IAdjointable>, ICallable<(long, long), IAdjointable>, ICallable, IApplyData Constructors CreateOracleForItem(IOperationFactory) Declaration public CreateOracleForItem(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties __Body__ Declaration public override Func<(long, long), IAdjointable> __Body__ { get; } Property Value Type Description Func<(long, long), IAdjointable> Overrides Function<(long, long), IAdjointable>.__Body__ Methods Run(IOperationFactory, long, long) Declaration public static Task<IAdjointable> Run(IOperationFactory __m__, long numQubits, long targetItem) Parameters Type Name Description IOperationFactory __m__ long numQubits long targetItem Returns Type Description Task<IAdjointable> __DataIn__((long, long)) Declaration public override IApplyData __DataIn__((long, long) data) Parameters Type Name Description (long, long) data Returns Type Description IApplyData Overrides Function<(long, long), IAdjointable>.__DataIn__((long, long)) __DataOut__(IAdjointable) Declaration public override IApplyData __DataOut__(IAdjointable data) Parameters Type Name Description IAdjointable data Returns Type Description IApplyData Overrides Function<(long, long), IAdjointable>.__DataOut__(IAdjointable) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.GroverSearch.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.GroverSearch.In.html",
    "title": "Class GroverSearch.In",
    "summary": "Class GroverSearch.In Inheritance object QTuple<(long, IAdjointable, long)> GroverSearch.In Implements IQTuple<(long, IAdjointable, long)> IApplyData Inherited Members QTuple<(long, IAdjointable, long)>.Equals(object) QTuple<(long, IAdjointable, long)>.Equals(QTuple<(long, IAdjointable, long)>) QTuple<(long, IAdjointable, long)>.GetHashCode() QTuple<(long, IAdjointable, long)>.ToString() QTuple<(long, IAdjointable, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax public class GroverSearch.In : QTuple<(long, IAdjointable, long)>, IQTuple<(long, IAdjointable, long)>, IApplyData Constructors In((long, IAdjointable, long)) Declaration public In((long, IAdjointable, long) data) Parameters Type Name Description (long, IAdjointable, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.GroverSearch.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.GroverSearch.html",
    "title": "Class GroverSearch",
    "summary": "Class GroverSearch Inheritance object AbstractCallable Operation<(long, IAdjointable, long), long> GroverSearch Implements ICallable<(long, IAdjointable, long), long> ICallable IApplyData Inherited Members Operation<(long, IAdjointable, long), long>.__DataIn__((long, IAdjointable, long)) Operation<(long, IAdjointable, long), long>.__DataOut__(long) Operation<(long, IAdjointable, long), long>.GetRuntimeMetadata(IApplyData) Operation<(long, IAdjointable, long), long>.Apply((long, IAdjointable, long)) Operation<(long, IAdjointable, long), long>.Partial<T>(object) Operation<(long, IAdjointable, long), long>.Partial<P>(Func<P, (long, IAdjointable, long)>) Operation<(long, IAdjointable, long), long>.Apply<GenO>(object) Operation<(long, IAdjointable, long), long>.FindPartialType(Type, object) Operation<(long, IAdjointable, long), long>.ToString() Operation<(long, IAdjointable, long), long>.__qsharpType() Operation<(long, IAdjointable, long), long>.__Body__ Operation<(long, IAdjointable, long), long>.__AdjointBody__ Operation<(long, IAdjointable, long), long>.__ControlledBody__ Operation<(long, IAdjointable, long), long>.__ControlledAdjointBody__ Operation<(long, IAdjointable, long), long>.Adjoint Operation<(long, IAdjointable, long), long>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 23, 51)] public class GroverSearch : Operation<(long, IAdjointable, long), long>, ICallable<(long, IAdjointable, long), long>, ICallable, IApplyData Constructors GroverSearch(IOperationFactory) Declaration public GroverSearch(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Allocate__ Declaration protected Allocate Allocate__ { get; set; } Property Value Type Description Allocate ApplyGroverDiffusionOperator__ Declaration protected IAdjointable<IQArray<Qubit>> ApplyGroverDiffusionOperator__ { get; set; } Property Value Type Description IAdjointable<IQArray<Qubit>> MeasureAllQubits__ Declaration protected ICallable<IQArray<Qubit>, long> MeasureAllQubits__ { get; set; } Property Value Type Description ICallable<IQArray<Qubit>, long> Microsoft__Quantum__Canon__ApplyToEachA Declaration protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA { get; set; } Property Value Type Description IAdjointable Microsoft__Quantum__Intrinsic__H Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H { get; set; } Property Value Type Description IUnitary<Qubit> Release__ Declaration protected Release Release__ { get; set; } Property Value Type Description Release ResetAll__ Declaration protected ICallable<IQArray<Qubit>, QVoid> ResetAll__ { get; set; } Property Value Type Description ICallable<IQArray<Qubit>, QVoid> __Body__ Declaration public override Func<(long, IAdjointable, long), long> __Body__ { get; } Property Value Type Description Func<(long, IAdjointable, long), long> Overrides Operation<(long, IAdjointable, long), long>.__Body__ Methods Run(IOperationFactory, long, IAdjointable, long) Declaration public static Task<long> Run(IOperationFactory __m__, long numQubits, IAdjointable markedItemFunction, long iterations) Parameters Type Name Description IOperationFactory __m__ long numQubits IAdjointable markedItemFunction long iterations Returns Type Description Task<long> __DataIn__((long, IAdjointable, long)) Declaration public override IApplyData __DataIn__((long, IAdjointable, long) data) Parameters Type Name Description (long, IAdjointable, long) data Returns Type Description IApplyData Overrides Operation<(long, IAdjointable, long), long>.__DataIn__((long, IAdjointable, long)) __DataOut__(long) Declaration public override IApplyData __DataOut__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<(long, IAdjointable, long), long>.__DataOut__(long) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.MeasureAllQubits.html",
    "title": "Class MeasureAllQubits",
    "summary": "Class MeasureAllQubits Inheritance object AbstractCallable Operation<IQArray<Qubit>, long> MeasureAllQubits Implements ICallable<IQArray<Qubit>, long> ICallable IApplyData Inherited Members Operation<IQArray<Qubit>, long>.__DataIn__(IQArray<Qubit>) Operation<IQArray<Qubit>, long>.__DataOut__(long) Operation<IQArray<Qubit>, long>.GetRuntimeMetadata(IApplyData) Operation<IQArray<Qubit>, long>.Apply(IQArray<Qubit>) Operation<IQArray<Qubit>, long>.Partial<T>(object) Operation<IQArray<Qubit>, long>.Partial<P>(Func<P, IQArray<Qubit>>) Operation<IQArray<Qubit>, long>.Apply<GenO>(object) Operation<IQArray<Qubit>, long>.FindPartialType(Type, object) Operation<IQArray<Qubit>, long>.ToString() Operation<IQArray<Qubit>, long>.__qsharpType() Operation<IQArray<Qubit>, long>.__Body__ Operation<IQArray<Qubit>, long>.__AdjointBody__ Operation<IQArray<Qubit>, long>.__ControlledBody__ Operation<IQArray<Qubit>, long>.__ControlledAdjointBody__ Operation<IQArray<Qubit>, long>.Adjoint Operation<IQArray<Qubit>, long>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 51, 60)] public class MeasureAllQubits : Operation<IQArray<Qubit>, long>, ICallable<IQArray<Qubit>, long>, ICallable, IApplyData Constructors MeasureAllQubits(IOperationFactory) Declaration public MeasureAllQubits(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties Microsoft__Quantum__Arrays__ForEach Declaration protected ICallable Microsoft__Quantum__Arrays__ForEach { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Arrays__Mapped Declaration protected ICallable Microsoft__Quantum__Arrays__Mapped { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Convert__BoolArrayAsInt Declaration protected ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__BoolArrayAsInt { get; set; } Property Value Type Description ICallable<IQArray<bool>, long> Microsoft__Quantum__Convert__ResultAsBool Declaration protected ICallable<Result, bool> Microsoft__Quantum__Convert__ResultAsBool { get; set; } Property Value Type Description ICallable<Result, bool> Microsoft__Quantum__Measurement__MResetZ Declaration protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ { get; set; } Property Value Type Description ICallable<Qubit, Result> __Body__ Declaration public override Func<IQArray<Qubit>, long> __Body__ { get; } Property Value Type Description Func<IQArray<Qubit>, long> Overrides Operation<IQArray<Qubit>, long>.__Body__ Methods Run(IOperationFactory, IQArray<Qubit>) Declaration public static Task<long> Run(IOperationFactory __m__, IQArray<Qubit> qubits) Parameters Type Name Description IOperationFactory __m__ IQArray<Qubit> qubits Returns Type Description Task<long> __DataIn__(IQArray<Qubit>) Declaration public override IApplyData __DataIn__(IQArray<Qubit> data) Parameters Type Name Description IQArray<Qubit> data Returns Type Description IApplyData Overrides Operation<IQArray<Qubit>, long>.__DataIn__(IQArray<Qubit>) __DataOut__(long) Declaration public override IApplyData __DataOut__(long data) Parameters Type Name Description long data Returns Type Description IApplyData Overrides Operation<IQArray<Qubit>, long>.__DataOut__(long) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements ICallable<I, O> ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.Oracle.In.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.Oracle.In.html",
    "title": "Class Oracle.In",
    "summary": "Class Oracle.In Inheritance object QTuple<(IQArray<Qubit>, long)> Oracle.In Implements IQTuple<(IQArray<Qubit>, long)> IApplyData Inherited Members QTuple<(IQArray<Qubit>, long)>.Equals(object) QTuple<(IQArray<Qubit>, long)>.Equals(QTuple<(IQArray<Qubit>, long)>) QTuple<(IQArray<Qubit>, long)>.GetHashCode() QTuple<(IQArray<Qubit>, long)>.ToString() QTuple<(IQArray<Qubit>, long)>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax public class Oracle.In : QTuple<(IQArray<Qubit>, long)>, IQTuple<(IQArray<Qubit>, long)>, IApplyData Constructors In((IQArray<Qubit>, long)) Declaration public In((IQArray<Qubit>, long) data) Parameters Type Name Description (IQArray<Qubit>, long) data Implements IQTuple<T> IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.Oracle.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.Oracle.html",
    "title": "Class Oracle",
    "summary": "Class Oracle Inheritance object AbstractCallable Operation<(IQArray<Qubit>, long), QVoid> Adjointable<(IQArray<Qubit>, long)> Oracle Implements IAdjointable<(IQArray<Qubit>, long)> ICallable<(IQArray<Qubit>, long), QVoid> IAdjointable ICallable IApplyData Inherited Members Operation<(IQArray<Qubit>, long), QVoid>.__DataIn__((IQArray<Qubit>, long)) Operation<(IQArray<Qubit>, long), QVoid>.__DataOut__(QVoid) Operation<(IQArray<Qubit>, long), QVoid>.GetRuntimeMetadata(IApplyData) Operation<(IQArray<Qubit>, long), QVoid>.Apply((IQArray<Qubit>, long)) Operation<(IQArray<Qubit>, long), QVoid>.Partial<T>(object) Operation<(IQArray<Qubit>, long), QVoid>.Partial<P>(Func<P, (IQArray<Qubit>, long)>) Operation<(IQArray<Qubit>, long), QVoid>.Apply<GenO>(object) Operation<(IQArray<Qubit>, long), QVoid>.FindPartialType(Type, object) Operation<(IQArray<Qubit>, long), QVoid>.ToString() Operation<(IQArray<Qubit>, long), QVoid>.__qsharpType() Operation<(IQArray<Qubit>, long), QVoid>.__Body__ Operation<(IQArray<Qubit>, long), QVoid>.__AdjointBody__ Operation<(IQArray<Qubit>, long), QVoid>.__ControlledBody__ Operation<(IQArray<Qubit>, long), QVoid>.__ControlledAdjointBody__ Operation<(IQArray<Qubit>, long), QVoid>.Adjoint Operation<(IQArray<Qubit>, long), QVoid>.Controlled AbstractCallable._ AbstractCallable.GetRuntimeMetadata(IApplyData) AbstractCallable.__Factory__ object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EasyQ.Quantum.Search Assembly: EasyQ.Quantum.dll Syntax [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Body, 88, 106)] [SourceLocation(\"/home/runner/work/EasyQ/EasyQ/src/Quantum/Search/GroverSearch.qs\", OperationFunctor.Adjoint, 88, 106)] public class Oracle : Adjointable<(IQArray<Qubit>, long)>, IAdjointable<(IQArray<Qubit>, long)>, ICallable<(IQArray<Qubit>, long), QVoid>, IAdjointable, ICallable, IApplyData Constructors Oracle(IOperationFactory) Declaration public Oracle(IOperationFactory m) Parameters Type Name Description IOperationFactory m Properties ApplyPauliFlipToMatchTarget__ Declaration protected IAdjointable<(IQArray<Qubit>, IQArray<bool>)> ApplyPauliFlipToMatchTarget__ { get; set; } Property Value Type Description IAdjointable<(IQArray<Qubit>, IQArray<bool>)> Length__ Declaration protected ICallable Length__ { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Arrays__Most Declaration protected ICallable Microsoft__Quantum__Arrays__Most { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Arrays__Tail Declaration protected ICallable Microsoft__Quantum__Arrays__Tail { get; set; } Property Value Type Description ICallable Microsoft__Quantum__Convert__IntAsBoolArray Declaration protected ICallable<(long, long), IQArray<bool>> Microsoft__Quantum__Convert__IntAsBoolArray { get; set; } Property Value Type Description ICallable<(long, long), IQArray<bool>> Microsoft__Quantum__Intrinsic__Z Declaration protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z { get; set; } Property Value Type Description IUnitary<Qubit> __AdjointBody__ Declaration public override Func<(IQArray<Qubit>, long), QVoid> __AdjointBody__ { get; } Property Value Type Description Func<(IQArray<Qubit>, long), QVoid> Overrides Operation<(IQArray<Qubit>, long), QVoid>.__AdjointBody__ __Body__ Declaration public override Func<(IQArray<Qubit>, long), QVoid> __Body__ { get; } Property Value Type Description Func<(IQArray<Qubit>, long), QVoid> Overrides Operation<(IQArray<Qubit>, long), QVoid>.__Body__ Methods Run(IOperationFactory, IQArray<Qubit>, long) Declaration public static Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> qubits, long targetItem) Parameters Type Name Description IOperationFactory __m__ IQArray<Qubit> qubits long targetItem Returns Type Description Task<QVoid> __DataIn__((IQArray<Qubit>, long)) Declaration public override IApplyData __DataIn__((IQArray<Qubit>, long) data) Parameters Type Name Description (IQArray<Qubit>, long) data Returns Type Description IApplyData Overrides Operation<(IQArray<Qubit>, long), QVoid>.__DataIn__((IQArray<Qubit>, long)) __DataOut__(QVoid) Declaration public override IApplyData __DataOut__(QVoid data) Parameters Type Name Description QVoid data Returns Type Description IApplyData Overrides Operation<(IQArray<Qubit>, long), QVoid>.__DataOut__(QVoid) __Init__() This method is called once, to let the Operation initialize and verify its dependencies. Declaration public override void __Init__() Overrides AbstractCallable.__Init__() Implements IAdjointable<I> ICallable<I, O> IAdjointable ICallable IApplyData"
  },
  "api/quantum/EasyQ.Quantum.Search.html": {
    "href": "api/quantum/EasyQ.Quantum.Search.html",
    "title": "Namespace EasyQ.Quantum.Search",
    "summary": "Namespace EasyQ.Quantum.Search Classes ApplyGroverDiffusionOperator ApplyPauliFlipToMatchTarget ApplyPauliFlipToMatchTarget.In CalculateOptimalIterations CalculateOptimalIterations.In CreateOracleForItem CreateOracleForItem.In GroverSearch GroverSearch.In MeasureAllQubits Oracle Oracle.In"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction to EasyQ",
    "summary": "Introduction to EasyQ EasyQ makes quantum computing accessible to regular developers without requiring specialized knowledge of quantum mechanics or quantum computing principles. Getting Started To use EasyQ in your project: Install the EasyQ package Add the necessary using statements Create instances of the quantum operation classes you need Examples Check out the examples in our test suite to see EasyQ in action."
  },
  "index.html": {
    "href": "index.html",
    "title": "EasyQ",
    "summary": "EasyQ EasyQ is a quantum computing framework designed to make quantum algorithms accessible to regular developers, without requiring specialized knowledge of quantum mechanics or quantum computing principles. Project Overview The core philosophy of EasyQ is to provide a developer-friendly API that abstracts away the complexity of quantum operations, allowing regular software engineers to leverage quantum algorithms in their applications. All operations use pure quantum logic with no classical fallbacks. EasyQ currently provides: Quantum Search: Implementation of Grover's algorithm for searching unstructured data Quantum Key Distribution: E91 protocol implementation for secure communications Quantum Random Number Generation: True random number generation using quantum properties Early Documentation I've set up some auto-generated docs you can check out here: EasyQ It's still super early, so it might be a bit rough around the edges. Once I get the Go and Python packages out, I'll also put together some easier-to-follow docs. Feel free to reach out if anything's confusing — I'm happy to help! Current Status EasyQ is currently in active development: All functionality has been tested through quantum simulation Quantum Search works correctly in simulation environments Quantum Key Distribution is implemented theoretically but hasn't been verified on actual quantum hardware, so its functionality on real quantum computers is not yet confirmed No testing has been performed on actual quantum hardware yet Primary focus is on compatibility with Microsoft's quantum computing platform, as indicated by the use of Q# Implementation The framework is built with two main layers: Quantum Layer (.qs files): Core quantum operations written in Q# Bridge Layer (.cs files): Developer-friendly APIs that abstract quantum complexity Requirements .NET 9.0 or higher Microsoft Quantum Development Kit Planned Features Package distribution for easy integration Language bindings for: Go Python Additional quantum algorithms Using It Since EasyQ is not yet available as a package, you'll need to clone the repository and include it in your project Testing The repository includes a test suite that demonstrates the capabilities of EasyQ: cd tests dotnet run Notes This framework has not been tested on real quantum hardware The code is designed to be future-proof, allowing for seamless transition to actual quantum computers when available Performance in simulation does not reflect actual performance on quantum hardware"
  }
}